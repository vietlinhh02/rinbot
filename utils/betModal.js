const { ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, EmbedBuilder } = require('discord.js');
const { getUserRin } = require('./database');

/**
 * T·∫°o modal nh·∫≠p ti·ªÅn c∆∞·ª£c v·ªõi UI c·∫£i thi·ªán
 * @param {string} customId - ID c·ªßa modal
 * @param {string} title - Ti√™u ƒë·ªÅ modal
 * @param {object} options - T√πy ch·ªçn b·ªï sung
 */
function createBetModal(customId, title = 'Nh·∫≠p s·ªë Rin c∆∞·ª£c', options = {}) {
    const {
        placeholder = 'VD: 100, 500, 1000...',
        minValue = 1,
        maxValue = null,
        label = 'S·ªë Rin b·∫°n mu·ªën c∆∞·ª£c:',
        suggestions = true
    } = options;

    const modal = new ModalBuilder()
        .setCustomId(customId)
        .setTitle(title);

    // T·∫°o suggestions n·∫øu ƒë∆∞·ª£c b·∫≠t
    let suggestionText = '';
    if (suggestions) {
        suggestionText = '\nüí° G·ª£i √Ω: 50, 100, 200, 500, 1000, 2000';
    }

    const betInput = new TextInputBuilder()
        .setCustomId('bet_amount')
        .setLabel(label)
        .setPlaceholder(placeholder + suggestionText)
        .setStyle(TextInputStyle.Short)
        .setRequired(true)
        .setMinLength(1)
        .setMaxLength(10);

    const firstActionRow = new ActionRowBuilder().addComponents(betInput);
    modal.addComponents(firstActionRow);

    return modal;
}

/**
 * X·ª≠ l√Ω v√† validate s·ªë ti·ªÅn t·ª´ modal
 * @param {string} input - Input t·ª´ modal
 * @param {string} userId - ID ng∆∞·ªùi d√πng
 * @param {object} options - T√πy ch·ªçn validation
 */
async function validateBetAmount(input, userId, options = {}) {
    const {
        minBet = 1,
        maxBet = null,
        allowPercentage = true,
        roundToNearest = 1
    } = options;

    let betAmount;
    let isPercentage = false;

    // X·ª≠ l√Ω input
    const cleanInput = input.trim().toLowerCase();
    
    // Ki·ªÉm tra ph·∫ßn trƒÉm (50%, all, max, etc.)
    if (allowPercentage) {
        if (cleanInput === 'all' || cleanInput === 'max' || cleanInput === 't·∫•t c·∫£') {
            const userRin = await getUserRin(userId);
            betAmount = userRin;
            isPercentage = true;
        } else if (cleanInput === 'half' || cleanInput === 'n·ª≠a' || cleanInput === '50%') {
            const userRin = await getUserRin(userId);
            betAmount = Math.floor(userRin / 2);
            isPercentage = true;
        } else if (cleanInput.endsWith('%')) {
            const percentage = parseInt(cleanInput.slice(0, -1));
            if (!isNaN(percentage) && percentage > 0 && percentage <= 100) {
                const userRin = await getUserRin(userId);
                betAmount = Math.floor(userRin * percentage / 100);
                isPercentage = true;
            }
        }
    }

    // X·ª≠ l√Ω s·ªë th√¥ng th∆∞·ªùng
    if (!isPercentage) {
        // X·ª≠ l√Ω k√Ω hi·ªáu k, m (1k = 1000, 1m = 1000000)
        if (cleanInput.endsWith('k')) {
            betAmount = parseFloat(cleanInput.slice(0, -1)) * 1000;
        } else if (cleanInput.endsWith('m')) {
            betAmount = parseFloat(cleanInput.slice(0, -1)) * 1000000;
        } else {
            betAmount = parseInt(cleanInput);
        }
    }

    // Validation c∆° b·∫£n
    if (isNaN(betAmount) || betAmount <= 0) {
        return {
            valid: false,
            error: '‚ùå **S·ªë Rin kh√¥ng h·ª£p l·ªá!**\n\nüí° **C√°ch nh·∫≠p h·ª£p l·ªá:**\n‚Ä¢ S·ªë nguy√™n: `100`, `500`, `1000`\n‚Ä¢ K√Ω hi·ªáu: `1k` (1000), `2.5k` (2500)\n‚Ä¢ Ph·∫ßn trƒÉm: `50%`, `all`, `half`'
        };
    }

    // L√†m tr√≤n n·∫øu c·∫ßn
    betAmount = Math.floor(betAmount / roundToNearest) * roundToNearest;

    // Ki·ªÉm tra min/max
    if (betAmount < minBet) {
        return {
            valid: false,
            error: `‚ùå **S·ªë ti·ªÅn qu√° th·∫•p!**\nT·ªëi thi·ªÉu: **${minBet.toLocaleString()} Rin**`
        };
    }

    if (maxBet && betAmount > maxBet) {
        return {
            valid: false,
            error: `‚ùå **S·ªë ti·ªÅn qu√° cao!**\nT·ªëi ƒëa: **${maxBet.toLocaleString()} Rin**`
        };
    }

    // Ki·ªÉm tra s·ªë d∆∞
    const userRin = await getUserRin(userId);
    if (userRin < betAmount) {
        return {
            valid: false,
            error: `‚ùå **Kh√¥ng ƒë·ªß ti·ªÅn!**\n\nüí∞ **S·ªë d∆∞:** ${userRin.toLocaleString()} Rin\nüí∏ **C·∫ßn:** ${betAmount.toLocaleString()} Rin\nüìâ **Thi·∫øu:** ${(betAmount - userRin).toLocaleString()} Rin\n\nüí° H√£y th·ª≠ s·ªë ti·ªÅn th·∫•p h∆°n ho·∫∑c ki·∫øm th√™m Rin!`
        };
    }

    return {
        valid: true,
        amount: betAmount,
        originalInput: input,
        isPercentage: isPercentage,
        userBalance: userRin
    };
}

/**
 * T·∫°o embed th√¥ng b√°o l·ªói ƒë·∫πp m·∫Øt
 * @param {string} title - Ti√™u ƒë·ªÅ l·ªói
 * @param {string} error - N·ªôi dung l·ªói
 * @param {object} suggestions - G·ª£i √Ω b·ªï sung
 */
function createErrorEmbed(title, error, suggestions = {}) {
    const embed = new EmbedBuilder()
        .setTitle(title)
        .setDescription(error)
        .setColor('#FF6B6B')
        .setTimestamp();

    if (suggestions.examples) {
        embed.addFields({
            name: '‚ú® V√≠ d·ª• h·ª£p l·ªá:',
            value: suggestions.examples.join('\n'),
            inline: false
        });
    }

    if (suggestions.tips) {
        embed.addFields({
            name: 'üí° M·∫πo hay:',
            value: suggestions.tips.join('\n'),
            inline: false
        });
    }

    return embed;
}

/**
 * T·∫°o embed x√°c nh·∫≠n c∆∞·ª£c
 * @param {object} betData - D·ªØ li·ªáu c∆∞·ª£c ƒë√£ validate
 * @param {object} gameInfo - Th√¥ng tin game
 */
function createBetConfirmEmbed(betData, gameInfo = {}) {
    const { amount, originalInput, isPercentage, userBalance } = betData;
    const { gameName = 'Game', action = 'tham gia' } = gameInfo;

    let inputInfo = '';
    if (isPercentage) {
        const percentage = Math.round((amount / userBalance) * 100);
        inputInfo = `üìä **B·∫°n ƒë√£ ch·ªçn:** ${percentage}% s·ªë d∆∞ (${originalInput})`;
    } else {
        inputInfo = `üí∞ **S·ªë ti·ªÅn c∆∞·ª£c:** ${amount.toLocaleString()} Rin`;
    }

    const embed = new EmbedBuilder()
        .setTitle(`‚úÖ ${action.toUpperCase()} TH√ÄNH C√îNG!`)
        .setDescription(`üéÆ **${gameName}**\n\n${inputInfo}\n\n` +
            `üí≥ **S·ªë d∆∞ tr∆∞·ªõc:** ${userBalance.toLocaleString()} Rin\n` +
            `üí∏ **S·ªë d∆∞ sau:** ${(userBalance - amount).toLocaleString()} Rin\n\n` +
            `üéØ **Ch√∫c b·∫°n may m·∫Øn!**`)
        .setColor('#00FF00')
        .setFooter({ text: 'H√£y ch∆°i c√≥ tr√°ch nhi·ªám!' })
        .setTimestamp();

    return embed;
}

/**
 * Utility function ƒë·ªÉ x·ª≠ l√Ω to√†n b·ªô flow nh·∫≠p ti·ªÅn
 * @param {object} interaction - Discord interaction
 * @param {object} validation - T√πy ch·ªçn validation
 * @param {object} gameInfo - Th√¥ng tin game
 */
async function handleBetInput(interaction, validation = {}, gameInfo = {}) {
    const betInput = interaction.fields.getTextInputValue('bet_amount');
    const userId = interaction.user.id;

    // Validate s·ªë ti·ªÅn
    const result = await validateBetAmount(betInput, userId, validation);

    if (!result.valid) {
        const errorEmbed = createErrorEmbed(
            'üí∏ L·ªói nh·∫≠p ti·ªÅn c∆∞·ª£c',
            result.error,
            {
                examples: [
                    '‚Ä¢ `100` - C∆∞·ª£c 100 Rin',
                    '‚Ä¢ `1k` - C∆∞·ª£c 1,000 Rin',
                    '‚Ä¢ `50%` - C∆∞·ª£c 50% s·ªë d∆∞',
                    '‚Ä¢ `all` - C∆∞·ª£c t·∫•t c·∫£'
                ],
                tips: [
                    '‚Ä¢ D√πng `k` cho ngh√¨n (1k = 1000)',
                    '‚Ä¢ D√πng ph·∫ßn trƒÉm ƒë·ªÉ c∆∞·ª£c theo t·ª∑ l·ªá',
                    '‚Ä¢ `all` ho·∫∑c `max` ƒë·ªÉ c∆∞·ª£c h·∫øt',
                    '‚Ä¢ `half` ƒë·ªÉ c∆∞·ª£c 50% s·ªë d∆∞'
                ]
            }
        );

        return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
    }

    // T·∫°o embed x√°c nh·∫≠n
    const confirmEmbed = createBetConfirmEmbed(result, gameInfo);

    return {
        success: true,
        amount: result.amount,
        embed: confirmEmbed,
        data: result
    };
}

module.exports = {
    createBetModal,
    validateBetAmount,
    createErrorEmbed,
    createBetConfirmEmbed,
    handleBetInput
}; 