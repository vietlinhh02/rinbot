const { EmbedBuilder } = require('discord.js');

class ErrorHandler {
    constructor(client) {
        this.client = client;
        // H·ªó tr·ª£ nhi·ªÅu owner ID t·ª´ config
        const config = require('../config/config');
        this.ownerIds = config.ownerIds || [];
        this.errorQueue = [];
        this.isProcessing = false;
        this.lastErrorTime = new Map(); // Track ƒë·ªÉ tr√°nh spam
        this.setupErrorListeners();
    }

    setupErrorListeners() {
        // Catch uncaught exceptions
        process.on('uncaughtException', (error) => {
            console.error('Uncaught Exception:', error);
            this.sendErrorToOwner('Uncaught Exception', error);
        });

        // Catch unhandled promise rejections
        process.on('unhandledRejection', (reason, promise) => {
            console.error('Unhandled Rejection at:', promise, 'reason:', reason);
            this.sendErrorToOwner('Unhandled Promise Rejection', reason);
        });

        // Override console.error ƒë·ªÉ catch t·∫•t c·∫£ errors
        const originalConsoleError = console.error;
        console.error = (...args) => {
            originalConsoleError.apply(console, args);
            
            // T·∫°o error message t·ª´ arguments
            const errorMessage = args.map(arg => 
                typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
            ).join(' ');
            
            // Ch·ªâ g·ª≠i n·∫øu c√≥ t·ª´ kh√≥a l·ªói
            if (this.isActualError(errorMessage)) {
                this.sendErrorToOwner('Console Error', errorMessage);
            }
        };
    }

    isActualError(message) {
        const errorKeywords = [
            'error', 'Error', 'ERROR',
            'exception', 'Exception', 'EXCEPTION',
            'TypeError', 'ReferenceError', 'SyntaxError',
            'failed', 'Failed', 'FAILED',
            'cannot', 'Cannot', 'CANNOT',
            'undefined', 'null'
        ];

        // B·ªè qua m·ªôt s·ªë log th√¥ng th∆∞·ªùng
        const ignoreKeywords = [
            'Heartbeat',
            'WebSocket',
            'Ready!',
            'Logged in as'
        ];

        if (ignoreKeywords.some(keyword => message.includes(keyword))) {
            return false;
        }

        return errorKeywords.some(keyword => message.includes(keyword));
    }

    async sendErrorToOwner(type, error) {
        if (!this.client || !this.ownerIds || this.ownerIds.length === 0) return;

        try {
            // Rate limiting - ch·ªâ g·ª≠i 1 l·ªói t∆∞∆°ng t·ª± m·ªói 5 ph√∫t
            const errorHash = this.getErrorHash(error);
            const now = Date.now();
            const lastTime = this.lastErrorTime.get(errorHash);
            
            if (lastTime && now - lastTime < 300000) { // 5 ph√∫t
                return;
            }
            
            this.lastErrorTime.set(errorHash, now);

            const errorString = error instanceof Error ? error.stack || error.message : String(error);
            
            // Gi·ªõi h·∫°n ƒë·ªô d√†i message
            const truncatedError = errorString.length > 1500 
                ? errorString.substring(0, 1500) + '...' 
                : errorString;

            const embed = new EmbedBuilder()
                .setTitle(`üö® ${type}`)
                .setDescription(`\`\`\`\n${truncatedError}\`\`\``)
                .setColor('#FF0000')
                .setTimestamp()
                .addFields(
                    { name: 'ü§ñ Bot', value: this.client.user?.tag || 'Unknown', inline: true },
                    { name: 'üåê Servers', value: this.client.guilds.cache.size.toString(), inline: true },
                    { name: 'üë• Users', value: this.client.users.cache.size.toString(), inline: true }
                )
                .setFooter({ text: 'RinBot Error Reporter' });

            // G·ª≠i cho t·∫•t c·∫£ owner
            let sentCount = 0;
            for (const ownerId of this.ownerIds) {
                try {
                    const owner = await this.client.users.fetch(ownerId);
                    if (owner) {
                        await owner.send({ embeds: [embed] });
                        sentCount++;
                    }
                } catch (ownerError) {
                    console.error(`Kh√¥ng th·ªÉ g·ª≠i l·ªói cho owner ${ownerId}:`, ownerError.message);
                }
            }

            if (sentCount > 0) {
                console.log(`‚úÖ ƒê√£ g·ª≠i l·ªói cho ${sentCount}/${this.ownerIds.length} owner(s): ${type}`);
            }

        } catch (sendError) {
            console.error('Kh√¥ng th·ªÉ g·ª≠i l·ªói cho owner:', sendError);
        }
    }

    getErrorHash(error) {
        // T·∫°o hash ƒë∆°n gi·∫£n ƒë·ªÉ nh·∫≠n di·ªán l·ªói t∆∞∆°ng t·ª±
        const errorString = error instanceof Error ? error.message : String(error);
        return errorString.substring(0, 100); // L·∫•y 100 k√Ω t·ª± ƒë·∫ßu l√†m hash
    }

    // Method ƒë·ªÉ manually g·ª≠i l·ªói
    reportError(message, error = null) {
        this.sendErrorToOwner('Manual Report', error || message);
    }

    // Method ƒë·ªÉ test
    async testErrorReport() {
        await this.sendErrorToOwner('Test Error', new Error('ƒê√¢y l√† test error t·ª´ RinBot'));
    }
}

module.exports = ErrorHandler; 