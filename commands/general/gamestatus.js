const { EmbedBuilder } = require('discord.js');
const { getGuildPrefix } = require('../../utils/database');

module.exports = {
    name: 'gamestatus',
    description: 'Ki·ªÉm tra tr·∫°ng th√°i games ƒëang ch·∫°y (admin only)',
    async execute(message, args, client) {
        // Ki·ªÉm tra quy·ªÅn admin
        if (!message.member.permissions.has('Administrator')) {
            return await message.reply('‚ùå B·∫°n c·∫ßn quy·ªÅn Administrator ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!');
        }

        const channelId = message.channel.id;
        const prefix = await getGuildPrefix(message.guild.id);
        
        const embed = new EmbedBuilder()
            .setTitle('üìä Tr·∫°ng th√°i Games')
            .setColor('#0099FF')
            .setTimestamp();

        let gameCount = 0;
        let gameInfo = '';

        // Ki·ªÉm tra X√¨ D√°ch
        if (global.games && global.games[channelId]) {
            const game = global.games[channelId];
            gameCount++;
            gameInfo += `üÉè **X√¨ D√°ch**\n`;
            gameInfo += `‚Ä¢ Nh√† c√°i: ${game.host.displayName}\n`;
            gameInfo += `‚Ä¢ Ng∆∞·ªùi ch∆°i: ${Object.keys(game.players).length}\n`;
            gameInfo += `‚Ä¢ Tr·∫°ng th√°i: ${game.started ? 'ƒêang ch∆°i' : 'Ch·ªù b·∫Øt ƒë·∫ßu'}\n`;
            if (game.started) {
                gameInfo += `‚Ä¢ L∆∞·ª£t hi·ªán t·∫°i: ${game.currentPlayerIndex + 1}/${game.playerOrder.length}\n`;
            }
            gameInfo += `‚Ä¢ L·ªánh h·ªßy: \`${prefix}xjhuy\`\n\n`;
        }

        // Ki·ªÉm tra C·ªù T·ª∑ Ph√∫
        const typhuCommand = client.commands.get('typhu');
        if (typhuCommand) {
            // Access the rooms Map from the module
            const { rooms } = require('../games/typhu');
            if (rooms && rooms.has(channelId)) {
                const room = rooms.get(channelId);
                gameCount++;
                gameInfo += `üé≤ **C·ªù T·ª∑ Ph√∫**\n`;
                gameInfo += `‚Ä¢ Ch·ªß ph√≤ng: ${room.host.displayName}\n`;
                gameInfo += `‚Ä¢ Ng∆∞·ªùi ch∆°i: ${Object.keys(room.players).length}\n`;
                gameInfo += `‚Ä¢ Tr·∫°ng th√°i: ${room.started ? 'üî¥ ƒêang ch∆°i' : 'üü° Ch·ªù b·∫Øt ƒë·∫ßu'}\n`;
                if (room.started) {
                    const currentPlayer = room.players[room.turnOrder[room.currentTurn]];
                    gameInfo += `‚Ä¢ L∆∞·ª£t hi·ªán t·∫°i: ${currentPlayer?.user.displayName || 'N/A'}\n`;
                }
                gameInfo += `‚Ä¢ L·ªánh h·ªßy: Admin c√≥ th·ªÉ kick t·∫•t c·∫£ kh·ªèi channel\n\n`;
            }
        }

        // Ki·ªÉm tra B·∫ßu Cua (user host)
        const baucuaCommand = client.commands.get('bcgo');
        if (baucuaCommand) {
            // This would need the games Map to be exported from baucua.js
            // For now, we'll mention it in the response
        }

        // Ki·ªÉm tra B·∫ßu Cua Bot
        const bcbotCommand = client.commands.get('bcbot');
        if (bcbotCommand) {
            // Similar issue - would need exported botGames Map
        }

        if (gameCount === 0) {
            embed.setDescription('‚úÖ Kh√¥ng c√≥ game n√†o ƒëang ch·∫°y trong k√™nh n√†y.');
        } else {
            embed.setDescription(`üéØ T√¨m th·∫•y ${gameCount} game ƒëang ch·∫°y:\n\n${gameInfo}`);
        }

        embed.setFooter({ 
            text: `Admin Panel ‚Ä¢ Total games: ${gameCount}`,
            iconURL: client.user.displayAvatarURL()
        });

        await message.reply({ embeds: [embed] });
    }
}; 