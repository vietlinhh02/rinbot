const { EmbedBuilder } = require('discord.js');
const User = require('../../models/User');
const { hashApiKey, decryptApiKey } = require('../../utils/encryption');
const { getPrefix } = require('../../utils/prefixHelper');

module.exports = {
    name: 'geminiinfo',
    description: 'Xem th√¥ng tin API Key Gemini c·ªßa b·∫°n',
    async execute(message, args) {
        try {
            const userId = message.author.id;
            const prefix = await getPrefix(message.guild?.id);
            const user = await User.findOne({ userId });

            if (!user || !user.geminiApiKey) {
                const noKeyEmbed = new EmbedBuilder()
                    .setTitle('‚ùå Ch∆∞a c√†i ƒë·∫∑t API Key')
                    .setDescription('B·∫°n ch∆∞a c√†i ƒë·∫∑t Gemini API Key!\n\n' +
                        `S·ª≠ d·ª•ng l·ªánh \`${prefix}setgemini\` ƒë·ªÉ c√†i ƒë·∫∑t.`)
                    .setColor('#FF6B6B');

                return await message.reply({ embeds: [noKeyEmbed] });
            }

            try {
                // Gi·∫£i m√£ ƒë·ªÉ l·∫•y API key g·ªëc (ch·ªâ ƒë·ªÉ t·∫°o hash v√† ki·ªÉm tra)
                const decryptedApiKey = decryptApiKey(user.geminiApiKey);
                const apiKeyHash = hashApiKey(decryptedApiKey);
                const maskedApiKey = decryptedApiKey.substring(0, 10) + '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢';

                const infoEmbed = new EmbedBuilder()
                    .setTitle('üîê TH√îNG TIN API KEY GEMINI')
                    .setDescription('**Tr·∫°ng th√°i API Key c·ªßa b·∫°n**')
                    .addFields(
                        {
                            name: 'üîë API Key',
                            value: `\`${maskedApiKey}\``,
                            inline: false
                        },
                        {
                            name: 'üîê Hash ID',
                            value: `\`${apiKeyHash}\``,
                            inline: false
                        },
                        {
                            name: '‚úÖ Tr·∫°ng th√°i',
                            value: 'ƒê√£ c√†i ƒë·∫∑t v√† s·∫µn s√†ng s·ª≠ d·ª•ng',
                            inline: false
                        },
                        {
                            name: 'üõ°Ô∏è B·∫£o m·∫≠t',
                            value: 'API Key ƒë∆∞·ª£c m√£ h√≥a AES-256 trong database',
                            inline: false
                        },
                        {
                            name: 'üéØ S·ª≠ d·ª•ng',
                            value: `G√µ \`${prefix}boi\` ƒë·ªÉ b·∫Øt ƒë·∫ßu xem b√≥i!`,
                            inline: false
                        }
                    )
                    .setColor('#00D4AA')
                    .setFooter({ 
                        text: 'API Key c·ªßa b·∫°n ho√†n to√†n an to√†n',
                        iconURL: message.author.displayAvatarURL()
                    });

                await message.reply({ embeds: [infoEmbed] });

            } catch (decryptError) {
                console.error('Decryption error in geminiinfo:', decryptError);
                
                const errorEmbed = new EmbedBuilder()
                    .setTitle('‚ö†Ô∏è L·ªói gi·∫£i m√£')
                    .setDescription('Kh√¥ng th·ªÉ ƒë·ªçc API Key. C√≥ th·ªÉ API Key ƒë√£ b·ªã l·ªói.\n\n' +
                        `H√£y c√†i ƒë·∫∑t l·∫°i v·ªõi l·ªánh \`${prefix}setgemini\``)
                    .setColor('#FF9500');

                await message.reply({ embeds: [errorEmbed] });
            }

        } catch (error) {
            console.error('L·ªói geminiinfo:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra th√¥ng tin API Key!');
        }
    }
}; 