const { EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const Giveaway = require('../../models/Giveaway');
const { getUserRin, updateUserRin } = require('../../utils/database');
const config = require('../../config/config.js');

// L∆∞u tr·ªØ giveaway ƒëang ho·∫°t ƒë·ªông
const activeGiveaways = new Map();

module.exports = {
    name: 'giveaway',
    description: 'T·∫°o giveaway cho th√†nh vi√™n',
    async execute(message, args) {
        // Ki·ªÉm tra quy·ªÅn admin ho·∫∑c owner
        const isOwner = config.isOwner(message.author.id);
        const isAdmin = message.member.permissions.has(PermissionFlagsBits.Administrator);
        
        if (!isAdmin && !isOwner) {
            return await message.reply('‚ùå Ch·ªâ admin ho·∫∑c ch·ªß bot m·ªõi c√≥ th·ªÉ t·∫°o giveaway!');
        }

        if (args.length < 3) {
            return message.reply('‚ùå C√°ch d√πng: `,giveaway <th·ªùi_gian> <s·ªë_ng∆∞·ªùi_th·∫Øng> <ph·∫ßn_th∆∞·ªüng> [--to @user1 @user2]`\nV√≠ d·ª•: `,giveaway 1h 2 100 Rin --to @user1 @user2`');
        }

        const duration = args[0];
        const winners = parseInt(args[1]);
        
        // T√¨m v·ªã tr√≠ c·ªßa --to ƒë·ªÉ t√°ch ph·∫ßn th∆∞·ªüng v√† ng∆∞·ªùi nh·∫≠n
        const toIndex = args.findIndex(arg => arg === '--to');
        let prize, targetUsers = [];
        
        if (toIndex !== -1) {
            // C√≥ ch·ªâ ƒë·ªãnh ng∆∞·ªùi nh·∫≠n
            prize = args.slice(2, toIndex).join(' ');
            const targetMentions = args.slice(toIndex + 1);
            
            // Parse user mentions t·ª´ c√°c argument
            for (const mention of targetMentions) {
                const userId = mention.replace(/<@!?|>/g, '');
                if (/^\d{17,19}$/.test(userId)) {
                    try {
                        const user = await message.client.users.fetch(userId);
                        targetUsers.push(user);
                    } catch (error) {
                        console.error('Kh√¥ng th·ªÉ fetch user:', userId);
                    }
                }
            }
            
            if (targetUsers.length === 0) {
                return message.reply('‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng h·ª£p l·ªá sau --to!\nV√≠ d·ª•: `--to @user1 @user2`');
            }
        } else {
            // Giveaway b√¨nh th∆∞·ªùng
            prize = args.slice(2).join(' ');
        }

        if (isNaN(winners) || winners <= 0) {
            return message.reply('‚ùå S·ªë ng∆∞·ªùi th·∫Øng ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng!');
        }

        // Parse th·ªùi gian
        let seconds = 0;
        try {
            if (duration.endsWith('s')) {
                seconds = parseInt(duration.slice(0, -1));
            } else if (duration.endsWith('m')) {
                seconds = parseInt(duration.slice(0, -1)) * 60;
            } else if (duration.endsWith('h')) {
                seconds = parseInt(duration.slice(0, -1)) * 3600;
            } else if (duration.endsWith('d')) {
                seconds = parseInt(duration.slice(0, -1)) * 86400;
            } else {
                throw new Error('Invalid duration');
            }

            if (seconds < 30 || seconds > 7 * 86400) {
                return message.reply('‚ùå Th·ªùi gian ph·∫£i t·ª´ 30 gi√¢y ƒë·∫øn 7 ng√†y!');
            }
        } catch (error) {
            return message.reply('‚ùå Th·ªùi gian kh√¥ng h·ª£p l·ªá! V√≠ d·ª•: `10s`, `5m`, `1h`, `2d`');
        }

        const endTime = new Date(Date.now() + seconds * 1000);

        // T·∫°o embed giveaway
        let description = `**Ph·∫ßn th∆∞·ªüng**: ${prize}\n` +
            `**S·ªë ng∆∞·ªùi th·∫Øng**: ${winners}\n` +
            `**Th·ªùi gian**: ${duration}\n` +
            `**Host**: ${message.author}\n\n`;

        if (targetUsers.length > 0) {
            description += `**üéØ D√†nh ri√™ng cho:** ${targetUsers.map(u => u.toString()).join(', ')}\n\n`;
            description += `Ch·ªâ nh·ªØng ng∆∞·ªùi ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh m·ªõi c√≥ th·ªÉ nh·∫≠n qu√†!\nB·∫•m üéâ ƒë·ªÉ tham gia!`;
        } else {
            description += `B·∫•m üéâ ƒë·ªÉ tham gia!`;
        }

        const embed = new EmbedBuilder()
            .setTitle('üéâ GIVEAWAY X·ªäN M·ªäN üéâ')
            .setDescription(description)
            .setColor('#FFD700')
            .setFooter({ text: 'K·∫øt th√∫c l√∫c' })
            .setTimestamp(endTime);

        const giveawayMessage = await message.channel.send({ embeds: [embed] });
        await giveawayMessage.react('üéâ');

        // L∆∞u v√†o database
        const giveaway = new Giveaway({
            messageId: giveawayMessage.id,
            channelId: message.channel.id,
            guildId: message.guild.id,
            hostId: message.author.id,
            prize,
            winners,
            endTime,
            participants: [],
            targetUsers: targetUsers.map(u => u.id) // L∆∞u danh s√°ch ng∆∞·ªùi ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
        });

        await giveaway.save();

        // L∆∞u v√†o memory
        activeGiveaways.set(giveawayMessage.id, {
            ...giveaway.toObject(),
            participants: new Set(),
            targetUsers: targetUsers.map(u => u.id)
        });
    },

    // Command ƒë·ªÉ ch·ªâ ƒë·ªãnh ng∆∞·ªùi th·∫Øng
    async executePickWinner(message, args) {
        // Ki·ªÉm tra quy·ªÅn admin ho·∫∑c owner
        const isOwner = config.isOwner(message.author.id);
        const isAdmin = message.member.permissions.has(PermissionFlagsBits.Administrator);
        
        if (!isAdmin && !isOwner) {
            return message.reply('‚ùå Ch·ªâ admin ho·∫∑c ch·ªß bot m·ªõi ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh ng∆∞·ªùi th·∫Øng!');
        }

        if (args.length < 2) {
            return message.reply('‚ùå C√°ch d√πng: `,gpick <message_id> <@user1> [@user2]...`');
        }

        const messageId = args[0];
        const giveaway = await Giveaway.findOne({ messageId, ended: false });

        if (!giveaway) {
            return message.reply('‚ùå Kh√¥ng t√¨m th·∫•y giveaway ho·∫∑c ƒë√£ k·∫øt th√∫c!');
        }

        // L·∫•y danh s√°ch user ƒë∆∞·ª£c mention
        const mentionedUsers = message.mentions.users;
        if (mentionedUsers.size === 0) {
            return message.reply('‚ùå B·∫°n ph·∫£i mention √≠t nh·∫•t 1 ng∆∞·ªùi!');
        }

        const winnersList = Array.from(mentionedUsers.values());
        const winnersDisplay = winnersList.map(user => user.toString()).join(', ');

        // C·∫≠p nh·∫≠t database
        giveaway.ended = true;
        await giveaway.save();

        // X√≥a kh·ªèi memory
        activeGiveaways.delete(messageId);

        // G·ª≠i th√¥ng b√°o k·∫øt qu·∫£
        const resultEmbed = new EmbedBuilder()
            .setTitle('üéâ GIVEAWAY K·∫æT TH√öC (Ch·ªâ ƒë·ªãnh th·ªß c√¥ng) üéâ')
            .setDescription(
                `**Ph·∫ßn th∆∞·ªüng**: ${giveaway.prize}\n` +
                `**Ng∆∞·ªùi th·∫Øng**: ${winnersDisplay}\n` +
                `**ƒê∆∞·ª£c ch·ªâ ƒë·ªãnh b·ªüi**: ${message.author}\n\n` +
                `Ch√∫c m·ª´ng c√°c b·∫°n!`
            )
            .setColor('#00FF00')
            .setFooter({ text: `Hosted b·ªüi ${message.client.users.cache.get(giveaway.hostId)?.tag || 'Unknown'}` });

        await message.channel.send({ embeds: [resultEmbed] });
    },

    // X·ª≠ l√Ω reaction
    async handleReaction(reaction, user, action) {
        if (user.bot) return;
        if (reaction.emoji.name !== 'üéâ') return;

        const giveaway = activeGiveaways.get(reaction.message.id);
        if (!giveaway) return;

        // Ki·ªÉm tra n·∫øu giveaway c√≥ ch·ªâ ƒë·ªãnh ng∆∞·ªùi nh·∫≠n c·ª• th·ªÉ
        if (giveaway.targetUsers && giveaway.targetUsers.length > 0) {
            if (!giveaway.targetUsers.includes(user.id)) {
                // N·∫øu kh√¥ng ph·∫£i ng∆∞·ªùi ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh, x√≥a reaction
                try {
                    await reaction.users.remove(user.id);
                } catch (error) {
                    console.error('L·ªói x√≥a reaction:', error);
                }
                return;
            }
        }

        if (action === 'add') {
            giveaway.participants.add(user.id);
        } else if (action === 'remove') {
            giveaway.participants.delete(user.id);
        }

        // C·∫≠p nh·∫≠t database
        try {
            await Giveaway.findOneAndUpdate(
                { messageId: reaction.message.id },
                { participants: Array.from(giveaway.participants) }
            );
        } catch (error) {
            console.error('L·ªói c·∫≠p nh·∫≠t giveaway participants:', error);
        }
    },

    // Ki·ªÉm tra giveaway h·∫øt h·∫°n
    async checkGiveaways(client) {
        const now = new Date();
        const expiredGiveaways = await Giveaway.find({
            endTime: { $lte: now },
            ended: false
        });

        for (const giveaway of expiredGiveaways) {
            try {
                const channel = await client.channels.fetch(giveaway.channelId);
                if (!channel) continue;

                const participants = giveaway.participants || [];
                
                if (participants.length === 0) {
                    const embed = new EmbedBuilder()
                        .setTitle('üéâ Giveaway k·∫øt th√∫c!')
                        .setDescription('Kh√¥ng c√≥ ai tham gia!')
                        .setColor('#FF0000');
                    
                    await channel.send({ embeds: [embed] });
                } else {
                    // L·ªçc ng∆∞·ªùi tham gia n·∫øu c√≥ targetUsers
                    let eligibleParticipants = participants;
                    
                    if (giveaway.targetUsers && giveaway.targetUsers.length > 0) {
                        // Ch·ªâ nh·ªØng ng∆∞·ªùi ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh m·ªõi c√≥ th·ªÉ th·∫Øng
                        eligibleParticipants = participants.filter(userId => 
                            giveaway.targetUsers.includes(userId)
                        );
                        
                        if (eligibleParticipants.length === 0) {
                            const embed = new EmbedBuilder()
                                .setTitle('üéâ Giveaway k·∫øt th√∫c!')
                                .setDescription(`Kh√¥ng c√≥ ai trong danh s√°ch ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh tham gia!\n\n**Ng∆∞·ªùi ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh:** ${giveaway.targetUsers.map(id => `<@${id}>`).join(', ')}`)
                                .setColor('#FF0000');
                            
                            await channel.send({ embeds: [embed] });
                            // ƒê√°nh d·∫•u ƒë√£ k·∫øt th√∫c
                            giveaway.ended = true;
                            await giveaway.save();
                            activeGiveaways.delete(giveaway.messageId);
                            continue;
                        }
                    }
                    
                    // Random ch·ªçn ng∆∞·ªùi th·∫Øng t·ª´ danh s√°ch ƒë·ªß ƒëi·ªÅu ki·ªán
                    const winnersCount = Math.min(giveaway.winners, eligibleParticipants.length);
                    const shuffled = [...eligibleParticipants].sort(() => Math.random() - 0.5);
                    const winners = shuffled.slice(0, winnersCount);
                    
                    const winnersDisplay = winners.map(userId => `<@${userId}>`).join(', ');
                    
                    let description = `**Ph·∫ßn th∆∞·ªüng**: ${giveaway.prize}\n` +
                        `**Ng∆∞·ªùi th·∫Øng**: ${winnersDisplay}\n` +
                        `**T·ªïng ng∆∞·ªùi tham gia**: ${participants.length}\n`;
                    
                    if (giveaway.targetUsers && giveaway.targetUsers.length > 0) {
                        description += `**ƒê·ªß ƒëi·ªÅu ki·ªán th·∫Øng**: ${eligibleParticipants.length}\n`;
                    }
                    
                    description += `\nCh√∫c m·ª´ng c√°c b·∫°n!`;
                    
                    const embed = new EmbedBuilder()
                        .setTitle('üéâ GIVEAWAY K·∫æT TH√öC üéâ')
                        .setDescription(description)
                        .setColor('#00FF00')
                        .setFooter({ text: `Hosted b·ªüi ${client.users.cache.get(giveaway.hostId)?.tag || 'Unknown'}` });
                    
                    await channel.send({ embeds: [embed] });
                }

                // ƒê√°nh d·∫•u ƒë√£ k·∫øt th√∫c
                giveaway.ended = true;
                await giveaway.save();
                
                // X√≥a kh·ªèi memory
                activeGiveaways.delete(giveaway.messageId);

            } catch (error) {
                console.error('L·ªói x·ª≠ l√Ω giveaway h·∫øt h·∫°n:', error);
            }
        }
    },

    // Load giveaway t·ª´ database khi bot kh·ªüi ƒë·ªông
    async loadActiveGiveaways(client) {
        try {
            const activeDbGiveaways = await Giveaway.find({ ended: false });
            
            for (const giveaway of activeDbGiveaways) {
                activeGiveaways.set(giveaway.messageId, {
                    ...giveaway.toObject(),
                    participants: new Set(giveaway.participants || []),
                    targetUsers: giveaway.targetUsers || []
                });
            }

            console.log(`‚úÖ ƒê√£ load ${activeDbGiveaways.length} giveaway ƒëang ho·∫°t ƒë·ªông`);
        } catch (error) {
            console.error('L·ªói load giveaway:', error);
        }
    },

    async endGiveaway(message, args) {
        try {
            // Ki·ªÉm tra quy·ªÅn admin ho·∫∑c owner
            const isOwner = config.isOwner(message.author.id);
            const isAdmin = message.member.permissions.has(PermissionFlagsBits.Administrator);
            
            if (!isAdmin && !isOwner) {
                return await message.reply('‚ùå Ch·ªâ admin ho·∫∑c ch·ªß bot m·ªõi c√≥ th·ªÉ k·∫øt th√∫c giveaway!');
            }
        } catch (error) {
            console.error('L·ªói x·ª≠ l√Ω endGiveaway:', error);
            return message.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi k·∫øt th√∫c giveaway!');
        }
    }
}; 