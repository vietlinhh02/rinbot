const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const { Expert, Consultation } = require('../../models/Expert');
const crypto = require('crypto');
const { getPrefix } = require('../../utils/prefixHelper');

// C√°c th·ªÉ lo·∫°i c√¢u h·ªèi
const CATEGORIES = {
    'general': 'üåü T·ªïng qu√°t',
    'love': 'üíï T√¨nh y√™u',
    'career': 'üíº S·ª± nghi·ªáp',
    'health': 'üè• S·ª©c kh·ªèe',
    'finance': 'üí∞ T√†i ch√≠nh',
    'family': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Gia ƒë√¨nh',
    'education': 'üìö H·ªçc t·∫≠p',
    'life': 'üåà Cu·ªôc s·ªëng'
};

module.exports = {
    name: 'hoi',
    description: 'H·ªèi chuy√™n gia t∆∞ v·∫•n ·∫©n danh',
    async execute(message, args) {
        try {
            // Ki·ªÉm tra c√≥ chuy√™n gia n√†o kh√¥ng
            const expertCount = await Expert.countDocuments({ status: 'active', isAvailable: true });
            
            if (expertCount === 0) {
                const noExpertEmbed = new EmbedBuilder()
                    .setTitle('üòî Kh√¥ng c√≥ chuy√™n gia')
                    .setDescription('Hi·ªán t·∫°i kh√¥ng c√≥ chuy√™n gia n√†o s·∫µn s√†ng t∆∞ v·∫•n.\n\nVui l√≤ng th·ª≠ l·∫°i sau!')
                    .setColor('#FF6B6B');

                return await message.reply({ embeds: [noExpertEmbed] });
            }

            // Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n v√† c√°c th·ªÉ lo·∫°i
            const helpEmbed = new EmbedBuilder()
                .setTitle('‚ùì H·ªéI CHUY√äN GIA T∆Ø V·∫§N')
                .setDescription('**H·ªá th·ªëng t∆∞ v·∫•n ·∫©n danh ho√†n to√†n**\n\n' +
                    'üîí **B·∫£o m·∫≠t tuy·ªát ƒë·ªëi:**\n' +
                    '‚Ä¢ Chuy√™n gia kh√¥ng bi·∫øt b·∫°n l√† ai\n' +
                    '‚Ä¢ B·∫°n kh√¥ng bi·∫øt chuy√™n gia l√† ai\n' +
                    '‚Ä¢ T·∫•t c·∫£ th√¥ng tin ho√†n to√†n ·∫©n danh\n\n' +
                    `üë• **C√≥ ${expertCount} chuy√™n gia** ƒëang s·∫µn s√†ng t∆∞ v·∫•n\n\n` +
                    '**üìã Ch·ªçn th·ªÉ lo·∫°i c√¢u h·ªèi:**')
                .setColor('#0099FF')
                .setThumbnail('https://raw.githubusercontent.com/vietlinhh02/test/refs/heads/main/d098bf056c1a3a3f23261606edde04de.png')
                .setFooter({ text: 'Tin nh·∫Øn n√†y s·∫Ω t·ª± ƒë·ªông ·∫©n sau 3 ph√∫t' });

            // T·∫°o buttons cho categories
            const row1 = new ActionRowBuilder();
            const row2 = new ActionRowBuilder();
            
            const categoryKeys = Object.keys(CATEGORIES);
            categoryKeys.forEach((key, index) => {
                const button = new ButtonBuilder()
                    .setCustomId(`ask_expert_${key}`)
                    .setLabel(CATEGORIES[key])
                    .setStyle(ButtonStyle.Primary);
                
                if (index < 4) {
                    row1.addComponents(button);
                } else {
                    row2.addComponents(button);
                }
            });

            const helpMessage = await message.reply({ embeds: [helpEmbed], components: [row1, row2] });

            // T·ª± ƒë·ªông x√≥a tin nh·∫Øn h∆∞·ªõng d·∫´n sau 3 ph√∫t ƒë·ªÉ tr√°nh spam
            setTimeout(async () => {
                try {
                    await helpMessage.delete();
                } catch (deleteError) {
                    console.log('Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn h∆∞·ªõng d·∫´n (c√≥ th·ªÉ ƒë√£ b·ªã x√≥a):', deleteError.message);
                }
            }, 180000); // 3 ph√∫t

        } catch (error) {
            console.error('L·ªói hoi:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra!');
        }
    },

    // X·ª≠ l√Ω interactions
    async handleInteraction(interaction) {
        if (interaction.customId.startsWith('ask_expert_')) {
            const category = interaction.customId.replace('ask_expert_', '');
            
            // T·∫°o modal ƒë·ªÉ nh·∫≠p c√¢u h·ªèi
            const modal = new ModalBuilder()
                .setCustomId(`question_modal_${category}`)
                .setTitle(`${CATEGORIES[category]} - H·ªèi chuy√™n gia`);

            const questionInput = new TextInputBuilder()
                .setCustomId('question_input')
                .setLabel('C√¢u h·ªèi c·ªßa b·∫°n:')
                .setStyle(TextInputStyle.Paragraph)
                .setPlaceholder('Nh·∫≠p c√¢u h·ªèi chi ti·∫øt... (Kh√¥ng gi·ªõi h·∫°n ƒë·ªô d√†i)')
                .setRequired(true)
                .setMinLength(10);

            const row = new ActionRowBuilder().addComponents(questionInput);
            modal.addComponents(row);

            await interaction.showModal(modal);
            return;
        }

        if (interaction.customId.startsWith('expert_reply_')) {
            return await this.handleExpertReply(interaction);
        }

        // X·ª≠ l√Ω modal submit cho expert_answer_ ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang ph·∫ßn ri√™ng bi·ªát trong index.js

        if (interaction.isModalSubmit() && interaction.customId.startsWith('question_modal_')) {
            try {
                const category = interaction.customId.replace('question_modal_', '');
                const question = interaction.fields.getTextInputValue('question_input');
                const userId = interaction.user.id;

                // T·∫°o consultation ID duy nh·∫•t
                const consultationId = crypto.randomBytes(8).toString('hex');

                // L∆∞u c√¢u h·ªèi v√†o database
                const consultation = await Consultation.create({
                    consultationId,
                    userId,
                    guildId: interaction.guild.id,
                    question,
                    category,
                    status: 'pending'
                });

                // G·ª≠i th√¥ng b√°o x√°c nh·∫≠n cho user (ephemeral)
                const confirmEmbed = new EmbedBuilder()
                    .setTitle('‚úÖ ƒê√£ g·ª≠i c√¢u h·ªèi')
                    .setDescription(`**M√£ s·ªë:** \`${consultationId}\`\n` +
                        `**Th·ªÉ lo·∫°i:** ${CATEGORIES[category]}\n` +
                        `**C√¢u h·ªèi:** ${question}\n\n` +
                        'üîÑ ƒêang t√¨m chuy√™n gia ph√π h·ª£p...\n' +
                        'üì± B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi c√≥ c√¢u tr·∫£ l·ªùi!')
                    .setColor('#00FF00')
                    .setFooter({ text: 'H·ªá th·ªëng t∆∞ v·∫•n ·∫©n danh' });

                await interaction.reply({ embeds: [confirmEmbed], flags: 64 });

                // T√¨m v√† g·ª≠i cho chuy√™n gia
                await this.assignToExpert(interaction.client, consultation, category);

                // ·∫®n tin nh·∫Øn g·ªëc sau khi g·ª≠i th√†nh c√¥ng
                try {
                    // L·∫•y tin nh·∫Øn g·ªëc (tin nh·∫Øn c√≥ button h·ªèi chuy√™n gia)
                    const originalMessage = await interaction.channel.messages.fetch(interaction.message.id);
                    
                    // T·∫°o embed th√¥ng b√°o ƒë√£ g·ª≠i
                    const sentEmbed = new EmbedBuilder()
                        .setTitle('‚úÖ C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c g·ª≠i')
                        .setDescription(`${interaction.user} ƒë√£ g·ª≠i c√¢u h·ªèi **${CATEGORIES[category]}** th√†nh c√¥ng!\n\n` +
                            'üîí **·∫®n danh ho√†n to√†n** - Chuy√™n gia s·∫Ω tr·∫£ l·ªùi s·ªõm nh·∫•t c√≥ th·ªÉ.')
                        .setColor('#00FF00')
                        .setFooter({ text: 'Tin nh·∫Øn n√†y s·∫Ω t·ª± ƒë·ªông ·∫©n sau 10 gi√¢y' });

                    // Edit tin nh·∫Øn g·ªëc th√†nh th√¥ng b√°o ƒë√£ g·ª≠i
                    await originalMessage.edit({ 
                        embeds: [sentEmbed], 
                        components: [] // X√≥a t·∫•t c·∫£ button
                    });

                    // T·ª± ƒë·ªông x√≥a tin nh·∫Øn sau 10 gi√¢y
                    setTimeout(async () => {
                        try {
                            await originalMessage.delete();
                        } catch (deleteError) {
                            console.log('Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn (c√≥ th·ªÉ ƒë√£ b·ªã x√≥a):', deleteError.message);
                        }
                    }, 10000);

                } catch (editError) {
                    console.log('Kh√¥ng th·ªÉ edit/x√≥a tin nh·∫Øn g·ªëc:', editError.message);
                    // Kh√¥ng c·∫ßn th√¥ng b√°o l·ªói cho user v√¨ c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng
                }

            } catch (error) {
                console.error('L·ªói submit question:', error);
                
                const errorEmbed = new EmbedBuilder()
                    .setTitle('‚ùå L·ªói g·ª≠i c√¢u h·ªèi')
                    .setDescription('Kh√¥ng th·ªÉ g·ª≠i c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i sau!')
                    .setColor('#FF0000');

                await interaction.reply({ embeds: [errorEmbed], flags: 64 });
            }
        }
    },

    // G√°n cho chuy√™n gia
    async assignToExpert(client, consultation, category) {
        try {
            // Ki·ªÉm tra c√≥ room public kh√¥ng
            const { getGuildConfig } = require('../../utils/database');
            const config = await getGuildConfig(consultation.guildId);
            
            if (config?.expertPublicRoom) {
                // G·ª≠i public v√†o room
                return await this.sendToPublicRoom(client, consultation, category, config.expertPublicRoom);
            } else {
                // G·ª≠i DM nh∆∞ c≈©
                return await this.sendToDM(client, consultation, category);
            }

        } catch (error) {
            console.error('L·ªói g√°n cho chuy√™n gia:', error);
        }
    },

    // G·ª≠i v√†o room public
    async sendToPublicRoom(client, consultation, category, channelId) {
        try {
            const channel = await client.channels.fetch(channelId);
            if (!channel) {
                console.log('Kh√¥ng t√¨m th·∫•y room public');
                return await this.sendToDM(client, consultation, category);
            }

            // T·∫°o m√£ theo format custom c·ªßa guild
            const shortId = await this.generateCodeForGuild(consultation.guildId);
            
            // C·∫≠p nh·∫≠t consultation v·ªõi shortId
            await Consultation.findByIdAndUpdate(consultation._id, {
                status: 'published',
                shortId: shortId,
                publicChannelId: channelId
            });

            const publicEmbed = new EmbedBuilder()
                .setTitle('‚ùì C√ÇU H·ªéI CHUY√äN GIA')
                .setDescription(`**M√£:** \`${shortId}\`\n` +
                    `**Th·ªÉ lo·∫°i:** ${CATEGORIES[category]}\n` +
                    `**C√¢u h·ªèi:**\n${consultation.question}\n\n` +
                    'üîí **·∫®n danh ho√†n to√†n** - Ng∆∞·ªùi h·ªèi v√† chuy√™n gia kh√¥ng bi·∫øt nhau')
                .setColor('#0099FF')
                .setFooter({ text: 'Ch·ªù chuy√™n gia tr·∫£ l·ªùi...' })
                .setTimestamp();

            // T·∫°o button cho chuy√™n gia reply
            const replyButton = new ButtonBuilder()
                .setCustomId(`expert_reply_${shortId}`)
                .setLabel('üìù Tr·∫£ l·ªùi (Chuy√™n gia)')
                .setStyle(ButtonStyle.Primary);

            const row = new ActionRowBuilder().addComponents(replyButton);

            const publicMessage = await channel.send({ 
                embeds: [publicEmbed], 
                components: [row] 
            });

            // L∆∞u message ID ƒë·ªÉ update sau
            await Consultation.findByIdAndUpdate(consultation._id, {
                publicMessageId: publicMessage.id
            });
            
            // Th√¥ng b√°o cho t·∫•t c·∫£ chuy√™n gia ph√π h·ª£p v·ªõi lƒ©nh v·ª±c n√†y
            await this.notifyExperts(client, consultation, category, shortId, channel.guild.id);

        } catch (error) {
            console.error('L·ªói g·ª≠i public:', error);
            // Fallback to DM
            return await this.sendToDM(client, consultation, category);
        }
    },

    // G·ª≠i DM nh∆∞ c≈© (fallback)
    async sendToDM(client, consultation, category) {
        try {
            // T√¨m chuy√™n gia ph√π h·ª£p
            let expert = await Expert.findOne({
                status: 'active',
                isAvailable: true,
                specialties: category
            });

            if (!expert) {
                expert = await Expert.findOne({
                    status: 'active',
                    isAvailable: true
                });
            }

            if (!expert) {
                console.log('Kh√¥ng t√¨m th·∫•y chuy√™n gia s·∫µn s√†ng');
                return;
            }

            const expertUser = await client.users.fetch(expert.userId);
            
            const expertEmbed = new EmbedBuilder()
                .setTitle('üîî C√ÇU H·ªéI T∆Ø V·∫§N M·ªöI')
                .setDescription(`**M√£ s·ªë:** \`${consultation.consultationId}\`\n` +
                    `**Th·ªÉ lo·∫°i:** ${CATEGORIES[category]}\n` +
                    `**C√¢u h·ªèi:**\n${consultation.question}\n\n` +
                    '**C√°ch tr·∫£ l·ªùi:**\n' +
                    `Tr·∫£ l·ªùi tin nh·∫Øn n√†y v·ªõi format:\n` +
                    `\`!reply ${consultation.consultationId} [c√¢u tr·∫£ l·ªùi]\`\n\n` +
                    'üîí **Ho√†n to√†n ·∫©n danh** - B·∫°n v√† ng∆∞·ªùi h·ªèi kh√¥ng bi·∫øt nhau')
                .setColor('#FFA500')
                .setFooter({ text: 'H·ªá th·ªëng t∆∞ v·∫•n chuy√™n gia' });

            const dmMessage = await expertUser.send({ embeds: [expertEmbed] });

            await Consultation.findByIdAndUpdate(consultation._id, {
                status: 'assigned',
                expertId: expert.userId,
                dmMessageId: dmMessage.id
            });

        } catch (error) {
            console.error('L·ªói g·ª≠i DM:', error);
        }
    },

    // X·ª≠ l√Ω chuy√™n gia reply qua button
    async handleExpertReply(interaction) {
        try {
            console.log('Chuy√™n gia ƒëang m·ªü form tr·∫£ l·ªùi...');
            const shortId = interaction.customId.replace('expert_reply_', '');
            
            // Ki·ªÉm tra user c√≥ ph·∫£i chuy√™n gia kh√¥ng
            const expert = await Expert.findOne({ 
                userId: interaction.user.id
            });
            
            if (!expert) {
                return await interaction.reply({ 
                    content: '‚ùå B·∫°n kh√¥ng ph·∫£i l√† chuy√™n gia trong h·ªá th·ªëng!', 
                    flags: 64 
                });
            }
            
            if (expert.status !== 'active') {
                return await interaction.reply({ 
                    content: '‚ùå T√†i kho·∫£n chuy√™n gia c·ªßa b·∫°n ƒëang b·ªã v√¥ hi·ªáu h√≥a!', 
                    flags: 64 
                });
            }

            // T√¨m consultation
            console.log(`ƒêang t√¨m consultation v·ªõi shortId: ${shortId}`);
            const consultation = await Consultation.findOne({ 
                shortId: shortId
            });

            if (!consultation) {
                return await interaction.reply({ 
                    content: '‚ùå Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†y! C√≥ th·ªÉ ƒë√£ b·ªã x√≥a.', 
                    flags: 64 
                });
            }
            
            if (consultation.status !== 'published') {
                return await interaction.reply({ 
                    content: `‚ùå C√¢u h·ªèi n√†y ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi ho·∫∑c kh√¥ng c√≤n kh·∫£ d·ª•ng (status: ${consultation.status})!`, 
                    flags: 64 
                });
            }

            // T·∫°o modal ƒë·ªÉ nh·∫≠p c√¢u tr·∫£ l·ªùi
            try {
                console.log('ƒêang t·∫°o modal tr·∫£ l·ªùi...');
                const modal = new ModalBuilder()
                    .setCustomId(`expert_answer_${shortId}`)
                    .setTitle('Tr·∫£ l·ªùi c√¢u h·ªèi (·∫®n danh)');

                const answerInput = new TextInputBuilder()
                    .setCustomId('answer_input')
                    .setLabel('C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n:')
                    .setStyle(TextInputStyle.Paragraph)
                    .setPlaceholder('Nh·∫≠p c√¢u tr·∫£ l·ªùi chi ti·∫øt, chuy√™n nghi·ªáp... (Kh√¥ng gi·ªõi h·∫°n ƒë·ªô d√†i)')
                    .setRequired(true)
                    .setMinLength(20);

                const row = new ActionRowBuilder().addComponents(answerInput);
                modal.addComponents(row);

                await interaction.showModal(modal);
                console.log('ƒê√£ hi·ªÉn th·ªã modal tr·∫£ l·ªùi th√†nh c√¥ng');
            } catch (modalError) {
                console.error('L·ªói hi·ªÉn th·ªã modal:', modalError);
                await interaction.reply({ 
                    content: `‚ùå Kh√¥ng th·ªÉ hi·ªÉn th·ªã form tr·∫£ l·ªùi: ${modalError.message}`, 
                    flags: 64 
                });
            }

        } catch (error) {
            console.error('L·ªói expert reply:', error);
            try {
                if (!interaction.replied) {
                    await interaction.reply({ 
                        content: `‚ùå C√≥ l·ªói x·∫£y ra: ${error.message}`, 
                        flags: 64 
                    });
                }
            } catch (replyError) {
                console.error('Kh√¥ng th·ªÉ ph·∫£n h·ªìi l·ªói:', replyError);
            }
        }
    },

    // X·ª≠ l√Ω submit answer
    async handleAnswerSubmit(interaction) {
        try {
            console.log('ƒêang x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi chuy√™n gia...');
            
            // Ki·ªÉm tra interaction
            if (!interaction.isModalSubmit()) {
                console.error('Interaction kh√¥ng ph·∫£i modal submit');
                return await interaction.reply({ 
                    content: '‚ùå C√≥ l·ªói x·∫£y ra: Kh√¥ng ph·∫£i modal submit', 
                    flags: 64 
                });
            }
            
            // L·∫•y shortId t·ª´ customId
            const shortId = interaction.customId.replace('expert_answer_', '');
            console.log(`ShortID: ${shortId}`);
            
            // Ki·ªÉm tra fields
            if (!interaction.fields || !interaction.fields.getTextInputValue) {
                console.error('Kh√¥ng t√¨m th·∫•y fields trong modal submit');
                return await interaction.reply({ 
                    content: '‚ùå C√≥ l·ªói x·∫£y ra: Kh√¥ng t√¨m th·∫•y n·ªôi dung c√¢u tr·∫£ l·ªùi', 
                    flags: 64 
                });
            }
            
            // L·∫•y c√¢u tr·∫£ l·ªùi
            let answer;
            try {
                answer = interaction.fields.getTextInputValue('answer_input');
                console.log(`ƒê√£ l·∫•y ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi, ƒë·ªô d√†i: ${answer?.length || 0}`);
            } catch (fieldError) {
                console.error('L·ªói khi l·∫•y c√¢u tr·∫£ l·ªùi:', fieldError);
                return await interaction.reply({ 
                    content: '‚ùå Kh√¥ng th·ªÉ ƒë·ªçc n·ªôi dung c√¢u tr·∫£ l·ªùi. Vui l√≤ng th·ª≠ l·∫°i!', 
                    flags: 64 
                });
            }
            
            if (!answer || answer.trim().length < 10) {
                return await interaction.reply({ 
                    content: '‚ùå C√¢u tr·∫£ l·ªùi qu√° ng·∫Øn! Vui l√≤ng vi·∫øt chi ti·∫øt h∆°n.', 
                    flags: 64 
                });
            }

            // Ki·ªÉm tra l·∫°i expert
            console.log(`Ki·ªÉm tra chuy√™n gia: ${interaction.user.id}`);
            const expert = await Expert.findOne({ 
                userId: interaction.user.id
            });

            if (!expert) {
                console.log('Kh√¥ng t√¨m th·∫•y chuy√™n gia v·ªõi ID:', interaction.user.id);
                return await interaction.reply({ 
                    content: '‚ùå B·∫°n kh√¥ng ph·∫£i l√† chuy√™n gia trong h·ªá th·ªëng!', 
                    flags: 64 
                });
            }
            
            if (expert.status !== 'active') {
                console.log('Chuy√™n gia kh√¥ng active:', expert.status);
                return await interaction.reply({ 
                    content: '‚ùå T√†i kho·∫£n chuy√™n gia c·ªßa b·∫°n ƒëang b·ªã v√¥ hi·ªáu h√≥a!', 
                    flags: 64 
                });
            }

            // T√¨m consultation
            console.log(`ƒêang t√¨m consultation v·ªõi shortId: ${shortId}`);
            const consultation = await Consultation.findOne({ 
                shortId: shortId
            });

            if (!consultation) {
                console.log('Kh√¥ng t√¨m th·∫•y consultation v·ªõi shortId:', shortId);
                return await interaction.reply({ 
                    content: '‚ùå Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†y! C√≥ th·ªÉ ƒë√£ b·ªã x√≥a.', 
                    flags: 64 
                });
            }
            
            if (consultation.status !== 'published') {
                console.log('Consultation kh√¥ng ·ªü tr·∫°ng th√°i published:', consultation.status);
                return await interaction.reply({ 
                    content: `‚ùå C√¢u h·ªèi n√†y ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi ho·∫∑c kh√¥ng c√≤n kh·∫£ d·ª•ng (status: ${consultation.status})!`, 
                    flags: 64 
                });
            }

            // C·∫≠p nh·∫≠t consultation
            console.log('ƒêang c·∫≠p nh·∫≠t consultation...');
            await Consultation.findByIdAndUpdate(consultation._id, {
                status: 'answered',
                answer: answer,
                expertResponse: {
                    answeredAt: new Date(),
                    expertUserId: interaction.user.id
                }
            });

            // Ki·ªÉm tra publicChannelId v√† publicMessageId
            if (!consultation.publicChannelId || !consultation.publicMessageId) {
                console.error('Thi·∫øu publicChannelId ho·∫∑c publicMessageId');
                return await interaction.reply({ 
                    content: '‚úÖ ƒê√£ l∆∞u c√¢u tr·∫£ l·ªùi th√†nh c√¥ng, nh∆∞ng kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tin nh·∫Øn c√¥ng khai!', 
                    flags: 64 
                });
            }

            try {
                // Update public message
                console.log('ƒêang c·∫≠p nh·∫≠t tin nh·∫Øn c√¥ng khai...');
                const channel = await interaction.client.channels.fetch(consultation.publicChannelId);
                if (!channel) {
                    console.error('Kh√¥ng t√¨m th·∫•y channel:', consultation.publicChannelId);
                    throw new Error('Kh√¥ng t√¨m th·∫•y channel');
                }
                
                const publicMessage = await channel.messages.fetch(consultation.publicMessageId);
                if (!publicMessage) {
                    console.error('Kh√¥ng t√¨m th·∫•y tin nh·∫Øn:', consultation.publicMessageId);
                    throw new Error('Kh√¥ng t√¨m th·∫•y tin nh·∫Øn');
                }

                const answeredEmbed = new EmbedBuilder()
                    .setTitle('‚úÖ C√ÇU H·ªéI ƒê√É ƒê∆Ø·ª¢C TR·∫¢ L·ªúI')
                    .setDescription(`**M√£:** \`${shortId}\`\n` +
                        `**Th·ªÉ lo·∫°i:** ${CATEGORIES[consultation.category]}\n` +
                        `**C√¢u h·ªèi:**\n${consultation.question}\n\n` +
                        `**üí° C√¢u tr·∫£ l·ªùi t·ª´ chuy√™n gia:**\n${answer}\n\n` +
                        'üîí **Ho√†n to√†n ·∫©n danh** - Chuy√™n gia ƒë√£ tr·∫£ l·ªùi m·ªôt c√°ch chuy√™n nghi·ªáp')
                    .setColor('#00FF00')
                    .setFooter({ text: 'ƒê√£ tr·∫£ l·ªùi ‚Ä¢ Ch·ªâ mang t√≠nh tham kh·∫£o' })
                    .setTimestamp();

                // Disable button
                const disabledButton = new ButtonBuilder()
                    .setCustomId(`expert_reply_${shortId}_disabled`)
                    .setLabel('‚úÖ ƒê√£ tr·∫£ l·ªùi')
                    .setStyle(ButtonStyle.Success)
                    .setDisabled(true);

                const disabledRow = new ActionRowBuilder().addComponents(disabledButton);

                await publicMessage.edit({ 
                    embeds: [answeredEmbed], 
                    components: [disabledRow] 
                });
                console.log('ƒê√£ c·∫≠p nh·∫≠t tin nh·∫Øn c√¥ng khai th√†nh c√¥ng');
            } catch (messageError) {
                console.error('L·ªói c·∫≠p nh·∫≠t tin nh·∫Øn c√¥ng khai:', messageError);
                await interaction.reply({ 
                    content: '‚úÖ ƒê√£ l∆∞u c√¢u tr·∫£ l·ªùi th√†nh c√¥ng, nh∆∞ng kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tin nh·∫Øn c√¥ng khai!', 
                    flags: 64 
                });
                return;
            }

            // G·ª≠i DM cho ng∆∞·ªùi h·ªèi
            try {
                console.log('ƒêang g·ª≠i DM cho ng∆∞·ªùi h·ªèi...');
                const userWhoAsked = await interaction.client.users.fetch(consultation.userId);
                
                const dmEmbed = new EmbedBuilder()
                    .setTitle('üìù C√ÇU H·ªéI C·ª¶A B·∫†N ƒê√É ƒê∆Ø·ª¢C TR·∫¢ L·ªúI')
                    .setDescription(`**M√£:** \`${shortId}\`\n` +
                        `**Th·ªÉ lo·∫°i:** ${CATEGORIES[consultation.category]}\n\n` +
                        `**C√¢u h·ªèi c·ªßa b·∫°n:**\n${consultation.question}\n\n` +
                        `**üí° C√¢u tr·∫£ l·ªùi t·ª´ chuy√™n gia:**\n${answer}\n\n` +
                        'üîí **·∫®n danh ho√†n to√†n** - C√¢u tr·∫£ l·ªùi ƒë√£ ƒë∆∞·ª£c ƒëƒÉng c√¥ng khai')
                    .setColor('#00FF00')
                    .setFooter({ text: 'H·ªá th·ªëng t∆∞ v·∫•n chuy√™n gia ‚Ä¢ Ch·ªâ mang t√≠nh tham kh·∫£o' });

                await userWhoAsked.send({ embeds: [dmEmbed] });
                console.log('ƒê√£ g·ª≠i DM cho ng∆∞·ªùi h·ªèi th√†nh c√¥ng');
            } catch (dmError) {
                console.log('Kh√¥ng th·ªÉ g·ª≠i DM cho ng∆∞·ªùi h·ªèi:', dmError.message);
                // Kh√¥ng c·∫ßn ph·∫£n h·ªìi l·ªói n√†y cho chuy√™n gia
            }

            // TƒÉng counter cho expert
            await Expert.findByIdAndUpdate(expert._id, {
                $inc: { totalConsultations: 1 }
            });

            // Th√¥ng b√°o th√†nh c√¥ng cho chuy√™n gia
            console.log('Ho√†n t·∫•t x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi');
            await interaction.reply({ 
                content: '‚úÖ ƒê√£ g·ª≠i c√¢u tr·∫£ l·ªùi th√†nh c√¥ng! C√¢u tr·∫£ l·ªùi ƒë√£ ƒë∆∞·ª£c ƒëƒÉng c√¥ng khai.', 
                flags: 64 
            });

        } catch (error) {
            console.error('L·ªói submit answer:', error);
            try {
                if (!interaction.replied) {
                    await interaction.reply({ 
                        content: `‚ùå C√≥ l·ªói x·∫£y ra khi g·ª≠i c√¢u tr·∫£ l·ªùi: ${error.message}`, 
                        flags: 64 
                    });
                }
            } catch (replyError) {
                console.error('Kh√¥ng th·ªÉ ph·∫£n h·ªìi l·ªói:', replyError);
            }
        }
    },

    // G·ª≠i th√¥ng b√°o cho t·∫•t c·∫£ chuy√™n gia ph√π h·ª£p
    async notifyExperts(client, consultation, category, shortId, guildId) {
        try {
            console.log(`ƒêang th√¥ng b√°o cho chuy√™n gia v·ªÅ c√¢u h·ªèi ${shortId}...`);
            
            // T√¨m t·∫•t c·∫£ chuy√™n gia ph√π h·ª£p v·ªõi lƒ©nh v·ª±c n√†y
            const experts = await Expert.find({
                status: 'active',
                isAvailable: true,
                $or: [
                    { specialties: category },
                    { specialties: 'general' }
                ]
            });
            
            if (experts.length === 0) {
                console.log('Kh√¥ng t√¨m th·∫•y chuy√™n gia ph√π h·ª£p ƒë·ªÉ th√¥ng b√°o');
                return;
            }
            
            console.log(`T√¨m th·∫•y ${experts.length} chuy√™n gia ph√π h·ª£p`);
            
            // L·∫•y th√¥ng tin guild v√† channel
            const guild = await client.guilds.fetch(guildId);
            const { getGuildConfig } = require('../../utils/database');
            const config = await getGuildConfig(guildId);
            const channelId = config?.expertPublicRoom;
            
            // T·∫°o embed th√¥ng b√°o
            const notifyEmbed = new EmbedBuilder()
                .setTitle('üîî C√ì C√ÇU H·ªéI M·ªöI C·∫¶N T∆Ø V·∫§N!')
                .setDescription(`**M√£:** \`${shortId}\`\n` +
                    `**Th·ªÉ lo·∫°i:** ${CATEGORIES[category]}\n` +
                    `**C√¢u h·ªèi:**\n${consultation.question}\n\n` +
                    '**üí¨ C√°ch tr·∫£ l·ªùi:**\n' +
                    '1Ô∏è‚É£ **Tr·∫£ l·ªùi tr·ª±c ti·∫øp:** Reply tin nh·∫Øn n√†y v·ªõi format:\n' +
                    `\`!reply ${shortId} [c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n]\`\n\n` +
                    `2Ô∏è‚É£ **Tr·∫£ l·ªùi trong k√™nh:** ${channelId ? `<#${channelId}>` : 'K√™nh public'}\n` +
                    '‚Ä¢ Nh·∫•n n√∫t "üìù Tr·∫£ l·ªùi" trong c√¢u h·ªèi c√¥ng khai\n\n' +
                    'üîí **Ho√†n to√†n ·∫©n danh** - B·∫°n v√† ng∆∞·ªùi h·ªèi kh√¥ng bi·∫øt nhau')
                .setColor('#FFA500')
                .setFooter({ text: `${guild.name} ‚Ä¢ H·ªá th·ªëng t∆∞ v·∫•n chuy√™n gia` })
                .setTimestamp();
            
            // G·ª≠i th√¥ng b√°o cho t·ª´ng chuy√™n gia
            let sentCount = 0;
            for (const expert of experts) {
                try {
                    const expertUser = await client.users.fetch(expert.userId);
                    await expertUser.send({ embeds: [notifyEmbed] });
                    sentCount++;
                } catch (dmError) {
                    console.log(`Kh√¥ng th·ªÉ g·ª≠i DM cho chuy√™n gia ${expert.username}:`, dmError.message);
                }
            }
            
            console.log(`ƒê√£ g·ª≠i th√¥ng b√°o cho ${sentCount}/${experts.length} chuy√™n gia`);
            
            // L∆∞u danh s√°ch chuy√™n gia ƒë√£ th√¥ng b√°o
            await Consultation.findByIdAndUpdate(consultation._id, {
                notifiedExperts: experts.map(e => e.userId)
            });
            
        } catch (error) {
            console.error('L·ªói th√¥ng b√°o cho chuy√™n gia:', error);
        }
    },
    
    // T·∫°o m√£ theo format c·ªßa guild
    async generateCodeForGuild(guildId) {
        try {
            const { getGuildConfig } = require('../../utils/database');
            const config = await getGuildConfig(guildId);
            const format = config?.expertCodeFormat;

            if (!format) {
                // M·∫∑c ƒë·ªãnh: 4 k√Ω t·ª± ng·∫´u nhi√™n
                return Math.random().toString(36).substring(2, 6).toUpperCase();
            }

            // Parse format custom
            const match = format.match(/^([A-Z]*)\{(\d+)\}$/);
            if (!match) {
                // Format l·ªói, fallback v·ªÅ m·∫∑c ƒë·ªãnh
                return Math.random().toString(36).substring(2, 6).toUpperCase();
            }

            const prefix = match[1];
            const length = parseInt(match[2]);
            
            // T·∫°o ph·∫ßn s·ªë ng·∫´u nhi√™n
            let randomPart = '';
            const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
            for (let i = 0; i < length; i++) {
                randomPart += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            
            return prefix + randomPart;

        } catch (error) {
            console.error('L·ªói generate code:', error);
            // Fallback v·ªÅ m·∫∑c ƒë·ªãnh
            return Math.random().toString(36).substring(2, 6).toUpperCase();
        }
    }
}; 
