const { EmbedBuilder } = require('discord.js');
const User = require('../../models/User');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const { decryptApiKey } = require('../../utils/encryption');
const { getPrefix } = require('../../utils/prefixHelper');

module.exports = {
    name: 'boianh',
    description: 'Xem b√≥i t·ª´ h√¨nh ·∫£nh b·∫£n ƒë·ªì sao, t·ª≠ vi',
    async execute(message, args, client) {
        try {
            const userId = message.author.id;
            const prefix = await getPrefix(message.guild?.id);
            
            // Ki·ªÉm tra user c√≥ API key ch∆∞a
            const user = await User.findOne({ userId });
            if (!user || !user.geminiApiKey) {
                const noKeyEmbed = new EmbedBuilder()
                    .setTitle('üîë CH∆ØA C√ÄI ƒê·∫∂T API KEY')
                    .setDescription('B·∫°n ch∆∞a c√†i ƒë·∫∑t Gemini API Key!\n\n' +
                        `S·ª≠ d·ª•ng l·ªánh \`${prefix}setgemini\` ƒë·ªÉ c√†i ƒë·∫∑t API Key tr∆∞·ªõc khi xem b√≥i t·ª´ h√¨nh ·∫£nh.`)
                    .setColor('#FF6B6B');

                return await message.reply({ embeds: [noKeyEmbed] });
            }

            // Ki·ªÉm tra c√≥ h√¨nh ·∫£nh ƒë√≠nh k√®m kh√¥ng
            if (message.attachments.size === 0) {
                const helpEmbed = new EmbedBuilder()
                    .setTitle('üì∏ XEM B√ìI T·ª™ H√åNH ·∫¢NH')
                    .setDescription('**H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:**\n\n' +
                        '1Ô∏è‚É£ ƒê√≠nh k√®m h√¨nh ·∫£nh b·∫£n ƒë·ªì sao ho·∫∑c t·ª≠ vi\n' +
                        `2Ô∏è‚É£ G√µ l·ªánh \`${prefix}boianh\` (c√≥ th·ªÉ th√™m c√¢u h·ªèi)\n\n` +
                        '**C√°c lo·∫°i h√¨nh ·∫£nh h·ªó tr·ª£:**\n' +
                        '‚≠ê B·∫£n ƒë·ªì sao sinh (Birth Chart)\n' +
                        'üîÆ L√° b√†i Tarot\n' +
                        'üß† Bi·ªÉu ƒë·ªì t·ª≠ vi\n' +
                        'üåô B·∫£n ƒë·ªì chi√™m tinh\n' +
                        'üìú H√¨nh ·∫£nh phong th·ªßy\n\n' +
                        '**V√≠ d·ª•:**\n' +
                        `‚Ä¢ ƒê√≠nh k√®m ·∫£nh + \`${prefix}boianh\`\n` +
                        `‚Ä¢ ƒê√≠nh k√®m ·∫£nh + \`${prefix}boianh T√¨nh y√™u c·ªßa t√¥i s·∫Ω ra sao?\``)
                    .setColor('#9B59B6')
                    .setThumbnail(client.user.displayAvatarURL())
                    .setFooter({ text: 'H√£y ƒë√≠nh k√®m h√¨nh ·∫£nh v√† th·ª≠ l·∫°i!' });

                return await message.reply({ embeds: [helpEmbed] });
            }

            // L·∫•y h√¨nh ·∫£nh ƒë·∫ßu ti√™n
            const attachment = message.attachments.first();
            
            // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
            const allowedFormats = ['png', 'jpg', 'jpeg', 'gif', 'webp'];
            const fileExtension = attachment.name.split('.').pop().toLowerCase();
            
            if (!allowedFormats.includes(fileExtension)) {
                const errorEmbed = new EmbedBuilder()
                    .setTitle('‚ùå ƒê·ªãnh d·∫°ng kh√¥ng h·ªó tr·ª£')
                    .setDescription(`Ch·ªâ h·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng: ${allowedFormats.join(', ')}\n\n` +
                        'H√£y upload l·∫°i h√¨nh ·∫£nh v·ªõi ƒë·ªãnh d·∫°ng ph√π h·ª£p.')
                    .setColor('#FF0000');

                return await message.reply({ embeds: [errorEmbed] });
            }

            // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (max 10MB)
            if (attachment.size > 10 * 1024 * 1024) {
                const errorEmbed = new EmbedBuilder()
                    .setTitle('‚ùå File qu√° l·ªõn')
                    .setDescription('H√¨nh ·∫£nh ph·∫£i nh·ªè h∆°n 10MB.\n\nH√£y n√©n ·∫£nh v√† th·ª≠ l·∫°i.')
                    .setColor('#FF0000');

                return await message.reply({ embeds: [errorEmbed] });
            }

            // L·∫•y c√¢u h·ªèi t·ª´ args (n·∫øu c√≥)
            const customQuestion = args.length > 0 ? args.join(' ') : null;

            // Hi·ªÉn th·ªã loading
            const loadingDescription = customQuestion 
                ? `**H√¨nh ·∫£nh:** ${attachment.name}\n**C√¢u h·ªèi:** ${customQuestion}\n\nƒêang ph√¢n t√≠ch h√¨nh ·∫£nh v√† k·∫øt n·ªëi v·ªõi th·∫ø gi·ªõi t√¢m linh...`
                : `**H√¨nh ·∫£nh:** ${attachment.name}\n\nƒêang ph√¢n t√≠ch h√¨nh ·∫£nh v√† k·∫øt n·ªëi v·ªõi th·∫ø gi·ªõi t√¢m linh...`;
                
            const loadingEmbed = new EmbedBuilder()
                .setTitle('üîç ƒêANG PH√ÇN T√çCH H√åNH ·∫¢NH...')
                .setDescription(loadingDescription)
                .setColor('#F39C12')
                .setImage(attachment.url);

            const loadingMsg = await message.reply({ embeds: [loadingEmbed] });

            // G·ªçi Gemini Vision AI
            try {
                // Gi·∫£i m√£ API key
                const decryptedApiKey = decryptApiKey(user.geminiApiKey);
                const genAI = new GoogleGenerativeAI(decryptedApiKey);
                const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

                // T·∫£i h√¨nh ·∫£nh
                const response = await fetch(attachment.url);
                const buffer = await response.arrayBuffer();
                
                const imageData = {
                    inlineData: {
                        data: Buffer.from(buffer).toString('base64'),
                        mimeType: attachment.contentType
                    }
                };

                // T·∫°o prompt cho vi·ªác ƒë·ªçc h√¨nh ·∫£nh
                const basePrompt = `B·∫°n l√† m·ªôt th·∫ßy b√≥i chuy√™n nghi·ªáp v√† nh√† chi√™m tinh h·ªçc c√≥ kh·∫£ nƒÉng ƒë·ªçc ƒë∆∞·ª£c c√°c bi·ªÉu ƒë·ªì, b·∫£n ƒë·ªì sao, l√° b√†i tarot v√† h√¨nh ·∫£nh phong th·ªßy.

H√£y ph√¢n t√≠ch h√¨nh ·∫£nh n√†y v√† ƒë∆∞a ra l·ªùi b√≥i chi ti·∫øt.`;

                const questionPrompt = customQuestion 
                    ? `\n\nC√¢u h·ªèi c·ª• th·ªÉ: "${customQuestion}"\nH√£y t·∫≠p trung tr·∫£ l·ªùi c√¢u h·ªèi n√†y d·ª±a tr√™n nh·ªØng g√¨ b·∫°n th·∫•y trong h√¨nh.`
                    : '';

                const enhancedPrompt = `${basePrompt}${questionPrompt}

Ng∆∞·ªùi c·∫ßn b√≥i: ${message.author.displayName}
Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}
${customQuestion ? `C√¢u h·ªèi: ${customQuestion}` : ''}

Y√™u c·∫ßu ph√¢n t√≠ch:
- M√¥ t·∫£ nh·ªØng g√¨ b·∫°n th·∫•y trong h√¨nh ·∫£nh
- Gi·∫£i th√≠ch √Ω nghƒ©a c·ªßa c√°c bi·ªÉu t∆∞·ª£ng, v·ªã tr√≠ sao, s·ªë li·ªáu
- ƒê∆∞a ra l·ªùi b√≥i v·ªÅ t√¨nh y√™u, s·ª± nghi·ªáp, t√†i l·ªôc, s·ª©c kh·ªèe
- S·ª≠ d·ª•ng emoji ph√π h·ª£p
- ƒê·ªô d√†i kho·∫£ng 300-400 t·ª´
- Phong c√°ch huy·ªÅn b√≠ nh∆∞ng t√≠ch c·ª±c
- K·∫øt th√∫c b·∫±ng l·ªùi khuy√™n c·ª• th·ªÉ
${customQuestion ? '- Tr·∫£ l·ªùi tr·ª±c ti·∫øp c√¢u h·ªèi ƒë∆∞·ª£c ƒë·∫∑t ra' : ''}

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.`;

                const result = await model.generateContent([enhancedPrompt, imageData]);
                const response_text = await result.response;
                const text = response_text.text();

                // Hi·ªÉn th·ªã k·∫øt qu·∫£
                const resultTitle = customQuestion 
                    ? `üîç B√ìI T·ª™ H√åNH ·∫¢NH - C√ÇU H·ªéI`
                    : `üîç B√ìI T·ª™ H√åNH ·∫¢NH`;
                
                const resultDescription = customQuestion 
                    ? `**‚ùì C√¢u h·ªèi:** ${customQuestion}\n\n${text}`
                    : text;
                
                const resultEmbed = new EmbedBuilder()
                    .setTitle(resultTitle)
                    .setDescription(resultDescription)
                    .setColor('#8E44AD')
                    .setFooter({ 
                        text: `B√≥i cho ${message.author.displayName} ‚Ä¢ ${new Date().toLocaleString('vi-VN')}`,
                        iconURL: message.author.displayAvatarURL()
                    })
                    .setThumbnail(attachment.url);

                await loadingMsg.edit({ embeds: [resultEmbed] });

            } catch (apiError) {
                console.error('Gemini Vision API Error:', apiError);
                
                let errorMessage = '‚ùå C√≥ l·ªói x·∫£y ra v·ªõi Gemini AI!';
                if (apiError.message.includes('API_KEY_INVALID')) {
                    errorMessage = `‚ùå API Key kh√¥ng h·ª£p l·ªá! H√£y ki·ªÉm tra l·∫°i v·ªõi l·ªánh \`${prefix}setgemini\``;
                } else if (apiError.message.includes('QUOTA_EXCEEDED')) {
                    errorMessage = '‚ùå API Key ƒë√£ h·∫øt quota! H√£y ƒë·ª£i ho·∫∑c t·∫°o API Key m·ªõi.';
                } else if (apiError.message.includes('SAFETY')) {
                    errorMessage = '‚ùå H√¨nh ·∫£nh b·ªã t·ª´ ch·ªëi do ch√≠nh s√°ch an to√†n. H√£y th·ª≠ v·ªõi h√¨nh ·∫£nh kh√°c.';
                }

                const errorEmbed = new EmbedBuilder()
                    .setTitle('‚ö†Ô∏è L·ªñI PH√ÇN T√çCH H√åNH ·∫¢NH')
                    .setDescription(errorMessage + '\n\nH∆∞·ªõng d·∫´n t·∫°o API Key m·ªõi: https://aistudio.google.com/app/apikey')
                    .setColor('#FF0000');

                await loadingMsg.edit({ embeds: [errorEmbed] });
            }

        } catch (error) {
            console.error('L·ªói boianh:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi xem b√≥i t·ª´ h√¨nh ·∫£nh!');
        }
    }
}; 