const { EmbedBuilder } = require('discord.js');
const { Consultation } = require('../../models/Expert');
const { getPrefix } = require('../../utils/prefixHelper');

// Categories mapping
const CATEGORIES = {
    'general': 'üåü T·ªïng qu√°t',
    'love': 'üíï T√¨nh y√™u',
    'career': 'üíº S·ª± nghi·ªáp',
    'health': 'üè• S·ª©c kh·ªèe',
    'finance': 'üí∞ T√†i ch√≠nh',
    'family': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Gia ƒë√¨nh',
    'education': 'üìö H·ªçc t·∫≠p',
    'life': 'üåà Cu·ªôc s·ªëng'
};

const STATUS_EMOJIS = {
    'pending': '‚è≥',
    'assigned': 'üë®‚Äç‚öïÔ∏è',
    'answered': '‚úÖ',
    'closed': 'üîí'
};

const STATUS_TEXT = {
    'pending': 'ƒêang ch·ªù chuy√™n gia',
    'assigned': 'ƒê√£ giao cho chuy√™n gia',
    'answered': 'ƒê√£ c√≥ c√¢u tr·∫£ l·ªùi',
    'closed': 'ƒê√£ ƒë√≥ng'
};

module.exports = {
    name: 'hoistatus',
    description: 'Ki·ªÉm tra tr·∫°ng th√°i c√¢u h·ªèi ƒë√£ g·ª≠i',
    async execute(message, args) {
        try {
            const userId = message.author.id;
            const prefix = await getPrefix(message.guild?.id);

            // N·∫øu c√≥ m√£ c·ª• th·ªÉ
            if (args[0]) {
                const consultationId = args[0];
                const consultation = await Consultation.findOne({ 
                    consultationId,
                    userId 
                });

                if (!consultation) {
                    return await message.reply('‚ùå Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi v·ªõi m√£ n√†y ho·∫∑c b·∫°n kh√¥ng ph·∫£i l√† ng∆∞·ªùi h·ªèi!');
                }

                // Hi·ªÉn th·ªã chi ti·∫øt
                const detailEmbed = new EmbedBuilder()
                    .setTitle(`${STATUS_EMOJIS[consultation.status]} CHI TI·∫æT C√ÇU H·ªéI`)
                    .setDescription(`**M√£ s·ªë:** \`${consultation.consultationId}\`\n` +
                        `**Th·ªÉ lo·∫°i:** ${CATEGORIES[consultation.category]}\n` +
                        `**Tr·∫°ng th√°i:** ${STATUS_TEXT[consultation.status]}\n` +
                        `**Th·ªùi gian g·ª≠i:** ${consultation.createdAt.toLocaleString('vi-VN')}\n\n` +
                        `**C√¢u h·ªèi:**\n${consultation.question}`)
                    .setColor(consultation.status === 'answered' ? '#00FF00' : 
                             consultation.status === 'assigned' ? '#FFA500' : '#0099FF');

                // N·∫øu ƒë√£ c√≥ c√¢u tr·∫£ l·ªùi
                if (consultation.status === 'answered' && consultation.answer) {
                    detailEmbed.addFields({
                        name: 'üí° C√¢u tr·∫£ l·ªùi t·ª´ chuy√™n gia',
                        value: consultation.answer,
                        inline: false
                    });
                    
                    if (consultation.expertResponse.answeredAt) {
                        detailEmbed.setFooter({ 
                            text: `Tr·∫£ l·ªùi l√∫c: ${consultation.expertResponse.answeredAt.toLocaleString('vi-VN')}` 
                        });
                    }
                }

                await message.reply({ embeds: [detailEmbed] });
                return;
            }

            // Hi·ªÉn th·ªã t·∫•t c·∫£ c√¢u h·ªèi c·ªßa user
            const consultations = await Consultation.find({ userId })
                .sort({ createdAt: -1 })
                .limit(10);

            if (consultations.length === 0) {
                const noQuestionsEmbed = new EmbedBuilder()
                    .setTitle('üìù L·ªãch s·ª≠ c√¢u h·ªèi')
                    .setDescription('B·∫°n ch∆∞a h·ªèi chuy√™n gia c√¢u h·ªèi n√†o.\n\n' +
                        `S·ª≠ d·ª•ng l·ªánh \`${prefix}hoi\` ƒë·ªÉ h·ªèi chuy√™n gia!`)
                    .setColor('#0099FF');

                return await message.reply({ embeds: [noQuestionsEmbed] });
            }

            // Th·ªëng k√™
            const totalQuestions = consultations.length;
            const pendingCount = consultations.filter(c => c.status === 'pending').length;
            const assignedCount = consultations.filter(c => c.status === 'assigned').length;
            const answeredCount = consultations.filter(c => c.status === 'answered').length;

            // Danh s√°ch c√¢u h·ªèi
            const questionsList = consultations.map((q, index) => {
                const emoji = STATUS_EMOJIS[q.status];
                const status = STATUS_TEXT[q.status];
                const category = CATEGORIES[q.category];
                const question = q.question.length > 50 
                    ? q.question.substring(0, 50) + '...'
                    : q.question;
                const timeAgo = this.getTimeAgo(q.createdAt);
                
                return `${index + 1}. ${emoji} **\`${q.consultationId}\`**\n` +
                       `   ${category} ‚Ä¢ ${status}\n` +
                       `   *${question}*\n` +
                       `   üìÖ ${timeAgo}`;
            }).join('\n\n');

            const listEmbed = new EmbedBuilder()
                .setTitle('üìù L·ªäCH S·ª¨ C√ÇU H·ªéI')
                .setDescription(`**üìä Th·ªëng k√™:**\n` +
                    `‚Ä¢ T·ªïng c√¢u h·ªèi: ${totalQuestions}\n` +
                    `‚Ä¢ ƒêang ch·ªù: ${pendingCount}\n` +
                    `‚Ä¢ ƒê√£ giao: ${assignedCount}\n` +
                    `‚Ä¢ ƒê√£ tr·∫£ l·ªùi: ${answeredCount}\n\n` +
                    `**üìã C√¢u h·ªèi g·∫ßn ƒë√¢y:**\n\n${questionsList}`)
                .setColor('#0099FF')
                .setFooter({ 
                    text: `S·ª≠ d·ª•ng '${prefix}hoistatus [m√£]' ƒë·ªÉ xem chi ti·∫øt ‚Ä¢ T·ªëi ƒëa hi·ªÉn th·ªã 10 c√¢u h·ªèi g·∫ßn nh·∫•t`
                });

            // Th√™m h∆∞·ªõng d·∫´n n·∫øu c√≥ c√¢u h·ªèi ch∆∞a tr·∫£ l·ªùi
            if (pendingCount > 0 || assignedCount > 0) {
                listEmbed.addFields({
                    name: 'üì± Th√¥ng b√°o',
                    value: 'B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn ri√™ng khi chuy√™n gia tr·∫£ l·ªùi!',
                    inline: false
                });
            }

            await message.reply({ embeds: [listEmbed] });

        } catch (error) {
            console.error('L·ªói hoistatus:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra tr·∫°ng th√°i!');
        }
    },

    // T√≠nh th·ªùi gian ƒë√£ tr√¥i qua
    getTimeAgo(date) {
        const now = new Date();
        const diffMs = now - date;
        const diffMins = Math.floor(diffMs / 60000);
        const diffHours = Math.floor(diffMs / 3600000);
        const diffDays = Math.floor(diffMs / 86400000);

        if (diffMins < 1) {
            return 'V·ª´a xong';
        } else if (diffMins < 60) {
            return `${diffMins} ph√∫t tr∆∞·ªõc`;
        } else if (diffHours < 24) {
            return `${diffHours} gi·ªù tr∆∞·ªõc`;
        } else {
            return `${diffDays} ng√†y tr∆∞·ªõc`;
        }
    }
}; 