const { EmbedBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const User = require('../../models/User');
const { encryptApiKey, hashApiKey } = require('../../utils/encryption');
const { getPrefix } = require('../../utils/prefixHelper');

module.exports = {
    name: 'setgemini',
    description: 'C√†i ƒë·∫∑t Gemini API Key cho t√≠nh nƒÉng xem b√≥i (b·∫£o m·∫≠t)',
    async execute(message, args) {
        try {
            // L·∫•y prefix c·ªßa server
            const prefix = await getPrefix(message.guild?.id);
            
            // Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n v√† n√∫t m·ªü modal
            const helpEmbed = new EmbedBuilder()
                .setTitle('üîê C√ÄI ƒê·∫∂T GEMINI API KEY B·∫¢O M·∫¨T')
                .setDescription('**H∆∞·ªõng d·∫´n l·∫•y API Key MI·ªÑN PH√ç:**\n\n' +
                    '1Ô∏è‚É£ Truy c·∫≠p: https://aistudio.google.com/app/apikey\n' +
                    '2Ô∏è‚É£ ƒêƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n Google\n' +
                    '3Ô∏è‚É£ Nh·∫•n "Create API Key"\n' +
                    '4Ô∏è‚É£ Copy API Key v·ª´a t·∫°o\n' +
                    '5Ô∏è‚É£ B·∫•m n√∫t "üîë Nh·∫≠p API Key" b√™n d∆∞·ªõi\n\n' +
                    '**üõ°Ô∏è B·∫£o m·∫≠t:**\n' +
                    '‚Ä¢ API Key s·∫Ω ƒë∆∞·ª£c m√£ h√≥a tr∆∞·ªõc khi l∆∞u\n' +
                    '‚Ä¢ Ch·ªâ b·∫°n m·ªõi th·∫•y ƒë∆∞·ª£c API Key\n' +
                    '‚Ä¢ Modal s·∫Ω t·ª± ƒë·ªông ·∫©n sau khi nh·∫≠p\n' +
                    '‚Ä¢ Kh√¥ng ai kh√°c c√≥ th·ªÉ xem API Key c·ªßa b·∫°n\n\n' +
                    `**Sau khi c√†i ƒë·∫∑t, s·ª≠ d·ª•ng:** \`${prefix}boi\``)
                .setColor('#00D4AA')
                .setThumbnail('https://i.imgur.com/fX8SdqQ.png');

            const button = new ButtonBuilder()
                .setCustomId('open_apikey_modal')
                .setLabel('üîë Nh·∫≠p API Key (B·∫£o m·∫≠t)')
                .setStyle(ButtonStyle.Primary);

            const row = new ActionRowBuilder().addComponents(button);

            await message.reply({ embeds: [helpEmbed], components: [row] });

        } catch (error) {
            console.error('L·ªói setgemini:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra!');
        }
    },

    // X·ª≠ l√Ω interactions cho modal
    async handleInteraction(interaction) {
        if (interaction.customId === 'open_apikey_modal') {
            // T·∫°o modal ƒë·ªÉ nh·∫≠p API key
            const modal = new ModalBuilder()
                .setCustomId('apikey_modal')
                .setTitle('üîê Nh·∫≠p Gemini API Key');

            const apiKeyInput = new TextInputBuilder()
                .setCustomId('apikey_input')
                .setLabel('Gemini API Key:')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('AIzaSy...')
                .setRequired(true)
                .setMinLength(35)
                .setMaxLength(100);

            const row = new ActionRowBuilder().addComponents(apiKeyInput);
            modal.addComponents(row);

            await interaction.showModal(modal);
            return;
        }

        if (interaction.isModalSubmit() && interaction.customId === 'apikey_modal') {
            try {
                const apiKey = interaction.fields.getTextInputValue('apikey_input');
                const userId = interaction.user.id;

                // Ki·ªÉm tra format API key
                if (!apiKey.startsWith('AIza') || apiKey.length < 35) {
                    const errorEmbed = new EmbedBuilder()
                        .setTitle('‚ùå API Key kh√¥ng h·ª£p l·ªá!')
                        .setDescription('API Key ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng "AIza" v√† c√≥ ƒë·ªô d√†i √≠t nh·∫•t 35 k√Ω t·ª±.\n\n' +
                            'H√£y ki·ªÉm tra l·∫°i t·ª´: https://aistudio.google.com/app/apikey')
                        .setColor('#FF0000');

                    return await interaction.reply({ embeds: [errorEmbed], flags: 64 });
                }

                // M√£ h√≥a API key tr∆∞·ªõc khi l∆∞u
                const encryptedApiKey = encryptApiKey(apiKey);
                const apiKeyHash = hashApiKey(apiKey);

                // T√¨m ho·∫∑c t·∫°o user
                let user = await User.findOne({ userId });
                if (!user) {
                    user = await User.create({ userId, rin: 0 });
                }

                // L∆∞u API key ƒë√£ m√£ h√≥a
                user.geminiApiKey = encryptedApiKey;
                await user.save();

                const successEmbed = new EmbedBuilder()
                    .setTitle('‚úÖ C√†i ƒë·∫∑t th√†nh c√¥ng!')
                    .setDescription('**API Key ƒë√£ ƒë∆∞·ª£c m√£ h√≥a v√† l∆∞u an to√†n!**\n\n' +
                        `üîê **Hash ID:** \`${apiKeyHash}\`\n` +
                        'üéØ **Tr·∫°ng th√°i:** S·∫µn s√†ng s·ª≠ d·ª•ng\n\n' +
                        `Gi·ªù b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh \`${await getPrefix(interaction.guild?.id)}boi\` ƒë·ªÉ xem b√≥i!`)
                    .setColor('#00FF00')
                    .setFooter({ text: 'API Key ƒë∆∞·ª£c b·∫£o m·∫≠t v·ªõi m√£ h√≥a AES-256' });

                await interaction.reply({ embeds: [successEmbed], flags: 64 });

            } catch (error) {
                console.error('L·ªói modal submit:', error);
                
                const errorEmbed = new EmbedBuilder()
                    .setTitle('‚ùå L·ªói b·∫£o m·∫≠t!')
                    .setDescription('Kh√¥ng th·ªÉ m√£ h√≥a API Key. Vui l√≤ng th·ª≠ l·∫°i sau.')
                    .setColor('#FF0000');

                await interaction.reply({ embeds: [errorEmbed], flags: 64 });
            }
        }
    }
}; 