const { EmbedBuilder } = require('discord.js');
const User = require('../../models/User');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const { decryptApiKey } = require('../../utils/encryption');
const { getPrefix } = require('../../utils/prefixHelper');

// C√°c lo·∫°i b√≥i kh√°c nhau
const BOI_TYPES = {
    'tarot': {
        name: 'Tarot',
        emoji: 'üîÆ',
        prompt: 'B·∫°n l√† m·ªôt th·∫ßy b√≥i tarot chuy√™n nghi·ªáp. H√£y r√∫t m·ªôt l√° b√†i tarot v√† gi·∫£i th√≠ch √Ω nghƒ©a cho t√¥i v·ªÅ t√¨nh y√™u, c√¥ng vi·ªác v√† t√†i l·ªôc. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, phong c√°ch th√¢n thi·ªán v√† huy·ªÅn b√≠.'
    },
    'tuongso': {
        name: 'T∆∞·ªõng S·ªë',
        emoji: 'üß†',
        prompt: 'B·∫°n l√† m·ªôt th·∫ßy t∆∞·ªõng s·ªë am hi·ªÉu v·ªÅ nh√¢n t∆∞·ªõng h·ªçc. H√£y ph√¢n t√≠ch t∆∞∆°ng lai c·ªßa t√¥i d·ª±a tr√™n ng√†y h√¥m nay, v·ªÅ v·∫≠n m·ªánh, t√¨nh duy√™n v√† s·ª± nghi·ªáp. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, phong c√°ch truy·ªÅn th·ªëng nh∆∞ng d·ªÖ hi·ªÉu.'
    },
    'dongvat': {
        name: 'B√≥i Con V·∫≠t',
        emoji: 'üêæ',
        prompt: 'B·∫°n l√† th·∫ßy b√≥i chuy√™n v·ªÅ linh th√∫. H√£y ch·ªçn m·ªôt con v·∫≠t l√†m bi·ªÉu t∆∞·ª£ng cho t√¥i h√¥m nay v√† gi·∫£i th√≠ch √Ω nghƒ©a v·ªÅ may m·∫Øn, t√¨nh y√™u v√† c√¥ng vi·ªác. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, phong c√°ch vui v·∫ª v√† c√≥ t√≠nh gi·∫£i tr√≠.'
    },
    'sao': {
        name: 'B√≥i Sao',
        emoji: '‚≠ê',
        prompt: 'B·∫°n l√† nh√† chi√™m tinh h·ªçc. H√£y d·ª± ƒëo√°n v·∫≠n sao c·ªßa t√¥i h√¥m nay v·ªÅ t√¨nh y√™u, c√¥ng vi·ªác, t√†i l·ªôc v√† s·ª©c kh·ªèe d·ª±a tr√™n v·ªã tr√≠ c√°c v√¨ sao. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, phong c√°ch b√≠ ·∫©n v√† l√¥i cu·ªën.'
    },
    'caocap': {
        name: 'B√≥i Cao C·∫•p',
        emoji: '‚ú®',
        prompt: 'B·∫°n l√† m·ªôt th·∫ßy b√≥i huy·ªÅn tho·∫°i v·ªõi kh·∫£ nƒÉng nh√¨n th·∫•u t∆∞∆°ng lai. H√£y d·ª± ƒëo√°n chi ti·∫øt v·ªÅ v·∫≠n m·ªánh c·ªßa t√¥i trong tu·∫ßn t·ªõi, bao g·ªìm t√¨nh y√™u, s·ª± nghi·ªáp, t√†i l·ªôc, s·ª©c kh·ªèe v√† nh·ªØng ƒëi·ªÅu c·∫ßn l∆∞u √Ω. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, phong c√°ch chuy√™n s√¢u v√† ƒë·∫ßy c·∫£m h·ª©ng.'
    }
};

module.exports = {
    name: 'boi',
    description: 'Xem b√≥i b·∫±ng AI Gemini',
    async execute(message, args) {
        try {
            const userId = message.author.id;
            const prefix = await getPrefix(message.guild?.id);
            
            // Ki·ªÉm tra user c√≥ API key ch∆∞a
            const user = await User.findOne({ userId });
            if (!user || !user.geminiApiKey) {
                const noKeyEmbed = new EmbedBuilder()
                    .setTitle('üîë CH∆ØA C√ÄI ƒê·∫∂T API KEY')
                    .setDescription('B·∫°n ch∆∞a c√†i ƒë·∫∑t Gemini API Key!\n\n' +
                        '**H∆∞·ªõng d·∫´n l·∫•y API Key MI·ªÑN PH√ç:**\n' +
                        '1Ô∏è‚É£ Truy c·∫≠p: https://aistudio.google.com/app/apikey\n' +
                        '2Ô∏è‚É£ ƒêƒÉng nh·∫≠p Google v√† t·∫°o API Key\n' +
                        `3Ô∏è‚É£ S·ª≠ d·ª•ng l·ªánh: \`${prefix}setgemini\`\n\n` +
                        '**Sau khi c√†i ƒë·∫∑t, s·ª≠ d·ª•ng:**\n' +
                        `‚Ä¢ \`${prefix}boi\` - B√≥i ng·∫´u nhi√™n\n` +
                        `‚Ä¢ \`${prefix}boi tarot\` - B√≥i b√†i Tarot\n` +
                        `‚Ä¢ \`${prefix}boi tuongso\` - T∆∞·ªõng s·ªë\n` +
                        `‚Ä¢ \`${prefix}boi dongvat\` - B√≥i con v·∫≠t\n` +
                        `‚Ä¢ \`${prefix}boi sao\` - B√≥i sao\n` +
                        `‚Ä¢ \`${prefix}boi caocap\` - B√≥i cao c·∫•p`)
                    .setColor('#FF6B6B')
                    .setThumbnail('https://i.imgur.com/fX8SdqQ.png');

                return await message.reply({ embeds: [noKeyEmbed] });
            }

            // X·ª≠ l√Ω lo·∫°i b√≥i v√† c√¢u h·ªèi
            let selectedType;
            let customQuestion = null;
            
            if (!args[0]) {
                // Ch·ªçn ng·∫´u nhi√™n n·∫øu kh√¥ng ch·ªâ ƒë·ªãnh
                const types = Object.keys(BOI_TYPES);
                const randomType = types[Math.floor(Math.random() * types.length)];
                selectedType = BOI_TYPES[randomType];
            } else {
                const requestedType = args[0].toLowerCase();
                
                // Ki·ªÉm tra n·∫øu l√† lo·∫°i b√≥i h·ª£p l·ªá
                if (BOI_TYPES[requestedType]) {
                    selectedType = BOI_TYPES[requestedType];
                    // L·∫•y c√¢u h·ªèi t·ª´ args[1] tr·ªü ƒëi
                    if (args.length > 1) {
                        customQuestion = args.slice(1).join(' ');
                    }
                } else {
                    // N·∫øu kh√¥ng ph·∫£i lo·∫°i b√≥i, coi to√†n b·ªô args l√† c√¢u h·ªèi
                    const types = Object.keys(BOI_TYPES);
                    const randomType = types[Math.floor(Math.random() * types.length)];
                    selectedType = BOI_TYPES[randomType];
                    customQuestion = args.join(' ');
                }
                
                // Hi·ªÉn th·ªã help n·∫øu user g√µ "help"
                if (args[0].toLowerCase() === 'help') {
                    const typesEmbed = new EmbedBuilder()
                        .setTitle('üîÆ C√ÅC LO·∫†I B√ìI C√ì S·∫¥N')
                        .setDescription(Object.entries(BOI_TYPES)
                            .map(([key, type]) => `${type.emoji} **${key}** - ${type.name}`)
                            .join('\n') + '\n\n**C√°ch s·ª≠ d·ª•ng:**\n' +
                            `‚Ä¢ \`${prefix}boi\` - B√≥i ng·∫´u nhi√™n\n` +
                            `‚Ä¢ \`${prefix}boi tarot\` - B√≥i Tarot\n` +
                            `‚Ä¢ \`${prefix}boi tarot T√¥i c√≥ n√™n chuy·ªÉn vi·ªác?\` - B√≥i Tarot v·ªõi c√¢u h·ªèi\n` +
                            `‚Ä¢ \`${prefix}boi T√¥i s·∫Ω g·∫∑p ai ƒë·∫∑c bi·ªát kh√¥ng?\` - B√≥i ng·∫´u nhi√™n v·ªõi c√¢u h·ªèi`)
                        .setColor('#9B59B6');

                    return await message.reply({ embeds: [typesEmbed] });
                }
            }

            // Hi·ªÉn th·ªã loading
            const loadingDescription = customQuestion 
                ? `**C√¢u h·ªèi:** ${customQuestion}\n\nTh·∫ßy b√≥i ƒëang k·∫øt n·ªëi v·ªõi th·∫ø gi·ªõi t√¢m linh...`
                : 'Th·∫ßy b√≥i ƒëang k·∫øt n·ªëi v·ªõi th·∫ø gi·ªõi t√¢m linh...';
                
            const loadingEmbed = new EmbedBuilder()
                .setTitle(`${selectedType.emoji} ƒêANG XEM B√ìI...`)
                .setDescription(loadingDescription)
                .setColor('#F39C12');

            const loadingMsg = await message.reply({ embeds: [loadingEmbed] });

            // G·ªçi Gemini AI
            try {
                // Gi·∫£i m√£ API key tr∆∞·ªõc khi s·ª≠ d·ª•ng
                const decryptedApiKey = decryptApiKey(user.geminiApiKey);
                const genAI = new GoogleGenerativeAI(decryptedApiKey);
                const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

                const basePrompt = customQuestion 
                    ? `${selectedType.prompt}\n\nC√¢u h·ªèi c·ª• th·ªÉ: "${customQuestion}"\nH√£y t·∫≠p trung tr·∫£ l·ªùi c√¢u h·ªèi n√†y.`
                    : selectedType.prompt;

                const enhancedPrompt = `${basePrompt}

Ng∆∞·ªùi c·∫ßn b√≥i: ${message.author.displayName}
Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}
${customQuestion ? `C√¢u h·ªèi: ${customQuestion}` : ''}

Y√™u c·∫ßu format tr·∫£ l·ªùi:
- S·ª≠ d·ª•ng emoji ph√π h·ª£p
- Chia th√†nh c√°c m·ª•c r√µ r√†ng
- ƒê·ªô d√†i kho·∫£ng 200-300 t·ª´
- Phong c√°ch huy·ªÅn b√≠ nh∆∞ng t√≠ch c·ª±c
- K·∫øt th√∫c b·∫±ng m·ªôt l·ªùi khuy√™n hay ƒëi·ªÅu c·∫ßn l∆∞u √Ω
${customQuestion ? '- Tr·∫£ l·ªùi tr·ª±c ti·∫øp c√¢u h·ªèi ƒë∆∞·ª£c ƒë·∫∑t ra' : ''}`;

                const result = await model.generateContent(enhancedPrompt);
                const response = await result.response;
                const text = response.text();

                // Hi·ªÉn th·ªã k·∫øt qu·∫£
                const resultTitle = customQuestion 
                    ? `${selectedType.emoji} ${selectedType.name.toUpperCase()} - C√ÇU H·ªéI`
                    : `${selectedType.emoji} ${selectedType.name.toUpperCase()}`;
                
                const resultDescription = customQuestion 
                    ? `**‚ùì C√¢u h·ªèi:** ${customQuestion}\n\n${text}`
                    : text;
                
                const resultEmbed = new EmbedBuilder()
                    .setTitle(resultTitle)
                    .setDescription(resultDescription)
                    .setColor('#8E44AD')
                    .setFooter({ 
                        text: `B√≥i cho ${message.author.displayName} ‚Ä¢ ${new Date().toLocaleString('vi-VN')}`,
                        iconURL: message.author.displayAvatarURL()
                    })
                    .setThumbnail('https://raw.githubusercontent.com/vietlinhh02/test/refs/heads/main/d098bf056c1a3a3f23261606edde04de.png');

                await loadingMsg.edit({ embeds: [resultEmbed] });

            } catch (apiError) {
                console.error('Gemini API Error:', apiError);
                
                let errorMessage = '‚ùå C√≥ l·ªói x·∫£y ra v·ªõi Gemini AI!';
                if (apiError.message.includes('API_KEY_INVALID')) {
                    errorMessage = `‚ùå API Key kh√¥ng h·ª£p l·ªá! H√£y ki·ªÉm tra l·∫°i v·ªõi l·ªánh \`${prefix}setgemini\``;
                } else if (apiError.message.includes('QUOTA_EXCEEDED')) {
                    errorMessage = '‚ùå API Key ƒë√£ h·∫øt quota! H√£y ƒë·ª£i ho·∫∑c t·∫°o API Key m·ªõi.';
                }

                const errorEmbed = new EmbedBuilder()
                    .setTitle('‚ö†Ô∏è L·ªñI API')
                    .setDescription(errorMessage + '\n\nH∆∞·ªõng d·∫´n t·∫°o API Key m·ªõi: https://aistudio.google.com/app/apikey')
                    .setColor('#FF0000');

                await loadingMsg.edit({ embeds: [errorEmbed] });
            }

        } catch (error) {
            console.error('L·ªói boi:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi xem b√≥i!');
        }
    }
}; 