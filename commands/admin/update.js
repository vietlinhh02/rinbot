const { EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const config = require('../../config/config');

module.exports = {
    name: 'update',
    description: 'C·∫≠p nh·∫≠t bot t·ª´ GitHub repository (ch·ªâ d√†nh cho owner)',
    
    async execute(message, args) {
        // Ki·ªÉm tra quy·ªÅn owner
        if (!config.isOwner(message.author.id)) {
            const noPermEmbed = new EmbedBuilder()
                .setTitle('üîí QUY·ªÄN TRUY C·∫¨P B·ªä T·ª™ CH·ªêI')
                .setDescription('**‚õî Ch·ªâ ch·ªß s·ªü h·ªØu bot m·ªõi c√≥ th·ªÉ c·∫≠p nh·∫≠t!**\n\n' +
                    'üîê **L√Ω do b·∫£o m·∫≠t:**\n' +
                    '‚Ä¢ L·ªánh update c√≥ th·ªÉ thay ƒë·ªïi to√†n b·ªô code bot\n' +
                    '‚Ä¢ Ch·ªâ owner ƒë∆∞·ª£c ph√©p th·ª±c hi·ªán thao t√°c n√†y\n' +
                    '‚Ä¢ ƒê√¢y l√† bi·ªán ph√°p b·∫£o v·ªá h·ªá th·ªëng\n\n' +
                    'üí° **D√†nh cho Admin server:**\n' +
                    '‚Ä¢ Li√™n h·ªá owner bot n·∫øu c·∫ßn update\n' +
                    '‚Ä¢ S·ª≠ d·ª•ng c√°c l·ªánh admin kh√°c nh∆∞ `,setprefix`, `,cleargames`')
                .setColor('#FF4444')
                .setFooter({ text: 'L·ªánh b·∫£o m·∫≠t cao c·∫•p' })
                .setTimestamp();
                
            return message.reply({ embeds: [noPermEmbed] });
        }

        const subCommand = args[0]?.toLowerCase();

        if (subCommand === 'check') {
            return await this.checkUpdates(message);
        } else if (subCommand === 'force') {
            return await this.forceUpdate(message);
        } else if (subCommand === 'backup') {
            return await this.backupData(message);
        } else if (subCommand === 'status') {
            return await this.showStatus(message);
        } else {
            return await this.performUpdate(message);
        }
    },

    // Ki·ªÉm tra c√≥ update kh√¥ng
    async checkUpdates(message) {
        const embed = new EmbedBuilder()
            .setTitle('üîÑ KI·ªÇM TRA C·∫¨P NH·∫¨T')
            .setDescription('ƒêang ki·ªÉm tra phi√™n b·∫£n m·ªõi...')
            .setColor('#FFA500')
            .setTimestamp();

        const statusMsg = await message.reply({ embeds: [embed] });

        try {
            exec('git fetch origin && git status', (error, stdout, stderr) => {
                if (error) {
                    const errorEmbed = new EmbedBuilder()
                        .setTitle('‚ùå L·ªñI KI·ªÇM TRA C·∫¨P NH·∫¨T')
                        .setDescription(`\`\`\`${error.message}\`\`\``)
                        .setColor('#FF0000')
                        .setTimestamp();
                    
                    statusMsg.edit({ embeds: [errorEmbed] });
                    return;
                }

                const hasUpdates = stdout.includes('behind') || stdout.includes('can be fast-forwarded');
                
                const updateEmbed = new EmbedBuilder()
                    .setTitle(hasUpdates ? 'üÜï C√ì C·∫¨P NH·∫¨T M·ªöI!' : '‚úÖ ƒê√É ·ªû PHI√äN B·∫¢N M·ªöI NH·∫§T')
                    .setDescription(hasUpdates ? 
                        '**GitHub c√≥ phi√™n b·∫£n m·ªõi!**\n\n' +
                        'üìã **Git status:**\n' +
                        `\`\`\`${stdout}\`\`\`\n` +
                        'üí° **ƒê·ªÉ c·∫≠p nh·∫≠t:**\n' +
                        '‚Ä¢ `,update` - C·∫≠p nh·∫≠t t·ª± ƒë·ªông\n' +
                        '‚Ä¢ `,update force` - C·∫≠p nh·∫≠t b·∫Øt bu·ªôc\n' +
                        '‚Ä¢ `,update backup` - Backup tr∆∞·ªõc khi update'
                        :
                        '**Bot ƒëang ·ªü phi√™n b·∫£n m·ªõi nh·∫•t!**\n\n' +
                        'üìã **Git status:**\n' +
                        `\`\`\`${stdout}\`\`\`\n` +
                        '‚ú® Kh√¥ng c·∫ßn c·∫≠p nh·∫≠t g√¨ th√™m!'
                    )
                    .setColor(hasUpdates ? '#00FF00' : '#0099FF')
                    .setTimestamp();

                statusMsg.edit({ embeds: [updateEmbed] });
            });

        } catch (error) {
            console.error('L·ªói check updates:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra c·∫≠p nh·∫≠t!');
        }
    },

    // Th·ª±c hi·ªán c·∫≠p nh·∫≠t
    async performUpdate(message) {
        const confirmEmbed = new EmbedBuilder()
            .setTitle('‚ö†Ô∏è X√ÅC NH·∫¨N C·∫¨P NH·∫¨T BOT')
            .setDescription('**ü§ñ B·∫°n c√≥ ch·∫Øc mu·ªën c·∫≠p nh·∫≠t bot?**\n\n' +
                '**Qu√° tr√¨nh s·∫Ω bao g·ªìm:**\n' +
                '1. üîç Ki·ªÉm tra Git status\n' +
                '2. üíæ Backup d·ªØ li·ªáu quan tr·ªçng\n' +
                '3. ‚¨áÔ∏è Pull code m·ªõi t·ª´ GitHub\n' +
                '4. üì¶ C√†i ƒë·∫∑t dependencies m·ªõi\n' +
                '5. üîÑ Restart bot\n\n' +
                '‚è∞ **Th·ªùi gian d·ª± ki·∫øn:** 1-3 ph√∫t\n' +
                '‚ö†Ô∏è **L∆∞u √Ω:** Bot s·∫Ω offline trong qu√° tr√¨nh update!\n\n' +
                '**Ph·∫£n h·ªìi "yes" ƒë·ªÉ ti·∫øp t·ª•c, "no" ƒë·ªÉ h·ªßy**')
            .setColor('#FF6600')
            .setFooter({ text: 'H·∫øt h·∫°n sau 30 gi√¢y' })
            .setTimestamp();

        await message.reply({ embeds: [confirmEmbed] });

        // ƒê·ª£i ph·∫£n h·ªìi x√°c nh·∫≠n
        const filter = (m) => m.author.id === message.author.id && ['yes', 'no', 'y', 'n'].includes(m.content.toLowerCase());
        
        try {
            const collected = await message.channel.awaitMessages({ 
                filter, 
                max: 1, 
                time: 30000, 
                errors: ['time'] 
            });

            const response = collected.first().content.toLowerCase();
            
            if (response === 'yes' || response === 'y') {
                await this.executeUpdate(message);
            } else {
                const cancelEmbed = new EmbedBuilder()
                    .setTitle('‚ùå ƒê√É H·ª¶Y C·∫¨P NH·∫¨T')
                    .setDescription('C·∫≠p nh·∫≠t bot ƒë√£ ƒë∆∞·ª£c h·ªßy b·ªè.')
                    .setColor('#6C757D')
                    .setTimestamp();
                
                await message.reply({ embeds: [cancelEmbed] });
            }

        } catch (error) {
            const timeoutEmbed = new EmbedBuilder()
                .setTitle('‚è∞ H·∫æT TH·ªúI GIAN')
                .setDescription('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi. ƒê√£ h·ªßy c·∫≠p nh·∫≠t.')
                .setColor('#FF0000')
                .setTimestamp();
            
            await message.reply({ embeds: [timeoutEmbed] });
        }
    },

    // Th·ª±c hi·ªán update th·ª±c s·ª±
    async executeUpdate(message) {
        const progressEmbed = new EmbedBuilder()
            .setTitle('üîÑ ƒêANG C·∫¨P NH·∫¨T BOT...')
            .setDescription('**B∆∞·ªõc 1/5:** ƒêang backup d·ªØ li·ªáu v√† chu·∫©n b·ªã...')
            .setColor('#FFA500')
            .setTimestamp();

        const progressMsg = await message.reply({ embeds: [progressEmbed] });

        try {
            // B∆∞·ªõc 1: Backup v√† setup
            await this.updateProgress(progressMsg, 1, 'Backup d·ªØ li·ªáu v√† setup Git authentication', '#FFA500');
            await this.performBackup();
            await this.setupGitAuth();

            // B∆∞·ªõc 2: Git pull
            await this.updateProgress(progressMsg, 2, 'ƒêang pull code t·ª´ private repository', '#FFA500');
            await this.executeGitPull();

            // B∆∞·ªõc 3: C√†i dependencies
            await this.updateProgress(progressMsg, 3, 'ƒêang c√†i ƒë·∫∑t dependencies m·ªõi', '#FFA500');
            await this.executeCommand('npm install --production');

            // B∆∞·ªõc 4: Ki·ªÉm tra integrity
            await this.updateProgress(progressMsg, 4, 'Ki·ªÉm tra t√≠nh to√†n v·∫πn v√† c·∫•u h√¨nh', '#FFA500');
            await this.checkIntegrity();

            // B∆∞·ªõc 5: Restart
            await this.updateProgress(progressMsg, 5, 'Ho√†n th√†nh v√† restart bot', '#00FF00');
            
            const successEmbed = new EmbedBuilder()
                .setTitle('‚úÖ C·∫¨P NH·∫¨T TH√ÄNH C√îNG!')
                .setDescription('**üéâ Bot ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ private repository!**\n\n' +
                    '‚úÖ **Backup & Setup:** Ho√†n th√†nh\n' +
                    '‚úÖ **Pull Code:** Ho√†n th√†nh\n' +
                    '‚úÖ **Dependencies:** Ho√†n th√†nh\n' +
                    '‚úÖ **Integrity Check:** OK\n' +
                    '‚úÖ **Restart:** Ho√†n th√†nh\n\n' +
                    '**ü§ñ Bot ƒëang kh·ªüi ƒë·ªông l·∫°i...**\n' +
                    'üîÑ Bot s·∫Ω online tr·ªü l·∫°i trong v√†i gi√¢y!')
                .setColor('#00FF00')
                .setFooter({ text: 'Private repo update completed at' })
                .setTimestamp();

            await progressMsg.edit({ embeds: [successEmbed] });

            // Restart bot (sau 3 gi√¢y ƒë·ªÉ g·ª≠i ƒë∆∞·ª£c tin nh·∫Øn)
            setTimeout(() => {
                process.exit(0); // PM2 s·∫Ω t·ª± restart
            }, 3000);

        } catch (error) {
            console.error('L·ªói update private repo:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setTitle('‚ùå C·∫¨P NH·∫¨T PRIVATE REPO TH·∫§T B·∫†I!')
                .setDescription(`**üí• C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh c·∫≠p nh·∫≠t:**\n\n` +
                    `\`\`\`${error.message}\`\`\`\n\n` +
                    '**üîß Gi·∫£i ph√°p cho Private Repository:**\n' +
                    '‚Ä¢ Ki·ªÉm tra `GITHUB_TOKEN` trong .env\n' +
                    '‚Ä¢ ƒê·∫£m b·∫£o token c√≥ quy·ªÅn truy c·∫≠p repo\n' +
                    '‚Ä¢ Th·ª≠ `,update force` ƒë·ªÉ reset v√† pull l·∫°i\n' +
                    '‚Ä¢ Ki·ªÉm tra SSH key n·∫øu d√πng SSH\n' +
                    '‚Ä¢ Li√™n h·ªá dev n·∫øu v·∫´n l·ªói')
                .setColor('#FF0000')
                .setTimestamp();

            await progressMsg.edit({ embeds: [errorEmbed] });
        }
    },

    // Setup Git authentication cho private repository
    async setupGitAuth() {
        try {
            // Ki·ªÉm tra xem c√≥ GitHub token kh√¥ng
            const githubToken = process.env.GITHUB_TOKEN;
            const githubUser = process.env.GITHUB_USERNAME || 'github-user';
            
            if (githubToken) {
                // S·ª≠ d·ª•ng Personal Access Token
                console.log('üîë ƒêang setup GitHub authentication v·ªõi PAT...');
                
                // Set up git credential helper ƒë·ªÉ s·ª≠ d·ª•ng token
                await this.executeCommand(`git config credential.helper store`);
                
                // Get current remote URL
                const remoteUrl = await this.executeCommand('git config --get remote.origin.url');
                const cleanUrl = remoteUrl.trim();
                
                // N·∫øu URL hi·ªán t·∫°i l√† HTTPS, th√™m token
                if (cleanUrl.includes('https://github.com/')) {
                    const repoPath = cleanUrl.replace('https://github.com/', '');
                    const newUrl = `https://${githubUser}:${githubToken}@github.com/${repoPath}`;
                    await this.executeCommand(`git remote set-url origin "${newUrl}"`);
                    console.log('‚úÖ ƒê√£ c·∫•u h√¨nh GitHub PAT authentication');
                } else if (cleanUrl.includes('git@github.com:')) {
                    console.log('üîë ƒêang s·ª≠ d·ª•ng SSH authentication');
                    // SSH key should be already configured
                } else {
                    console.log('‚ö†Ô∏è Unknown git remote format:', cleanUrl);
                }
            } else {
                console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y GITHUB_TOKEN, s·ª≠ d·ª•ng authentication hi·ªán t·∫°i');
            }
            
        } catch (error) {
            console.error('L·ªói setup git auth:', error);
            // Kh√¥ng throw error ·ªü ƒë√¢y, ƒë·ªÉ th·ª≠ git pull tr∆∞·ªõc
        }
    },

    // Git pull v·ªõi h·ªó tr·ª£ private repository
    async executeGitPull() {
        try {
            // Th·ª≠ fetch tr∆∞·ªõc ƒë·ªÉ ki·ªÉm tra authentication
            await this.executeCommand('git fetch origin');
            
            // N·∫øu fetch th√†nh c√¥ng, th·ª±c hi·ªán pull
            const pullResult = await this.executeCommand('git pull origin main');
            console.log('Git pull result:', pullResult);
            
            return pullResult;
            
        } catch (error) {
            // N·∫øu main branch kh√¥ng t·ªìn t·∫°i, th·ª≠ master
            try {
                console.log('Th·ª≠ pull t·ª´ master branch...');
                const pullResult = await this.executeCommand('git pull origin master');
                console.log('Git pull master result:', pullResult);
                return pullResult;
            } catch (masterError) {
                throw new Error(`Git pull failed: ${error.message}. Also tried master: ${masterError.message}`);
            }
        }
    },

    // C·∫≠p nh·∫≠t b·∫Øt bu·ªôc (bypass conflicts)
    async forceUpdate(message) {
        const warningEmbed = new EmbedBuilder()
            .setTitle('‚ö†Ô∏è C·∫¨P NH·∫¨T B·∫ÆT BU·ªòC')
            .setDescription('**üö® C·∫¢NH B√ÅO: C·∫≠p nh·∫≠t b·∫Øt bu·ªôc s·∫Ω:**\n\n' +
                '‚Ä¢ ‚ùå X√≥a t·∫•t c·∫£ thay ƒë·ªïi local\n' +
                '‚Ä¢ üîÑ Reset v·ªÅ phi√™n b·∫£n GitHub\n' +
                '‚Ä¢ üíæ Backup t·ª± ƒë·ªông tr∆∞·ªõc khi reset\n\n' +
                '**‚ö†Ô∏è Ch·ªâ d√πng khi update th∆∞·ªùng g·∫∑p xung ƒë·ªôt!**\n\n' +
                'G√µ "force" ƒë·ªÉ x√°c nh·∫≠n:')
            .setColor('#FF4444')
            .setTimestamp();

        await message.reply({ embeds: [warningEmbed] });

        const filter = (m) => m.author.id === message.author.id;
        
        try {
            const collected = await message.channel.awaitMessages({ 
                filter, 
                max: 1, 
                time: 15000, 
                errors: ['time'] 
            });

            if (collected.first().content.toLowerCase() === 'force') {
                await this.executeForceUpdate(message);
            } else {
                await message.reply('‚ùå ƒê√£ h·ªßy force update.');
            }

        } catch (error) {
            await message.reply('‚è∞ H·∫øt th·ªùi gian. ƒê√£ h·ªßy force update.');
        }
    },

    // Th·ª±c hi·ªán force update
    async executeForceUpdate(message) {
        const progressMsg = await message.reply('üîÑ **FORCE UPDATE:** ƒêang backup v√† reset private repo...');

        try {
            // Backup tr∆∞·ªõc khi reset
            await this.performBackup();
            
            // Setup authentication cho private repo
            await this.setupGitAuth();
            
            // Reset hard v√† pull t·ª´ private repo
            await this.executeCommand('git fetch origin');
            
            // Th·ª≠ reset v·ªÅ main ho·∫∑c master
            try {
                await this.executeCommand('git reset --hard origin/main');
            } catch (error) {
                console.log('Th·ª≠ reset v·ªÅ master branch...');
                await this.executeCommand('git reset --hard origin/master');
            }
            
            await this.executeCommand('npm install --production');

            await progressMsg.edit('‚úÖ **FORCE UPDATE:** Private repo ƒë√£ reset th√†nh c√¥ng! ƒêang restart...');
            
            setTimeout(() => {
                process.exit(0);
            }, 2000);

        } catch (error) {
            await progressMsg.edit(`‚ùå **FORCE UPDATE:** L·ªói private repo!\n\`\`\`${error.message}\`\`\`\n\n` +
                '**üí° Ki·ªÉm tra:**\n' +
                '‚Ä¢ GITHUB_TOKEN trong .env\n' +
                '‚Ä¢ Quy·ªÅn access token\n' +
                '‚Ä¢ Remote URL repository');
        }
    },

    // Backup d·ªØ li·ªáu
    async backupData(message) {
        try {
            await this.performBackup();
            
            const backupEmbed = new EmbedBuilder()
                .setTitle('üíæ BACKUP HO√ÄN TH√ÄNH')
                .setDescription('**‚úÖ ƒê√£ backup th√†nh c√¥ng!**\n\n' +
                    'üìÅ **ƒê√£ backup:**\n' +
                    '‚Ä¢ Config files (.env)\n' +
                    '‚Ä¢ Package.json\n' +
                    '‚Ä¢ Custom modifications\n\n' +
                    'üìç **V·ªã tr√≠:** `./backup/` folder\n' +
                    '‚è∞ **Th·ªùi gian:** ' + new Date().toLocaleString('vi-VN'))
                .setColor('#00FF00')
                .setTimestamp();

            await message.reply({ embeds: [backupEmbed] });

        } catch (error) {
            await message.reply(`‚ùå L·ªói backup: \`${error.message}\``);
        }
    },

    // Hi·ªÉn th·ªã tr·∫°ng th√°i
    async showStatus(message) {
        try {
            const package = require('../../package.json');
            
            exec('git log -1 --pretty=format:"%h - %s (%cr)"', (error, stdout) => {
                const commit = error ? 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin' : stdout;
                
                const statusEmbed = new EmbedBuilder()
                    .setTitle('üìä TR·∫†NG TH√ÅI BOT')
                    .addFields(
                        { name: 'üè∑Ô∏è Version', value: package.version || 'Unknown', inline: true },
                        { name: 'üì¶ Node.js', value: process.version, inline: true },
                        { name: 'üíæ Memory', value: `${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)} MB`, inline: true },
                        { name: '‚è∞ Uptime', value: this.formatUptime(process.uptime()), inline: true },
                        { name: 'üîó Discord.js', value: require('discord.js').version, inline: true },
                        { name: 'üóÉÔ∏è MongoDB', value: 'Connected', inline: true },
                        { name: 'üìù Last Commit', value: commit, inline: false }
                    )
                    .setColor('#0099FF')
                    .setTimestamp();

                message.reply({ embeds: [statusEmbed] });
            });

        } catch (error) {
            await message.reply(`‚ùå L·ªói l·∫•y status: \`${error.message}\``);
        }
    },

    // Helper functions
    async updateProgress(message, step, description, color) {
        const progressEmbed = new EmbedBuilder()
            .setTitle('üîÑ ƒêANG C·∫¨P NH·∫¨T BOT...')
            .setDescription(`**B∆∞·ªõc ${step}/5:** ${description}`)
            .setColor(color)
            .setTimestamp();

        await message.edit({ embeds: [progressEmbed] });
    },

    async executeCommand(command) {
        return new Promise((resolve, reject) => {
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    reject(error);
                } else {
                    resolve(stdout);
                }
            });
        });
    },

    async performBackup() {
        const backupDir = './backup';
        if (!fs.existsSync(backupDir)) {
            fs.mkdirSync(backupDir);
        }

        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        
        // Backup important files
        if (fs.existsSync('.env')) {
            fs.copyFileSync('.env', `${backupDir}/.env.backup.${timestamp}`);
        }
        
        if (fs.existsSync('package.json')) {
            fs.copyFileSync('package.json', `${backupDir}/package.json.backup.${timestamp}`);
        }
    },

    async checkIntegrity() {
        // Ki·ªÉm tra file quan tr·ªçng t·ªìn t·∫°i
        const requiredFiles = ['index.js', 'package.json', 'config/config.js'];
        
        for (const file of requiredFiles) {
            if (!fs.existsSync(file)) {
                throw new Error(`File quan tr·ªçng kh√¥ng t·ªìn t·∫°i: ${file}`);
            }
        }
    },

    formatUptime(seconds) {
        const days = Math.floor(seconds / 86400);
        const hours = Math.floor((seconds % 86400) / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        
        return `${days}d ${hours}h ${minutes}m`;
    }
}; 