const { EmbedBuilder } = require('discord.js');
const ownerConfig = require('../../config/owner');

module.exports = {
    name: 'riggedtest',
    aliases: ['testrig', 'demorig'],
    description: '[ADMIN] Test rigged dice v·ªõi simulation',

    async execute(message, args) {
        // Ki·ªÉm tra ch·ªâ owner bot ƒë∆∞·ª£c d√πng
        if (message.author.id !== ownerConfig.ownerId) {
            // Log attempt n·∫øu b·∫≠t
            if (ownerConfig.security.logAccess) {
                console.log(`üö´ [SECURITY] User ${message.author.tag} (${message.author.id}) tried to access riggedtest`);
            }
            return message.reply('‚ùå L·ªánh n√†y ch·ªâ d√†nh cho owner bot!');
        }

        const numTests = parseInt(args[0]) || 50;
        if (numTests < 10 || numTests > 200) {
            return message.reply('‚ùå S·ªë test ph·∫£i t·ª´ 10-200! VD: `,riggedtest 50`');
        }

        await message.reply('üé≤ **ƒêang ch·∫°y simulation rigged dice...**');

        // Weighted dice function (copy t·ª´ taixiu.js)
        function weightedDiceRoll(weights = [1, 1, 1, 1, 1, 1]) {
            const totalWeight = weights.reduce((sum, w) => sum + w, 0);
            const random = Math.random() * totalWeight;
            let cumulative = 0;
            
            for (let i = 0; i < weights.length; i++) {
                cumulative += weights[i];
                if (random <= cumulative) {
                    return i + 1;
                }
            }
            return 6; // fallback
        }

        // Test scenarios
        const scenarios = [
            {
                name: 'üéØ FAIR (Kh√¥ng rigged)',
                weights: [1, 1, 1, 1, 1, 1],
                description: 'X√∫c x·∫Øc c√¥ng b·∫±ng 100%'
            },
            {
                name: 'üìâ BIAS X·ªàU (Smart)',
                weights: [1.2, 1.1, 1.1, 0.95, 0.9, 0.85],
                description: 'Bias nh·∫π v·ªÅ X·ªâu (s·ªë th·∫•p)'
            },
            {
                name: 'üìà BIAS T√ÄI (Smart)', 
                weights: [0.85, 0.9, 0.95, 1.1, 1.1, 1.2],
                description: 'Bias nh·∫π v·ªÅ T√†i (s·ªë cao)'
            },
            {
                name: 'üî• FORCE X·ªàU (Aggressive)',
                weights: [1.8, 1.6, 1.4, 0.7, 0.5, 0.3],
                description: 'Bias m·∫°nh v·ªÅ X·ªâu'
            },
            {
                name: 'üöÄ FORCE T√ÄI (Aggressive)',
                weights: [0.3, 0.5, 0.7, 1.4, 1.6, 1.8],
                description: 'Bias m·∫°nh v·ªÅ T√†i'
            }
        ];

        let resultsText = '';

        for (const scenario of scenarios) {
            let taiCount = 0;
            let xiuCount = 0;
            let totalSum = 0;
            let diceDistribution = [0, 0, 0, 0, 0, 0]; // ƒê·∫øm m·ªói m·∫∑t x√∫c x·∫Øc

            // Ch·∫°y simulation
            for (let i = 0; i < numTests; i++) {
                const dice1 = weightedDiceRoll(scenario.weights);
                const dice2 = weightedDiceRoll(scenario.weights);
                const dice3 = weightedDiceRoll(scenario.weights);
                const total = dice1 + dice2 + dice3;
                
                totalSum += total;
                diceDistribution[dice1-1]++;
                diceDistribution[dice2-1]++;
                diceDistribution[dice3-1]++;

                if (total >= 11) {
                    taiCount++;
                } else {
                    xiuCount++;
                }
            }

            const taiPercent = ((taiCount / numTests) * 100).toFixed(1);
            const xiuPercent = ((xiuCount / numTests) * 100).toFixed(1);
            const avgTotal = (totalSum / numTests).toFixed(1);

            // T√≠nh ph√¢n b·ªë x√∫c x·∫Øc
            const totalDiceRolls = numTests * 3;
            const dicePercents = diceDistribution.map(count => ((count / totalDiceRolls) * 100).toFixed(1));

            resultsText += `**${scenario.name}**\n`;
            resultsText += `*${scenario.description}*\n`;
            resultsText += `‚Ä¢ T√†i: ${taiCount}/${numTests} (${taiPercent}%)\n`;
            resultsText += `‚Ä¢ X·ªâu: ${xiuCount}/${numTests} (${xiuPercent}%)\n`;
            resultsText += `‚Ä¢ Trung b√¨nh: ${avgTotal} ƒëi·ªÉm\n`;
            resultsText += `‚Ä¢ X√∫c x·∫Øc: [${dicePercents.join('%, ')}%]\n`;
            resultsText += `‚Ä¢ Bias: [${scenario.weights.join(', ')}]\n\n`;
        }

        const embed = new EmbedBuilder()
            .setTitle(`üß™ RIGGED DICE SIMULATION (${numTests} tests)`)
            .setDescription('**K·∫øt qu·∫£ test v·ªõi c√°c scenario bias kh√°c nhau:**\n\n' + resultsText)
            .addFields(
                {
                    name: 'üìä Ph√¢n t√≠ch',
                    value: `‚Ä¢ **Fair:** T√†i ‚âà 50%, X·ªâu ‚âà 50%\n` +
                           `‚Ä¢ **Smart bias:** L·ªách 5-15%\n` +
                           `‚Ä¢ **Aggressive:** L·ªách 20-40%\n` +
                           `‚Ä¢ **X√∫c x·∫Øc chu·∫©n:** M·ªói m·∫∑t ‚âà 16.7%`,
                    inline: false
                }
            )
            .setColor('#FF6B6B')
            .setFooter({ text: 'üé∞ Casino Rigged Analytics | For Educational Purpose Only' })
            .setTimestamp();

        // G·ª≠i k·∫øt qu·∫£ cho owner qua DM
        try {
            await message.author.send({ embeds: [embed] });
            await message.reply('üß™ ƒê√£ g·ª≠i k·∫øt qu·∫£ test rigged v√†o DM c·ªßa b·∫°n!');
        } catch (error) {
            // Fallback: reply b√¨nh th∆∞·ªùng nh∆∞ng delete sau 15s
            const reply = await message.reply({ embeds: [embed] });
            setTimeout(() => {
                reply.delete().catch(() => {});
            }, 15000);
        }
    }
}; 