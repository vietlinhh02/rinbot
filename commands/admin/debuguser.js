const { EmbedBuilder } = require('discord.js');
const { getCityUser, updateCityUser } = require('../../utils/database');
const FastUtils = require('../../utils/fastUtils');

module.exports = {
    name: 'debuguser',
    description: '[ADMIN] Debug th√¥ng tin user v√† s·ª≠a l·ªói',
    
    async execute(message, args) {
        // Ch·ªâ admin m·ªõi ƒë∆∞·ª£c d√πng
        if (!message.member.permissions.has('Administrator')) {
            return message.reply('‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!');
        }

        if (args.length === 0) {
            return message.reply('‚ùå C·∫ßn cung c·∫•p user ID ho·∫∑c mention user!\nS·ª≠ d·ª•ng: `,debuguser @user` ho·∫∑c `,debuguser [userId]`');
        }

        let targetUserId;
        
        // Ki·ªÉm tra n·∫øu l√† mention
        if (message.mentions.users.size > 0) {
            targetUserId = message.mentions.users.first().id;
        } else {
            // Ki·ªÉm tra n·∫øu l√† user ID
            targetUserId = args[0];
        }

        try {
            // L·∫•y th√¥ng tin user
            const cityUser = await getCityUser(targetUserId);
            const userRin = await FastUtils.getFastUserRin(targetUserId);

            const embed = new EmbedBuilder()
                .setTitle('üîç DEBUG USER INFORMATION')
                .setDescription(`**User ID:** ${targetUserId}\n` +
                    `**Rin:** ${userRin}\n\n` +
                    `**üè† Th√¥ng tin nh√†:**\n` +
                    `‚Ä¢ Home: ${cityUser.home || 'null'}\n` +
                    `‚Ä¢ Last Repair: ${cityUser.lastRepair ? new Date(cityUser.lastRepair).toLocaleString('vi-VN') : 'null'}\n\n` +
                    `**üíº Th√¥ng tin ngh·ªÅ:**\n` +
                    `‚Ä¢ Job: ${cityUser.job || 'null'}\n` +
                    `‚Ä¢ Work Progress: ${cityUser.workProgress || 0}\n` +
                    `‚Ä¢ Last Work: ${cityUser.lastWork ? new Date(cityUser.lastWork).toLocaleString('vi-VN') : 'null'}\n` +
                    `‚Ä¢ Work Start Time: ${cityUser.workStartTime ? new Date(cityUser.workStartTime).toLocaleString('vi-VN') : 'null'}\n\n` +
                    `**üéØ Th√¥ng tin kh√°c:**\n` +
                    `‚Ä¢ Job Streak: ${cityUser.jobStreak || 0}\n` +
                    `‚Ä¢ Daily Voice Minutes: ${cityUser.dailyVoiceMinutes || 0}\n` +
                    `‚Ä¢ Daily Money Steal: ${cityUser.dailyMoneySteal || 0}\n` +
                    `‚Ä¢ Daily Steal Records: ${JSON.stringify(cityUser.dailyStealRecords || {})}\n` +
                    `‚Ä¢ Jailed Until: ${cityUser.jailedUntil ? new Date(cityUser.jailedUntil).toLocaleString('vi-VN') : 'null'}\n` +
                    `‚Ä¢ Created At: ${new Date(cityUser.createdAt).toLocaleString('vi-VN')}\n` +
                    `‚Ä¢ Updated At: ${new Date(cityUser.updatedAt).toLocaleString('vi-VN')}`)
                .setColor('#FF6B6B')
                .setFooter({ text: 'Admin Debug Tool' })
                .setTimestamp();

            await message.reply({ embeds: [embed] });

            // N·∫øu c√≥ args[1] = "fix", th√¨ s·ª≠a l·ªói
            if (args[1] && args[1].toLowerCase() === 'fix') {
                console.log(`üîß ADMIN ${message.author.id} ƒëang s·ª≠a l·ªói cho user ${targetUserId}`);
                
                // Reset ho√†n to√†n th√¥ng tin nh√† v√† ngh·ªÅ
                await updateCityUser(targetUserId, {
                    home: null,
                    job: null,
                    workProgress: 0,
                    lastWork: null,
                    workStartTime: null,
                    lastRepair: null,
                    dailyMoneySteal: 0,
                    dailyStealRecords: {},
                    jailedUntil: null,
                    jailedBy: null,
                    dailyVoiceMinutes: 0
                });

                // Clear cache
                FastUtils.clearUserCache(targetUserId);

                const fixEmbed = new EmbedBuilder()
                    .setTitle('üîß ƒê√É S·ª¨A L·ªñI USER')
                    .setDescription(`**User ID:** ${targetUserId}\n\n` +
                        `**‚úÖ ƒê√£ reset:**\n` +
                        `‚Ä¢ Nh√†: null\n` +
                        `‚Ä¢ Ngh·ªÅ: null\n` +
                        `‚Ä¢ Ti·∫øn ƒë·ªô c√¥ng vi·ªác: 0\n` +
                        `‚Ä¢ Th·ªùi gian l√†m vi·ªác: reset\n` +
                        `‚Ä¢ T√π t·ªôi: clear\n` +
                        `‚Ä¢ Cache: cleared\n\n` +
                        `**üéØ User gi·ªù c√≥ th·ªÉ thu√™ nh√† v√† ch·ªçn ngh·ªÅ m·ªõi!**`)
                    .setColor('#00FF00')
                    .setFooter({ text: `Fixed by ${message.author.displayName}` })
                    .setTimestamp();

                await message.reply({ embeds: [fixEmbed] });
            }

        } catch (error) {
            console.error('L·ªói debuguser:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi debug user!');
        }
    }
}; 