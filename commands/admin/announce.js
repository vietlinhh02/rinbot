const { EmbedBuilder } = require('discord.js');
const config = require('../../config/config');

module.exports = {
    name: 'announce',
    description: 'G·ª≠i th√¥ng b√°o ƒë·∫øn c√°c user ID ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh, c√≥ th·ªÉ k√®m ·∫£nh',
    usage: 'announce <user_ids> <message> [--image=url]',
    category: 'admin',
    async execute(message, args) {
        // Ki·ªÉm tra quy·ªÅn owner
        if (!config.isOwner(message.author.id)) {
            return message.reply('‚õî L·ªánh n√†y ch·ªâ d√†nh cho owner bot!');
        }

        if (args.length < 2) {
            const helpEmbed = new EmbedBuilder()
                .setTitle('üì¢ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG L·ªÜNH ANNOUNCE')
                .setDescription(
                    '**C√∫ ph√°p:**\n' +
                    '```announce <user_ids> <message> [--image=url]```\n\n' +
                    '**V√≠ d·ª•:**\n' +
                    '‚Ä¢ `announce 123456789,987654321 Ch√∫c m·ª´ng b·∫°n!`\n' +
                    '‚Ä¢ `announce all Th√¥ng b√°o cho t·∫•t c·∫£`\n' +
                    '‚Ä¢ `announce 123456789 Ch√∫c m·ª´ng! --image=https://example.com/image.png`\n' +
                    '‚Ä¢ `announce @user1,@user2 Tin nh·∫Øn cho 2 ng∆∞·ªùi`\n\n' +
                    '**C√°ch ch·ªâ ƒë·ªãnh user:**\n' +
                    '‚Ä¢ `123456789,987654321` - Danh s√°ch ID c√°ch nhau b·ªüi d·∫•u ph·∫©y\n' +
                    '‚Ä¢ `all` - G·ª≠i cho t·∫•t c·∫£ user trong database\n' +
                    '‚Ä¢ `@user1,@user2` - Mention users\n' +
                    '‚Ä¢ `top10` - Top 10 users c√≥ nhi·ªÅu rin nh·∫•t'
                )
                .setColor('#FF9900')
                .setFooter({ text: 'S·ª≠ d·ª•ng l·ªánh toprin ƒë·ªÉ l·∫•y danh s√°ch ID' });

            return message.reply({ embeds: [helpEmbed] });
        }

        try {
            const userIdsArg = args[0];
            let imageUrl = null;
            
            // T√°ch message v√† t√¨m image URL
            let messageContent = args.slice(1).join(' ');
            const imageMatch = messageContent.match(/--image=(\S+)/);
            if (imageMatch) {
                imageUrl = imageMatch[1];
                messageContent = messageContent.replace(/--image=\S+/, '').trim();
            }

            // Ki·ªÉm tra n·∫øu c√≥ attachment
            if (message.attachments.size > 0) {
                const attachment = message.attachments.first();
                if (attachment.contentType && attachment.contentType.startsWith('image/')) {
                    imageUrl = attachment.url;
                }
            }

            if (!messageContent.trim()) {
                return message.reply('‚ùå Vui l√≤ng nh·∫≠p n·ªôi dung th√¥ng b√°o!');
            }

            // X·ª≠ l√Ω danh s√°ch user IDs
            let targetUserIds = [];

            if (userIdsArg.toLowerCase() === 'all') {
                // G·ª≠i cho t·∫•t c·∫£ users
                const User = require('../../models/User');
                const allUsers = await User.find({}).select('userId');
                targetUserIds = allUsers.map(u => u.userId);
            } else if (userIdsArg.toLowerCase().startsWith('top')) {
                // G·ª≠i cho top users
                const topCount = parseInt(userIdsArg.replace('top', '')) || 10;
                const User = require('../../models/User');
                const topUsers = await User.find({})
                    .sort({ rin: -1 })
                    .limit(topCount)
                    .select('userId');
                targetUserIds = topUsers.map(u => u.userId);
            } else if (userIdsArg.includes('@')) {
                // X·ª≠ l√Ω mentions
                const mentions = message.mentions.users;
                targetUserIds = mentions.map(user => user.id);
            } else {
                // X·ª≠ l√Ω danh s√°ch IDs
                targetUserIds = userIdsArg.split(/[,\s]+/).filter(id => id.trim());
            }

            if (targetUserIds.length === 0) {
                return message.reply('‚ùå Kh√¥ng t√¨m th·∫•y user ID n√†o h·ª£p l·ªá!');
            }

            // T·∫°o embed th√¥ng b√°o
            const announceEmbed = new EmbedBuilder()
                .setTitle('üì¢ TH√îNG B√ÅO QUAN TR·ªåNG')
                .setDescription(messageContent)
                .setColor('#FF6B35')
                .setTimestamp()
                .setFooter({ 
                    text: `T·ª´ ${message.guild?.name || 'Bot Admin'}`,
                    iconURL: message.guild?.iconURL() || message.client.user.displayAvatarURL()
                });

            // Th√™m ·∫£nh n·∫øu c√≥
            if (imageUrl) {
                announceEmbed.setImage(imageUrl);
            }

            // G·ª≠i th√¥ng b√°o x√°c nh·∫≠n
            const confirmEmbed = new EmbedBuilder()
                .setTitle('üîÑ ƒêANG G·ª¨I TH√îNG B√ÅO...')
                .setDescription(`S·∫Ω g·ª≠i ƒë·∫øn **${targetUserIds.length}** users`)
                .addFields(
                    { name: 'üìù N·ªôi dung', value: messageContent.length > 100 ? messageContent.substring(0, 100) + '...' : messageContent },
                    { name: 'üñºÔ∏è ·∫¢nh', value: imageUrl ? 'C√≥' : 'Kh√¥ng' },
                    { name: 'üë• S·ªë l∆∞·ª£ng', value: targetUserIds.length.toString() }
                )
                .setColor('#FFA500');

            const confirmMsg = await message.reply({ embeds: [confirmEmbed] });

            // G·ª≠i DM cho t·ª´ng user
            let successCount = 0;
            let failCount = 0;
            const failedUsers = [];

            for (const userId of targetUserIds) {
                try {
                    const user = await message.client.users.fetch(userId);
                    await user.send({ embeds: [announceEmbed] });
                    successCount++;
                    
                    // Delay nh·ªè ƒë·ªÉ tr√°nh rate limit
                    await new Promise(resolve => setTimeout(resolve, 100));
                } catch (error) {
                    failCount++;
                    failedUsers.push(userId);
                    console.error(`Kh√¥ng th·ªÉ g·ª≠i DM cho user ${userId}:`, error.message);
                }
            }

            // C·∫≠p nh·∫≠t k·∫øt qu·∫£
            const resultEmbed = new EmbedBuilder()
                .setTitle('‚úÖ HO√ÄN T·∫§T G·ª¨I TH√îNG B√ÅO')
                .addFields(
                    { name: '‚úÖ Th√†nh c√¥ng', value: successCount.toString(), inline: true },
                    { name: '‚ùå Th·∫•t b·∫°i', value: failCount.toString(), inline: true },
                    { name: 'üìä T·ª∑ l·ªá', value: `${((successCount / targetUserIds.length) * 100).toFixed(1)}%`, inline: true }
                )
                .setColor(failCount === 0 ? '#00FF00' : '#FFA500');

            if (failedUsers.length > 0 && failedUsers.length <= 10) {
                resultEmbed.addFields({
                    name: '‚ùå Users th·∫•t b·∫°i',
                    value: failedUsers.join(', ')
                });
            } else if (failedUsers.length > 10) {
                resultEmbed.addFields({
                    name: '‚ùå Users th·∫•t b·∫°i',
                    value: `${failedUsers.slice(0, 10).join(', ')}... v√† ${failedUsers.length - 10} users kh√°c`
                });
            }

            await confirmMsg.edit({ embeds: [resultEmbed] });

            // Log ho·∫°t ƒë·ªông
            console.log(`[ANNOUNCE] ${message.author.tag} ƒë√£ g·ª≠i th√¥ng b√°o ƒë·∫øn ${successCount}/${targetUserIds.length} users`);

        } catch (error) {
            console.error('L·ªói announce:', error);
            message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi g·ª≠i th√¥ng b√°o!');
        }
    }
};
