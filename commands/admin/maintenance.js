const { EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const config = require('../../config/config');

// Global maintenance state
global.maintenanceMode = {
    enabled: false,
    reason: null,
    startTime: null,
    enabledBy: null
};

module.exports = {
    name: 'maintenance',
    description: 'B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô b·∫£o tr√¨ bot (ch·ªâ owner)',
    
    async execute(message, args) {
        // Ki·ªÉm tra quy·ªÅn owner
        if (!config.isOwner(message.author.id)) {
            const noPermEmbed = new EmbedBuilder()
                .setTitle('üîí QUY·ªÄN TRUY C·∫¨P B·ªä T·ª™ CH·ªêI')
                .setDescription('**‚õî Ch·ªâ ch·ªß s·ªü h·ªØu bot m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y!**\n\n' +
                    'üîê **L√Ω do b·∫£o m·∫≠t:**\n' +
                    '‚Ä¢ L·ªánh maintenance c√≥ th·ªÉ v√¥ hi·ªáu h√≥a to√†n b·ªô bot\n' +
                    '‚Ä¢ Ch·ªâ owner ƒë∆∞·ª£c ph√©p th·ª±c hi·ªán thao t√°c n√†y\n' +
                    '‚Ä¢ ƒê√¢y l√† bi·ªán ph√°p b·∫£o v·ªá h·ªá th·ªëng\n\n' +
                    'üí° **D√†nh cho Admin server:**\n' +
                    '‚Ä¢ Li√™n h·ªá owner bot n·∫øu c·∫ßn b·∫£o tr√¨\n' +
                    '‚Ä¢ S·ª≠ d·ª•ng c√°c l·ªánh admin kh√°c nh∆∞ `,setprefix`, `,cleargames`')
                .setColor('#FF4444')
                .setFooter({ text: 'L·ªánh b·∫£o m·∫≠t cao c·∫•p' })
                .setTimestamp();
                
            return message.reply({ embeds: [noPermEmbed] });
        }

        const subCommand = args[0]?.toLowerCase();

        if (subCommand === 'on' || subCommand === 'enable') {
            return await this.enableMaintenance(message, args.slice(1));
        } else if (subCommand === 'off' || subCommand === 'disable') {
            return await this.disableMaintenance(message);
        } else if (subCommand === 'status') {
            return await this.showStatus(message);
        } else {
            return await this.showHelp(message);
        }
    },

    async enableMaintenance(message, reasonArgs) {
        if (global.maintenanceMode.enabled) {
            return message.reply('‚ö†Ô∏è Bot ƒë√£ ƒëang trong ch·∫ø ƒë·ªô b·∫£o tr√¨!');
        }

        const reason = reasonArgs.join(' ') || 'B·∫£o tr√¨ h·ªá th·ªëng';
        
        global.maintenanceMode = {
            enabled: true,
            reason: reason,
            startTime: new Date(),
            enabledBy: message.author.id
        };

        // C·∫≠p nh·∫≠t activity bot
        try {
            await message.client.user.setActivity('üîß ƒêANG B·∫¢O TR√å - Ch·ªâ Owner', { 
                type: 'WATCHING' 
            });
        } catch (error) {
            console.error('L·ªói c·∫≠p nh·∫≠t activity:', error);
        }

        const embed = new EmbedBuilder()
            .setTitle('üîß CH·∫§U ƒê·ªò B·∫¢O TR√å ƒê√É B·∫¨T')
            .setDescription(`**Bot hi·ªán ƒëang trong ch·∫ø ƒë·ªô b·∫£o tr√¨!**\n\n` +
                `**üìã Th√¥ng tin:**\n` +
                `‚Ä¢ **L√Ω do:** ${reason}\n` +
                `‚Ä¢ **B·∫≠t b·ªüi:** ${message.author.displayName}\n` +
                `‚Ä¢ **Th·ªùi gian:** ${new Date().toLocaleString('vi-VN')}\n\n` +
                `**‚ö†Ô∏è T√°c ƒë·ªông:**\n` +
                `‚Ä¢ Ch·ªâ owner bot c√≥ th·ªÉ d√πng l·ªánh\n` +
                `‚Ä¢ T·∫•t c·∫£ user kh√°c s·∫Ω nh·∫≠n th√¥ng b√°o b·∫£o tr√¨\n` +
                `‚Ä¢ Activity bot hi·ªÉn th·ªã tr·∫°ng th√°i b·∫£o tr√¨\n\n` +
                `**üîß ƒê·ªÉ t·∫Øt:** \`,maintenance off\``)
            .setColor('#FFA500')
            .setThumbnail('https://cdn-icons-png.flaticon.com/512/2377/2377194.png')
            .setFooter({ text: 'Ch·∫ø ƒë·ªô b·∫£o tr√¨ ƒë√£ k√≠ch ho·∫°t' })
            .setTimestamp();

        await message.reply({ embeds: [embed] });
        
        console.log(`üîß [MAINTENANCE] Enabled by ${message.author.tag} - Reason: ${reason}`);
    },

    async disableMaintenance(message) {
        if (!global.maintenanceMode.enabled) {
            return message.reply('‚ö†Ô∏è Bot kh√¥ng ƒëang trong ch·∫ø ƒë·ªô b·∫£o tr√¨!');
        }

        const duration = Date.now() - global.maintenanceMode.startTime;
        const durationText = this.formatDuration(duration);

        global.maintenanceMode = {
            enabled: false,
            reason: null,
            startTime: null,
            enabledBy: null
        };

        // C·∫≠p nh·∫≠t l·∫°i activity bot b√¨nh th∆∞·ªùng
        try {
            if (global.updateBotActivity) {
                await global.updateBotActivity();
            }
        } catch (error) {
            console.error('L·ªói c·∫≠p nh·∫≠t activity:', error);
        }

        const embed = new EmbedBuilder()
            .setTitle('‚úÖ CH·∫§U ƒê·ªò B·∫¢O TR√å ƒê√É T·∫ÆT')
            .setDescription(`**Bot ƒë√£ tr·ªü l·∫°i ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!**\n\n` +
                `**üìä Th·ªëng k√™ b·∫£o tr√¨:**\n` +
                `‚Ä¢ **Th·ªùi gian b·∫£o tr√¨:** ${durationText}\n` +
                `‚Ä¢ **T·∫Øt b·ªüi:** ${message.author.displayName}\n` +
                `‚Ä¢ **Ho√†n th√†nh l√∫c:** ${new Date().toLocaleString('vi-VN')}\n\n` +
                `**üéâ Bot ƒë√£ s·∫µn s√†ng ph·ª•c v·ª• t·∫•t c·∫£ ng∆∞·ªùi d√πng!**`)
            .setColor('#00FF00')
            .setThumbnail('https://cdn-icons-png.flaticon.com/512/190/190411.png')
            .setFooter({ text: 'B·∫£o tr√¨ ho√†n t·∫•t' })
            .setTimestamp();

        await message.reply({ embeds: [embed] });
        
        console.log(`‚úÖ [MAINTENANCE] Disabled by ${message.author.tag} - Duration: ${durationText}`);
    },

    async showStatus(message) {
        const maintenance = global.maintenanceMode;
        
        if (!maintenance.enabled) {
            const embed = new EmbedBuilder()
                .setTitle('‚úÖ BOT HO·∫†T ƒê·ªòNG B√åNH TH∆Ø·ªúNG')
                .setDescription('**Bot hi·ªán ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.**\n\n' +
                    'üü¢ **Tr·∫°ng th√°i:** Online\n' +
                    'üìä **Servers:** ' + message.client.guilds.cache.size + '\n' +
                    'üë• **Users:** ' + message.client.users.cache.size + '\n' +
                    '‚ö° **Ping:** ' + Math.round(message.client.ws.ping) + 'ms')
                .setColor('#00FF00')
                .setTimestamp();
            
            return message.reply({ embeds: [embed] });
        }

        const duration = Date.now() - maintenance.startTime;
        const durationText = this.formatDuration(duration);
        
        const user = await message.client.users.fetch(maintenance.enabledBy).catch(() => null);
        
        const embed = new EmbedBuilder()
            .setTitle('üîß BOT ƒêANG B·∫¢O TR√å')
            .setDescription(`**Bot hi·ªán ƒëang trong ch·∫ø ƒë·ªô b·∫£o tr√¨.**\n\n` +
                `**üìã Chi ti·∫øt:**\n` +
                `‚Ä¢ **L√Ω do:** ${maintenance.reason}\n` +
                `‚Ä¢ **B·∫≠t b·ªüi:** ${user ? user.displayName : 'Unknown'}\n` +
                `‚Ä¢ **B·∫Øt ƒë·∫ßu:** ${maintenance.startTime.toLocaleString('vi-VN')}\n` +
                `‚Ä¢ **Th·ªùi gian:** ${durationText}\n\n` +
                `**‚ö†Ô∏è Ch·ªâ owner bot c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh.**`)
            .setColor('#FFA500')
            .setTimestamp();

        await message.reply({ embeds: [embed] });
    },

    async showHelp(message) {
        const embed = new EmbedBuilder()
            .setTitle('üîß H∆Ø·ªöNG D·∫™N MAINTENANCE')
            .setDescription('**Qu·∫£n l√Ω ch·∫ø ƒë·ªô b·∫£o tr√¨ bot**')
            .addFields(
                {
                    name: 'üìã L·ªánh c∆° b·∫£n',
                    value: '‚Ä¢ `,maintenance on [l√Ω do]` - B·∫≠t b·∫£o tr√¨\n' +
                           '‚Ä¢ `,maintenance off` - T·∫Øt b·∫£o tr√¨\n' +
                           '‚Ä¢ `,maintenance status` - Xem tr·∫°ng th√°i',
                    inline: false
                },
                {
                    name: 'üí° V√≠ d·ª•',
                    value: '‚Ä¢ `,maintenance on C·∫≠p nh·∫≠t database`\n' +
                           '‚Ä¢ `,maintenance on Update bot version 2.1`\n' +
                           '‚Ä¢ `,maintenance off`',
                    inline: false
                },
                {
                    name: '‚ö†Ô∏è L∆∞u √Ω',
                    value: '‚Ä¢ Ch·ªâ owner bot c√≥ th·ªÉ d√πng\n' +
                           '‚Ä¢ Khi b·∫≠t, ch·ªâ owner ƒë∆∞·ª£c d√πng bot\n' +
                           '‚Ä¢ Activity bot s·∫Ω hi·ªÉn th·ªã tr·∫°ng th√°i b·∫£o tr√¨',
                    inline: false
                }
            )
            .setColor('#0099FF')
            .setFooter({ text: 'D√†nh cho owner bot' });

        await message.reply({ embeds: [embed] });
    },

    formatDuration(ms) {
        const seconds = Math.floor(ms / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);

        if (days > 0) return `${days} ng√†y ${hours % 24} gi·ªù`;
        if (hours > 0) return `${hours} gi·ªù ${minutes % 60} ph√∫t`;
        if (minutes > 0) return `${minutes} ph√∫t ${seconds % 60} gi√¢y`;
        return `${seconds} gi√¢y`;
    }
}; 