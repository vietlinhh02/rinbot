const { EmbedBuilder } = require('discord.js');
const { updateUserRin, getUserRin } = require('../../utils/database');
const config = require('../../config/config');

module.exports = {
    name: 'setrin',
    description: 'Ch·ªâ owner d√πng: Set Rin cho user b·∫•t k·ª≥. C√∫ ph√°p: setrin <@user|userId> <s·ªë ti·ªÅn>',
    async execute(message, args) {
        // Ch·ªâ cho owner d√πng
        if (!config.isOwner(message.author.id)) {
            return message.reply('‚õî L·ªánh n√†y ch·ªâ d√†nh cho owner bot!');
        }

        if (args.length < 2) {
            return message.reply('‚ùå C√∫ ph√°p: `setrin <@user|userId> <s·ªë ti·ªÅn>`\n\n**V√≠ d·ª•:**\n‚Ä¢ `setrin @user 1000` - Set 1000 Rin cho user\n‚Ä¢ `setrin 123456789 5000` - Set 5000 Rin cho user ID');
        }

        // L·∫•y userId
        let userId = args[0].replace(/<@!?|>/g, '');
        if (!/^[0-9]+$/.test(userId)) {
            return message.reply('‚ùå User kh√¥ng h·ª£p l·ªá! H√£y mention user ho·∫∑c d√πng ID h·ª£p l·ªá.');
        }

        const amount = parseInt(args[1]);
        if (isNaN(amount)) {
            return message.reply('‚ùå S·ªë Rin ph·∫£i l√† s·ªë nguy√™n!\n\n**V√≠ d·ª•:** `setrin @user 1000`');
        }

        if (amount < 0) {
            return message.reply('‚ùå S·ªë Rin kh√¥ng th·ªÉ √¢m! D√πng `addrin @user -1000` ƒë·ªÉ tr·ª´ ti·ªÅn.');
        }

        try {
            // L·∫•y s·ªë Rin hi·ªán t·∫°i c·ªßa user
            const currentRin = await getUserRin(userId);
            
            // T√≠nh to√°n s·ªë ti·ªÅn c·∫ßn thay ƒë·ªïi ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c s·ªë Rin mong mu·ªën
            const difference = amount - currentRin;
            
            // C·∫≠p nh·∫≠t Rin
            await updateUserRin(userId, difference);

            // Th·ª≠ l·∫•y th√¥ng tin user ƒë·ªÉ hi·ªÉn th·ªã t√™n
            let displayName = `<@${userId}>`;
            try {
                const user = await message.client.users.fetch(userId);
                displayName = user.displayName || user.username;
            } catch (error) {
                // Gi·ªØ nguy√™n mention n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c t√™n
            }

            const embed = new EmbedBuilder()
                .setTitle('üí∞ ƒê√É SET RIN')
                .setDescription(`**${displayName}** ƒë√£ ƒë∆∞·ª£c set **${amount.toLocaleString()} Rin**!`)
                .addFields(
                    { name: 'üìä Th√¥ng tin chi ti·∫øt:', value: `‚Ä¢ **Tr∆∞·ªõc:** ${currentRin.toLocaleString()} Rin\n‚Ä¢ **Sau:** ${amount.toLocaleString()} Rin\n‚Ä¢ **Thay ƒë·ªïi:** ${difference >= 0 ? '+' : ''}${difference.toLocaleString()} Rin`, inline: false },
                    { name: 'üë®‚Äçüíº Th·ª±c hi·ªán b·ªüi:', value: message.author.displayName, inline: true },
                    { name: '‚è∞ Th·ªùi gian:', value: new Date().toLocaleString('vi-VN'), inline: true }
                )
                .setColor('#FFD700')
                .setFooter({ text: 'RinBot Admin Tools - SetRin Command' })
                .setTimestamp();

            await message.reply({ embeds: [embed] });

            // Log cho admin
            console.log(`üîß [ADMIN] ${message.author.tag} (${message.author.id}) set ${amount} Rin cho user ${userId} (${displayName})`);

        } catch (error) {
            console.error('L·ªói setrin:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setTitle('‚ùå L·ªñI H·ªÜ TH·ªêNG')
                .setDescription('C√≥ l·ªói x·∫£y ra khi set Rin cho user!\n\n**Chi ti·∫øt l·ªói ƒë√£ ƒë∆∞·ª£c ghi log.**')
                .setColor('#FF0000')
                .setFooter({ text: 'Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá dev' });

            await message.reply({ embeds: [errorEmbed] });
        }
    }
}; 