const { EmbedBuilder } = require('discord.js');
const { updateUserRin, getUserRin } = require('../../utils/database');
const config = require('../../config/config');

module.exports = {
    name: 'setrin',
    description: 'Ch·ªâ owner d√πng: Set Rin cho m·ªôt ho·∫∑c nhi·ªÅu user. C√∫ ph√°p: setrin <@user1> <@user2> ... <s·ªë ti·ªÅn>',
    async execute(message, args) {
        // Ch·ªâ cho owner d√πng
        if (!config.isOwner(message.author.id)) {
            return message.reply('‚õî L·ªánh n√†y ch·ªâ d√†nh cho owner bot!');
        }

        if (args.length < 2) {
            return message.reply('‚ùå C√∫ ph√°p: `setrin <@user1> [user2] [user3] ... <s·ªë ti·ªÅn>`\n\n**V√≠ d·ª•:**\n‚Ä¢ `setrin @user 1000` - Set 1000 Rin cho 1 user\n‚Ä¢ `setrin @user1 @user2 @user3 5000` - Set 5000 Rin cho 3 user\n‚Ä¢ `setrin 123456789 987654321 2000` - Set 2000 Rin cho 2 user b·∫±ng ID');
        }

        // S·ªë ti·ªÅn s·∫Ω l√† argument cu·ªëi c√πng
        const amount = parseInt(args[args.length - 1]);
        if (isNaN(amount)) {
            return message.reply('‚ùå S·ªë Rin ph·∫£i l√† s·ªë nguy√™n!\n\n**V√≠ d·ª•:** `setrin @user1 @user2 1000`');
        }

        if (amount < 0) {
            return message.reply('‚ùå S·ªë Rin kh√¥ng th·ªÉ √¢m! D√πng `addrin` ƒë·ªÉ tr·ª´ ti·ªÅn.');
        }

        // L·∫•y danh s√°ch user (t·∫•t c·∫£ args tr·ª´ c√°i cu·ªëi l√† s·ªë ti·ªÅn)
        const userArgs = args.slice(0, -1);
        const userIds = [];
        
        // Validate v√† extract user IDs
        for (let userArg of userArgs) {
            let userId = userArg.replace(/<@!?|>/g, '');
            if (!/^[0-9]+$/.test(userId)) {
                return message.reply(`‚ùå User kh√¥ng h·ª£p l·ªá: \`${userArg}\`! H√£y mention user ho·∫∑c d√πng ID h·ª£p l·ªá.`);
            }
            userIds.push(userId);
        }

        // Lo·∫°i b·ªè duplicate user IDs
        const uniqueUserIds = [...new Set(userIds)];

        if (uniqueUserIds.length === 0) {
            return message.reply('‚ùå Kh√¥ng c√≥ user n√†o h·ª£p l·ªá ƒë·ªÉ set Rin!');
        }

        try {
            const results = [];
            let successCount = 0;
            let errorCount = 0;

            // X·ª≠ l√Ω t·ª´ng user
            for (let userId of uniqueUserIds) {
                try {
                    // L·∫•y s·ªë Rin hi·ªán t·∫°i c·ªßa user
                    const currentRin = await getUserRin(userId);
                    
                    // T√≠nh to√°n s·ªë ti·ªÅn c·∫ßn thay ƒë·ªïi ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c s·ªë Rin mong mu·ªën
                    const difference = amount - currentRin;
                    
                    // C·∫≠p nh·∫≠t Rin
                    await updateUserRin(userId, difference);

                    // Th·ª≠ l·∫•y th√¥ng tin user ƒë·ªÉ hi·ªÉn th·ªã t√™n
                    let displayName = `<@${userId}>`;
                    try {
                        const user = await message.client.users.fetch(userId);
                        displayName = user.displayName || user.username;
                    } catch (error) {
                        // Gi·ªØ nguy√™n mention n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c t√™n
                    }

                    results.push({
                        success: true,
                        userId,
                        displayName,
                        currentRin,
                        newRin: amount,
                        difference
                    });
                    successCount++;

                } catch (error) {
                    console.error(`L·ªói khi set Rin cho user ${userId}:`, error);
                    results.push({
                        success: false,
                        userId,
                        error: error.message
                    });
                    errorCount++;
                }
            }

            // T·∫°o embed k·∫øt qu·∫£
            const embed = new EmbedBuilder()
                .setTitle('üí∞ K·∫æT QU·∫¢ SET RIN')
                .setColor(errorCount === 0 ? '#00FF00' : (successCount === 0 ? '#FF0000' : '#FFA500'))
                .setFooter({ text: 'RinBot Admin Tools - SetRin Command' })
                .setTimestamp();

            let description = `**ƒê√£ set ${amount.toLocaleString()} Rin**\n\n`;
            
            if (successCount > 0) {
                description += `‚úÖ **Th√†nh c√¥ng:** ${successCount}/${uniqueUserIds.length} user\n`;
            }
            if (errorCount > 0) {
                description += `‚ùå **Th·∫•t b·∫°i:** ${errorCount}/${uniqueUserIds.length} user\n`;
            }

            embed.setDescription(description);

            // Th√™m chi ti·∫øt cho t·ª´ng user th√†nh c√¥ng
            if (successCount > 0) {
                let successDetails = '';
                results.filter(r => r.success).forEach(result => {
                    const changeText = result.difference >= 0 ? `+${result.difference.toLocaleString()}` : result.difference.toLocaleString();
                    successDetails += `‚Ä¢ **${result.displayName}**: ${result.currentRin.toLocaleString()} ‚Üí ${result.newRin.toLocaleString()} (${changeText})\n`;
                });
                
                if (successDetails.length > 1024) {
                    successDetails = successDetails.substring(0, 1000) + '...\n*(Qu√° nhi·ªÅu ƒë·ªÉ hi·ªÉn th·ªã)*';
                }
                
                embed.addFields({
                    name: '‚úÖ Th√†nh c√¥ng:',
                    value: successDetails,
                    inline: false
                });
            }

            // Th√™m chi ti·∫øt cho user th·∫•t b·∫°i
            if (errorCount > 0) {
                let errorDetails = '';
                results.filter(r => !r.success).forEach(result => {
                    errorDetails += `‚Ä¢ <@${result.userId}>: ${result.error}\n`;
                });
                
                if (errorDetails.length > 1024) {
                    errorDetails = errorDetails.substring(0, 1000) + '...\n*(Qu√° nhi·ªÅu ƒë·ªÉ hi·ªÉn th·ªã)*';
                }
                
                embed.addFields({
                    name: '‚ùå Th·∫•t b·∫°i:',
                    value: errorDetails,
                    inline: false
                });
            }

            embed.addFields(
                { name: 'üë®‚Äçüíº Th·ª±c hi·ªán b·ªüi:', value: message.author.displayName, inline: true },
                { name: '‚è∞ Th·ªùi gian:', value: new Date().toLocaleString('vi-VN'), inline: true }
            );

            await message.reply({ embeds: [embed] });

            // Log cho admin
            console.log(`üîß [ADMIN] ${message.author.tag} (${message.author.id}) set ${amount} Rin cho ${successCount}/${uniqueUserIds.length} user(s)`);

        } catch (error) {
            console.error('L·ªói setrin:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setTitle('‚ùå L·ªñI H·ªÜ TH·ªêNG')
                .setDescription('C√≥ l·ªói x·∫£y ra khi set Rin cho user!\n\n**Chi ti·∫øt l·ªói ƒë√£ ƒë∆∞·ª£c ghi log.**')
                .setColor('#FF0000')
                .setFooter({ text: 'Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá dev' });

            await message.reply({ embeds: [errorEmbed] });
        }
    }
};