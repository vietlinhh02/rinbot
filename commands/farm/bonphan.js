const { EmbedBuilder } = require('discord.js');
const { getUserRin, updateUserRin } = require('../../utils/database');
const { TREE_IMAGES } = require('../../utils/constants');
const Tree = require('../../models/Tree');

module.exports = {
    name: 'bonphan',
    description: 'B√≥n ph√¢n cho c√¢y (30 Rin). M·ªói c√¢y ch·ªâ c·∫ßn 3 l·∫ßn t∆∞·ªõi, sau khi ƒë·ªß 3 l·∫ßn t∆∞·ªõi ho·∫∑c b√≥n ph√¢n th√¨ ch·ªù 1 ti·∫øng ƒë·ªÉ thu ho·∫°ch. M·ªói ng∆∞·ªùi ch·ªâ ƒë∆∞·ª£c 1 c√¢y.',
    
    async execute(message, args) {
        const userId = message.author.id;
        
        // T√¨m t·∫•t c·∫£ c√¢y c·ªßa ng∆∞·ªùi ch∆°i
        const trees = await Tree.find({ userId }).sort({ plantedAt: 1 });
        if (trees.length === 0) {
            return message.reply('‚ùå B·∫°n ch∆∞a c√≥ c√¢y n√†o! H√£y d√πng l·ªánh `muacay` ƒë·ªÉ tr·ªìng c√¢y.');
        }

        // N·∫øu c√≥ nhi·ªÅu c√¢y v√† kh√¥ng ch·ªâ ƒë·ªãnh s·ªë th·ª© t·ª±
        if (trees.length > 1 && args.length === 0) {
            let treeList = '';
            trees.forEach((tree, index) => {
                const stageEmojis = ['üå±', 'üåø', 'üå≥', 'üéÑ'];
                const emoji = stageEmojis[tree.growthStage] || 'üå±';
                const bonusStatus = tree.bonused ? 'üíö ƒê√£ b√≥n' : (tree.growthStage >= 3 ? '‚ùå ƒê√£ l·ªõn' : '‚úÖ C√≥ th·ªÉ b√≥n');
                treeList += `${index + 1}. ${emoji} **${tree.species}** - ${bonusStatus}\n`;
            });
            
            return message.reply(`üå± **B·∫°n c√≥ ${trees.length} c√¢y!** Ch·ªâ ƒë·ªãnh s·ªë th·ª© t·ª± ƒë·ªÉ b√≥n ph√¢n:\n\n${treeList}\nüí° **C√°ch d√πng:** \`bonphan 1\` (b√≥n ph√¢n c√¢y s·ªë 1)`);
        }

        // X√°c ƒë·ªãnh c√¢y c·∫ßn b√≥n ph√¢n
        let treeIndex = 0;
        if (args.length > 0) {
            treeIndex = parseInt(args[0]) - 1;
            if (treeIndex < 0 || treeIndex >= trees.length) {
                return message.reply(`‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá! B·∫°n c√≥ ${trees.length} c√¢y (t·ª´ 1 ƒë·∫øn ${trees.length}).`);
            }
        }

        const tree = trees[treeIndex];
        const treeNumber = treeIndex + 1;

        // Ki·ªÉm tra c√¢y ƒë√£ ƒë∆∞·ª£c b√≥n ph√¢n ch∆∞a
        if (tree.bonused) {
            return message.reply(`‚ùå C√¢y s·ªë ${treeNumber} ƒë√£ ƒë∆∞·ª£c b√≥n ph√¢n r·ªìi! M·ªói c√¢y ch·ªâ c√≥ th·ªÉ b√≥n ph√¢n 1 l·∫ßn.`);
        }

        // Ki·ªÉm tra s·ªë Rin
        const userRin = await getUserRin(userId);
        if (userRin < 30) {
            return message.reply('‚ùå B·∫°n c·∫ßn 30 Rin ƒë·ªÉ mua ph√¢n b√≥n!');
        }

        // Ki·ªÉm tra c√¢y ƒë√£ l·ªõn ch∆∞a
        if (tree.growthStage >= 3) {
            return message.reply(`‚ùå C√¢y s·ªë ${treeNumber} ƒë√£ l·ªõn r·ªìi, kh√¥ng c·∫ßn b√≥n ph√¢n n·ªØa! H√£y thu ho·∫°ch.`);
        }

        // Tr·ª´ ti·ªÅn v√† b√≥n ph√¢n
        await updateUserRin(userId, -30);
        
        const now = new Date();
        
        // T√≠nh tu·ªïi c√¢y hi·ªán t·∫°i
        const ageInMinutes = (now - new Date(tree.plantedAt)) / (1000 * 60);
        tree.age = Math.floor(ageInMinutes);

        // Bonus: N·∫øu ch∆∞a t∆∞·ªõi n∆∞·ªõc l·∫ßn n√†o th√¨ waterCount = 2, n·∫øu ƒë√£ t∆∞·ªõi th√¨ ch·ªâ set waterCount = 3 n·∫øu nh·ªè h∆°n 3
        if (tree.waterCount === 0) {
            tree.waterCount = 2;
        } else if (tree.waterCount < 3) {
            tree.waterCount = 3;
        }
        tree.growthStage = 3;
        tree.plantedAt = now;
        tree.maturedAt = now;
        tree.deadAt = null;
        tree.bonused = true;
        await tree.save();

        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        const stageNames = ['üå± M·∫ßm non', 'üåø C√¢y con', 'üå≥ ƒêang l·ªõn', 'üéÑ C√¢y l·ªõn'];
        const currentStage = stageNames[tree.growthStage];
        const embed = new EmbedBuilder()
            .setTitle('üíö B√ìN PH√ÇN TH√ÄNH C√îNG!')
            .setDescription(`**C√¢y s·ªë ${treeNumber}: ${tree.species}** c·ªßa ${message.author.displayName}\n\n` +
                `**üåü Hi·ªáu qu·∫£ ph√¢n b√≥n:**\n` +
                `‚ú® ƒê√£ b√≥n ph√¢n, c√¢y s·∫Ω tr∆∞·ªüng th√†nh sau 1 ti·∫øng\n` +
                `üíß S·ªë l·∫ßn t∆∞·ªõi hi·ªán t·∫°i: ${tree.waterCount}/3\n` +
                `üí∞ T·ªën: 30 Rin\n\n` +
                `**üìä Tr·∫°ng th√°i sau khi b√≥n:**\n` +
                `üé≠ Giai ƒëo·∫°n: ${currentStage}\n` +
                `‚è∞ ƒê√£ tr∆∞·ªüng th√†nh l√∫c: ${tree.maturedAt ? new Date(tree.maturedAt).toLocaleString() : 'Ch∆∞a'}\n` +
                `üïí L·∫ßn t∆∞·ªõi cu·ªëi: ${tree.lastWater ? new Date(tree.lastWater).toLocaleString() : 'Ch∆∞a t∆∞·ªõi'}\n` +
                (tree.growthStage >= 3 ? 
                    `üéâ **C√¢y ƒë√£ l·ªõn nh·ªù ph√¢n b√≥n! C√≥ th·ªÉ thu ho·∫°ch sau 1 ti·∫øng!**` :
                    `‚è≥ **C·∫ßn th√™m:** ƒê·ªß 3 l·∫ßn t∆∞·ªõi v√† ch·ªù 1 ti·∫øng sau khi tr∆∞·ªüng th√†nh`))
            .setThumbnail(TREE_IMAGES[tree.species])
            .setColor(tree.growthStage >= 3 ? '#FFD700' : '#00CC00')
            .setFooter({ text: `C√¢y s·ªë ${treeNumber} - Ph√¢n b√≥n ch·∫•t l∆∞·ª£ng cao!` });
        await message.reply({ embeds: [embed] });
    },

    // H√†m t√≠nh s·ªë l·∫ßn t∆∞·ªõi c·∫ßn thi·∫øt d·ª±a tr√™n lo·∫°i c√¢y
    getRequiredWaters(species) {
        const waterRequirements = {
            'C·ªè th√∫i ƒë·ªãch': 3,
            'C√¢y chu·ªëi': 4,
            'C√¢y d∆∞a h·∫•u': 4,
            'C√¢y xo√†i': 5,
            'C√¢y th∆°m': 6,
            'C√¢y cam': 6,
            'C√¢y d√¢u t√¢y': 7,
            'C√¢y d·ª´a': 8
        };
        
        return waterRequirements[species] || 5; // M·∫∑c ƒë·ªãnh 5 l·∫ßn
    }
}; 