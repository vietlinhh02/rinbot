const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { getCityUser, updateCityUser, getUserRin, updateUserRin } = require('../../utils/database');
const { COLORS } = require('../../utils/constants');

module.exports = {
    name: 'suanha',
    description: 'S·ª≠a ch·ªØa nh√† ƒë·ªÉ duy tr√¨ t√¨nh tr·∫°ng t·ªët',
    
    async execute(message, args) {
        try {
            const userId = message.author.id;
            const cityUser = await getCityUser(userId);
            const userRin = await getUserRin(userId);

            if (!cityUser.home) {
                return message.reply('‚ùå B·∫°n ch∆∞a thu√™ nh√†! D√πng `,thuenha` ƒë·ªÉ thu√™ nh√†.');
            }

            const houseInfo = this.getHouseInfo(cityUser.home);
            const now = new Date();
            
            // T√≠nh th·ªùi gian s·ª≠a ch·ªØa cu·ªëi
            const lastRepair = cityUser.lastRepair ? new Date(cityUser.lastRepair) : new Date(cityUser.createdAt);
            const daysSinceRepair = Math.floor((now - lastRepair) / (1000 * 60 * 60 * 24));
            const daysUntilNextRepair = Math.max(0, 5 - daysSinceRepair);

            // Ki·ªÉm tra xem c√≥ c·∫ßn s·ª≠a kh√¥ng
            if (daysSinceRepair < 5) {
                const embed = new EmbedBuilder()
                    .setTitle('‚úÖ NH√Ä V·∫™N T·ªêT!')
                    .setDescription(`**üè† ${houseInfo.name}** c·ªßa b·∫°n v·∫´n ƒëang trong t√¨nh tr·∫°ng t·ªët.\n\n` +
                        `**üìÖ Th√¥ng tin:**\n` +
                        `‚Ä¢ S·ª≠a ch·ªØa cu·ªëi: ${lastRepair.toLocaleDateString('vi-VN')}\n` +
                        `‚Ä¢ ƒê√£ ·ªü: ${daysSinceRepair} ng√†y\n` +
                        `‚Ä¢ C·∫ßn s·ª≠a sau: ${daysUntilNextRepair} ng√†y n·ªØa\n\n` +
                        `**üí∞ Chi ph√≠ s·ª≠a ch·ªØa:** ${houseInfo.dailyRepair > 0 ? houseInfo.dailyRepair.toLocaleString() + ' Rin' : 'Mi·ªÖn ph√≠'}\n\n` +
                        `**üí° G·ª£i √Ω:** B·∫°n c√≥ th·ªÉ s·ª≠a s·ªõm ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n!`)
                    .setColor(COLORS.success)
                    .setFooter({ text: 'Nh√† c·∫ßn ƒë∆∞·ª£c s·ª≠a ch·ªØa √≠t nh·∫•t 5 ng√†y m·ªôt l·∫ßn!' });

                // Th√™m button cho ph√©p s·ª≠a s·ªõm
                const repairButton = new ButtonBuilder()
                    .setCustomId(`early_repair_${userId}`)
                    .setLabel('üîß S·ª≠a s·ªõm')
                    .setStyle(ButtonStyle.Secondary);

                const row = new ActionRowBuilder().addComponents(repairButton);
                
                return message.reply({ embeds: [embed], components: [row] });
            }

            // Ki·ªÉm tra ti·ªÅn
            if (userRin < houseInfo.dailyRepair) {
                return message.reply(`‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ s·ª≠a nh√†!\n\n` +
                    `**üí∞ C·∫ßn:** ${houseInfo.dailyRepair.toLocaleString()} Rin\n` +
                    `**üí∞ C√≥:** ${userRin.toLocaleString()} Rin\n` +
                    `**üí∞ Thi·∫øu:** ${(houseInfo.dailyRepair - userRin).toLocaleString()} Rin\n\n` +
                    `‚ö†Ô∏è **C·∫£nh b√°o:** N·∫øu kh√¥ng s·ª≠a, nh√† c√≥ th·ªÉ b·ªã thu h·ªìi!`);
            }

            // T·∫°o embed x√°c nh·∫≠n s·ª≠a ch·ªØa
            const confirmEmbed = new EmbedBuilder()
                .setTitle('üîß X√ÅC NH·∫¨N S·ª¨A CH·ªÆA NH√Ä')
                .setDescription(`**üè† Lo·∫°i nh√†:** ${houseInfo.name}\n` +
                    `**üìÖ L·∫ßn s·ª≠a cu·ªëi:** ${lastRepair.toLocaleDateString('vi-VN')}\n` +
                    `**‚è∞ ƒê√£ ·ªü:** ${daysSinceRepair} ng√†y\n\n` +
                    `**üí∞ Chi ph√≠ s·ª≠a ch·ªØa:** ${houseInfo.dailyRepair > 0 ? houseInfo.dailyRepair.toLocaleString() + ' Rin' : 'Mi·ªÖn ph√≠'}\n` +
                    `**üí∞ S·ªë d∆∞ hi·ªán t·∫°i:** ${userRin.toLocaleString()} Rin\n` +
                    `**üí∞ S·ªë d∆∞ sau s·ª≠a:** ${(userRin - houseInfo.dailyRepair).toLocaleString()} Rin\n\n` +
                    `**B·∫°n c√≥ mu·ªën s·ª≠a ch·ªØa nh√† kh√¥ng?**`)
                .setColor(daysSinceRepair >= 5 ? COLORS.error : COLORS.warning)
                .setFooter({ text: daysSinceRepair >= 5 ? '‚ö†Ô∏è B·∫Øt bu·ªôc s·ª≠a ƒë·ªÉ tr√°nh b·ªã thu h·ªìi!' : 'Quy·∫øt ƒë·ªãnh trong 30 gi√¢y!' })
                .setTimestamp();

            const confirmButton = new ButtonBuilder()
                .setCustomId(`repair_confirm_${userId}`)
                .setLabel('üîß X√°c nh·∫≠n s·ª≠a')
                .setStyle(ButtonStyle.Success);

            const cancelButton = new ButtonBuilder()
                .setCustomId(`repair_cancel_${userId}`)
                .setLabel('‚ùå H·ªßy b·ªè')
                .setStyle(daysSinceRepair >= 5 ? ButtonStyle.Secondary : ButtonStyle.Danger);

            const row = new ActionRowBuilder().addComponents(confirmButton, cancelButton);

            await message.reply({ embeds: [confirmEmbed], components: [row] });

        } catch (error) {
            console.error('L·ªói suanha:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi s·ª≠a nh√†!');
        }
    },

    // X·ª≠ l√Ω button interactions
    async handleInteraction(interaction) {
        if (!interaction.customId.startsWith('repair_') && !interaction.customId.startsWith('early_repair_')) return;

        const parts = interaction.customId.split('_');
        const action = parts[1]; // confirm, cancel, ho·∫∑c repair (cho early_repair)
        const userId = parts[parts.length - 1];

        if (interaction.user.id !== userId) {
            return interaction.reply({ content: '‚ùå Ch·ªâ ng∆∞·ªùi s·ªü h·ªØu nh√† m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán!', ephemeral: true });
        }

        try {
            const cityUser = await getCityUser(userId);
            const userRin = await getUserRin(userId);
            const houseInfo = this.getHouseInfo(cityUser.home);

            if (action === 'confirm' || action === 'repair') {
                // Ki·ªÉm tra ti·ªÅn m·ªôt l·∫ßn n·ªØa
                if (userRin < houseInfo.dailyRepair) {
                    return interaction.reply({ 
                        content: `‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn ${houseInfo.dailyRepair.toLocaleString()} Rin.`, 
                        ephemeral: true 
                    });
                }

                // Th·ª±c hi·ªán s·ª≠a ch·ªØa
                if (houseInfo.dailyRepair > 0) {
                    await updateUserRin(userId, -houseInfo.dailyRepair);
                }
                
                await updateCityUser(userId, { 
                    lastRepair: new Date() 
                });

                const successEmbed = new EmbedBuilder()
                    .setTitle('üéâ S·ª¨A CH·ªÆA TH√ÄNH C√îNG!')
                    .setDescription(`**üè† ${houseInfo.name}** ƒë√£ ƒë∆∞·ª£c s·ª≠a ch·ªØa ho√†n t·∫•t!\n\n` +
                        `**üí∞ Chi ph√≠:** ${houseInfo.dailyRepair > 0 ? houseInfo.dailyRepair.toLocaleString() + ' Rin' : 'Mi·ªÖn ph√≠'}\n` +
                        `**üí∞ S·ªë d∆∞ c√≤n l·∫°i:** ${(userRin - houseInfo.dailyRepair).toLocaleString()} Rin\n\n` +
                        `**üìÖ Nh√† s·∫Ω t·ªët trong 5 ng√†y t·ªõi!**\n` +
                        `**üîß L·∫ßn s·ª≠a ti·∫øp theo:** ${new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toLocaleDateString('vi-VN')}\n\n` +
                        `**Nh√† c·ªßa b·∫°n gi·ªù nh∆∞ m·ªõi! ‚ú®**`)
                    .setColor(COLORS.success)
                    .setFooter({ text: 'H√£y chƒÉm s√≥c nh√† c·ª≠a th∆∞·ªùng xuy√™n!' })
                    .setTimestamp();

                // Update message ƒë·ªÉ x√≥a buttons
                await interaction.update({ embeds: [successEmbed], components: [] });

            } else {
                // H·ªßy b·ªè s·ª≠a ch·ªØa
                const now = new Date();
                const lastRepair = cityUser.lastRepair ? new Date(cityUser.lastRepair) : new Date(cityUser.createdAt);
                const daysSinceRepair = Math.floor((now - lastRepair) / (1000 * 60 * 60 * 24));

                let cancelMessage = '';
                if (daysSinceRepair >= 5) {
                    cancelMessage = '‚ö†Ô∏è **C·∫¢NH B√ÅO NGHI√äM TR·ªåNG!**\n\n' +
                        'B·∫°n ƒë√£ h·ªßy s·ª≠a ch·ªØa nh√† khi ƒë√£ qu√° h·∫°n!\n' +
                        'Nh√† c√≥ th·ªÉ b·ªã thu h·ªìi b·∫•t c·ª© l√∫c n√†o!\n\n' +
                        '**H√£y s·ª≠a ngay l·∫≠p t·ª©c ƒë·ªÉ tr√°nh m·∫•t nh√†!**';
                } else {
                    cancelMessage = 'B·∫°n ƒë√£ quy·∫øt ƒë·ªãnh kh√¥ng s·ª≠a nh√† l√∫c n√†y.\n\n' +
                        'C√≥ th·ªÉ s·ª≠a b·∫•t c·ª© l√∫c n√†o b·∫±ng l·ªánh `,suanha`.';
                }

                const cancelEmbed = new EmbedBuilder()
                    .setTitle('‚ùå ƒê√É H·ª¶Y S·ª¨A NH√Ä')
                    .setDescription('B·∫°n ƒë√£ quy·∫øt ƒë·ªãnh kh√¥ng s·ª≠a nh√†. H√£y c√¢n nh·∫Øc v√† quay l·∫°i sau!')
                    .setColor('#6C757D');

                // Update message ƒë·ªÉ x√≥a buttons
                await interaction.update({ embeds: [cancelEmbed], components: [] });
            }

        } catch (error) {
            console.error('L·ªói x·ª≠ l√Ω interaction s·ª≠a nh√†:', error);
            await interaction.reply({ content: '‚ùå C√≥ l·ªói x·∫£y ra!', ephemeral: true });
        }
    },

    // Helper functions
    getHouseInfo(houseType) {
        const houseData = {
            'nhatro': {
                name: 'Nh√† Tr·ªç',
                price: 500,
                dailyRepair: 0,
                emoji: 'üè†'
            },
            'nhatuong': {
                name: 'Nh√† Th∆∞·ªùng',
                price: 2000,
                dailyRepair: 300,
                emoji: 'üèòÔ∏è'
            },
            'nhalau': {
                name: 'Nh√† L·∫ßu',
                repairCost: 1000,
                cooldown: 5 * 24 * 60 * 60 * 1000 // 5 ng√†y
            },
            'bietthu': {
                name: 'Bi·ªát Th·ª±',
                price: 10000,
                dailyRepair: 1500,
                emoji: 'üè∞'
            }
        };
        return houseData[houseType] || { name: 'Kh√¥ng r√µ', price: 0, dailyRepair: 0, emoji: '‚ùì' };
    }
}; 