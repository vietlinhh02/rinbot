const { EmbedBuilder } = require('discord.js');
const { getCityUser, getUserRin } = require('../../utils/database');
const { JOB_TYPES, HOUSE_IMAGES, COLORS } = require('../../utils/constants');

module.exports = {
    name: 'nhacheck',
    description: 'Ki·ªÉm tra th√¥ng tin nh√† v√† tr·∫°ng th√°i',
    
    async execute(message, args) {
        try {
            const userId = message.author.id;
            const cityUser = await getCityUser(userId);
            const userRin = await getUserRin(userId);

            if (!cityUser.home) {
                return message.reply('‚ùå B·∫°n ch∆∞a thu√™ nh√†! H√£y d√πng l·ªánh `,thuenha` ƒë·ªÉ thu√™ nh√†.');
            }

            const now = new Date();
            
            // Th√¥ng tin nh√† c∆° b·∫£n
            const houseInfo = this.getHouseInfo(cityUser.home);
            
            // T√≠nh ng√†y s·ª≠a ch·ªØa cu·ªëi
            const lastRepair = cityUser.lastRepair ? new Date(cityUser.lastRepair) : new Date(cityUser.createdAt);
            const daysSinceRepair = Math.floor((now - lastRepair) / (1000 * 60 * 60 * 24));
            const daysUntilRepair = Math.max(0, 5 - daysSinceRepair);
            
            // Tr·∫°ng th√°i nh√†
            let houseStatus = '';
            if (daysUntilRepair === 0) {
                houseStatus = 'üö® **C·∫¶N S·ª¨A NGAY!** Nh√† c√≥ th·ªÉ b·ªã thu h·ªìi!';
            } else if (daysUntilRepair <= 1) {
                houseStatus = `‚ö†Ô∏è **C·∫ßn s·ª≠a trong ${daysUntilRepair} ng√†y!**`;
            } else {
                houseStatus = `‚úÖ **Nh√† t·ªët** (${daysUntilRepair} ng√†y n·ªØa c·∫ßn s·ª≠a)`;
            }

            // Th√¥ng tin ngh·ªÅ nghi·ªáp
            let jobInfo = '';
            if (cityUser.job) {
                const job = JOB_TYPES[cityUser.job];
                const lastWork = cityUser.lastWork ? new Date(cityUser.lastWork) : null;
                const canWork = !lastWork || (now - lastWork) >= job.cooldown;
                
                jobInfo = `**üíº Ngh·ªÅ nghi·ªáp:** ${job.name}\n` +
                         `**üìù M√¥ t·∫£:** ${job.description}\n` +
                         `**‚è∞ Tr·∫°ng th√°i:** ${canWork ? '‚úÖ C√≥ th·ªÉ l√†m vi·ªác' : '‚è≥ ƒêang ngh·ªâ'}\n` +
                         `**üîÑ Cooldown:** ${this.formatCooldown(job.cooldown)}\n`;
                
                // Th√¥ng tin ti·∫øn ƒë·ªô cho ngh·ªÅ chat
                if (job.workType === 'chat_messages' && cityUser.workProgress > 0) {
                    const progress = cityUser.workProgress || 0;
                    const target = job.targetMessages;
                    const percentage = Math.round((progress / target) * 100);
                    jobInfo += `**üìä Ti·∫øn ƒë·ªô:** ${progress}/${target} tin nh·∫Øn (${percentage}%)\n`;
                }
            } else {
                jobInfo = '**üíº Ngh·ªÅ nghi·ªáp:** Ch∆∞a c√≥\n**üí° Tip:** D√πng `,dangkynghe` ƒë·ªÉ ƒëƒÉng k√Ω ngh·ªÅ!\n';
            }

            // L·ª£i √≠ch c·ªßa nh√†
            const benefits = this.getHouseBenefits(cityUser.home);

            const embed = new EmbedBuilder()
                .setTitle('üè† TH√îNG TIN NH√Ä')
                .setDescription(`**üìã Th√¥ng tin chi ti·∫øt v·ªÅ nh√†**\n\n` +
                    `**üè† Th√¥ng tin c∆° b·∫£n:**\n` +
                    `‚Ä¢ Lo·∫°i nh√†: ${houseInfo.name}\n` +
                    `‚Ä¢ Gi√° thu√™: ${houseInfo.price.toLocaleString()} Rin\n` +
                    `‚Ä¢ S·ª≠a ch·ªØa: ${houseInfo.dailyRepair > 0 ? houseInfo.dailyRepair.toLocaleString() + ' Rin/ng√†y' : 'Mi·ªÖn ph√≠'}\n\n` +
                    `**üîß T√¨nh tr·∫°ng nh√†:**\n` +
                    `‚Ä¢ ${houseStatus}\n` +
                    `‚Ä¢ S·ª≠a ch·ªØa cu·ªëi: ${lastRepair.toLocaleDateString('vi-VN')}\n` +
                    `‚Ä¢ ƒê√£ ·ªü: ${daysSinceRepair} ng√†y\n\n` +
                    jobInfo + '\n' +
                    `**üéØ L·ª£i √≠ch nh√†:**\n${benefits}\n\n` +
                    `**üí∞ S·ªë d∆∞ hi·ªán t·∫°i:** ${userRin.toLocaleString()} Rin`)
                .addFields(
                    { 
                        name: 'üéÆ Ho·∫°t ƒë·ªông c√≥ th·ªÉ l√†m', 
                        value: this.getAvailableActions(cityUser), 
                        inline: false 
                    }
                )
                .setImage(HOUSE_IMAGES[cityUser.home] || null)
                .setColor(daysUntilRepair === 0 ? COLORS.error : daysUntilRepair <= 1 ? COLORS.warning : COLORS.success)
                .setFooter({ 
                    text: daysUntilRepair === 0 ? 
                        '‚ö†Ô∏è H√£y s·ª≠a nh√† ngay ƒë·ªÉ tr√°nh b·ªã thu h·ªìi!' : 
                        'H√£y chƒÉm s√≥c nh√† c·ª≠a th∆∞·ªùng xuy√™n!'
                })
                .setTimestamp();

            await message.reply({ embeds: [embed] });

        } catch (error) {
            console.error('L·ªói nhacheck:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra th√¥ng tin nh√†!');
        }
    },

    // Helper functions
    getHouseInfo(houseType) {
        const houseData = {
            'nhatro': {
                name: 'Nh√† Tr·ªç',
                price: 500,
                dailyRepair: 0,
                emoji: 'üè†'
            },
            'nhatuong': {
                name: 'Nh√† Th∆∞·ªùng',
                price: 2000,
                dailyRepair: 300,
                emoji: 'üèòÔ∏è'
            },
            'bietlau': {
                name: 'Bi·ªát L·∫ßu',
                price: 5000,
                dailyRepair: 1000,
                emoji: 'üèõÔ∏è'
            },
            'bietthu': {
                name: 'Bi·ªát Th·ª±',
                price: 10000,
                dailyRepair: 1500,
                emoji: 'üè∞'
            }
        };
        return houseData[houseType] || { name: 'Kh√¥ng r√µ', price: 0, dailyRepair: 0, emoji: '‚ùì' };
    },

    getHouseBenefits(houseType) {
        const benefits = {
            'nhatro': '‚Ä¢ Cho ph√©p ngh·ªÅ Tr·ªôm\n‚Ä¢ S·ª≠a ch·ªØa mi·ªÖn ph√≠\n‚Ä¢ Kh√¥ng b·ªã ph·∫°t',
            'nhatuong': '‚Ä¢ Cho ph√©p ngh·ªÅ Nh√† B√°o, MC\n‚Ä¢ Bonus EXP +10%\n‚Ä¢ S·ª≠a ch·ªØa 300 Rin/ng√†y',
            'bietlau': '‚Ä¢ Cho ph√©p ngh·ªÅ Nh√† B√°o, MC\n‚Ä¢ Bonus EXP +25%\n‚Ä¢ Bonus Rin +20%\n‚Ä¢ S·ª≠a ch·ªØa 1000 Rin/ng√†y',
            'bietthu': '‚Ä¢ Cho ph√©p ngh·ªÅ C√¥ng An\n‚Ä¢ Bonus EXP +50%\n‚Ä¢ Bonus Rin +40%\n‚Ä¢ ∆Øu ti√™n trong m·ªçi t√≠nh nƒÉng\n‚Ä¢ S·ª≠a ch·ªØa 1500 Rin/ng√†y'
        };
        return benefits[houseType] || '‚Ä¢ Kh√¥ng c√≥ l·ª£i √≠ch ƒë·∫∑c bi·ªát';
    },

    getAvailableActions(cityUser) {
        let actions = [];
        
        // Actions c∆° b·∫£n
        actions.push('‚Ä¢ `,dangkynghe` - ƒêƒÉng k√Ω/xem ngh·ªÅ nghi·ªáp');
        actions.push('‚Ä¢ `,lamviec` - L√†m vi·ªác ki·∫øm ti·ªÅn');
        actions.push('‚Ä¢ `,nhiemvu` - Nh·∫≠n nhi·ªám v·ª•');
        
        // Actions theo ngh·ªÅ
        if (cityUser.job) {
            const job = JOB_TYPES[cityUser.job];
            if (job.workType === 'steal_trees') {
                actions.push('‚Ä¢ `,tromcay @user` - Tr·ªôm c√¢y c·ªßa ng∆∞·ªùi kh√°c');
            } else if (job.workType === 'catch_thieves') {
                actions.push('‚Ä¢ `,battrom @user` - B·∫Øt tr·ªôm (khi c√≥ th√¥ng b√°o)');
            }
        }
        
        // S·ª≠a nh√†
        const now = new Date();
        const lastRepair = cityUser.lastRepair ? new Date(cityUser.lastRepair) : new Date(cityUser.createdAt);
        const daysSinceRepair = Math.floor((now - lastRepair) / (1000 * 60 * 60 * 24));
        
        if (daysSinceRepair >= 5) {
            actions.push('‚Ä¢ `,suanha` - **S·ª¨A NH√Ä NGAY!** (B·∫Øt bu·ªôc)');
        } else {
            actions.push('‚Ä¢ `,suanha` - S·ª≠a nh√† (t√πy ch·ªçn)');
        }
        
        return actions.join('\n');
    },

    formatCooldown(ms) {
        const hours = Math.floor(ms / (60 * 60 * 1000));
        return `${hours} gi·ªù`;
    }
}; 