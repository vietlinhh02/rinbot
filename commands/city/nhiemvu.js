const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { getCityUser, updateCityUser, getUserRin, updateUserRin } = require('../../utils/database');
const { MISSIONS, COLORS, EMOJIS } = require('../../utils/constants');

module.exports = {
    name: 'nhiemvu',
    description: 'Nh·∫≠n v√† th·ª±c hi·ªán nhi·ªám v·ª• ƒë·ªÉ ki·∫øm ti·ªÅn',
    
    async execute(message, args) {
        try {
            const userId = message.author.id;
            const cityUser = await getCityUser(userId);

            if (!cityUser.home) {
                return message.reply('‚ùå B·∫°n c·∫ßn thu√™ nh√† tr∆∞·ªõc khi nh·∫≠n nhi·ªám v·ª•! D√πng `,thuenha` ƒë·ªÉ thu√™ nh√†.');
            }

            // N·∫øu kh√¥ng c√≥ tham s·ªë, hi·ªÉn th·ªã tr·∫°ng th√°i nhi·ªám v·ª•
            if (args.length === 0) {
                return await this.showMissionStatus(message, cityUser);
            }

            const action = args[0].toLowerCase();

            switch (action) {
                case 'list':
                case 'danh':
                    return await this.showMissionList(message, cityUser);
                case 'nhan':
                case 'take':
                    if (args.length < 2) {
                        return message.reply('‚ùå C·∫ßn ch·ªâ ƒë·ªãnh lo·∫°i nhi·ªám v·ª•: `giaohang`, `donvesinh`, `baove`, ho·∫∑c `quanly`');
                    }
                    return await this.takeMission(message, cityUser, args[1]);
                case 'huy':
                case 'cancel':
                    return await this.cancelMission(message, cityUser);
                case 'hoanthanh':
                case 'complete':
                    return await this.completeMission(message, cityUser);
                default:
                    return message.reply('‚ùå H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng: `list`, `nhan <lo·∫°i>`, `huy`, ho·∫∑c `hoanthanh`');
            }

        } catch (error) {
            console.error('L·ªói nhiemvu:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω nhi·ªám v·ª•!');
        }
    },

    // Hi·ªÉn th·ªã tr·∫°ng th√°i nhi·ªám v·ª• hi·ªán t·∫°i
    async showMissionStatus(message, cityUser) {
        const userRin = await getUserRin(message.author.id);
        let statusDescription = '';

        // L√†m m·ªõi d·ªØ li·ªáu cityUser ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ th√¥ng tin m·ªõi nh·∫•t
        const freshCityUser = await getCityUser(message.author.id);

        if (freshCityUser.currentMission) {
            const mission = MISSIONS[freshCityUser.currentMission.type];
            const startTime = new Date(freshCityUser.currentMission.startTime);
            const now = new Date();
            const elapsed = Math.floor((now - startTime) / (60 * 1000)); // ph√∫t
            const remaining = Math.max(0, mission.duration - elapsed);

            if (remaining > 0) {
                statusDescription = `**üìã Nhi·ªám v·ª• ƒëang th·ª±c hi·ªán:**\n` +
                    `${mission.emoji} **${mission.name}**\n` +
                    `‚è∞ C√≤n l·∫°i: **${remaining} ph√∫t**\n` +
                    `üí∞ Th∆∞·ªüng: **${mission.reward.toLocaleString()} Rin**\n\n` +
                    `*D√πng \`,nhiemvu hoanthanh\` khi ho√†n th√†nh!*`;
            } else {
                statusDescription = `**‚úÖ Nhi·ªám v·ª• ho√†n th√†nh!**\n` +
                    `${mission.emoji} **${mission.name}**\n` +
                    `üí∞ Nh·∫≠n th∆∞·ªüng: **${mission.reward.toLocaleString()} Rin**\n\n` +
                    `*D√πng \`,nhiemvu hoanthanh\` ƒë·ªÉ nh·∫≠n th∆∞·ªüng!*`;
            }
        } else {
            statusDescription = `**üíº Ch∆∞a c√≥ nhi·ªám v·ª• n√†o**\n\n` +
                `B·∫°n c√≥ th·ªÉ nh·∫≠n nhi·ªám v·ª• m·ªõi ƒë·ªÉ ki·∫øm ti·ªÅn!\n` +
                `D√πng \`,nhiemvu list\` ƒë·ªÉ xem danh s√°ch nhi·ªám v·ª•.`;
        }

        const embed = new EmbedBuilder()
            .setTitle(`üìã TR·∫†NG TH√ÅI NHI·ªÜM V·ª§ - ${message.author.displayName}`)
            .setDescription(statusDescription)
            .addFields(
                { 
                    name: 'üí∞ S·ªë d∆∞ hi·ªán t·∫°i', 
                    value: `${userRin.toLocaleString()} Rin`, 
                    inline: true 
                },
                { 
                    name: 'üè† Nh√† hi·ªán t·∫°i', 
                    value: this.getHouseName(freshCityUser.home), 
                    inline: true 
                },
                {
                    name: 'üéÆ H∆∞·ªõng d·∫´n',
                    value: '‚Ä¢ `,nhiemvu list` - Xem danh s√°ch\n' +
                           '‚Ä¢ `,nhiemvu nhan <lo·∫°i>` - Nh·∫≠n nhi·ªám v·ª•\n' +
                           '‚Ä¢ `,nhiemvu huy` - H·ªßy nhi·ªám v·ª•\n' +
                           '‚Ä¢ `,nhiemvu hoanthanh` - Ho√†n th√†nh',
                    inline: false
                }
            )
            .setColor(freshCityUser.currentMission ? COLORS.warning : COLORS.info)
            .setFooter({ text: 'L√†m nhi·ªám v·ª• ƒë·ªÉ ki·∫øm Rin!' })
            .setTimestamp();

        await message.reply({ embeds: [embed] });
    },

    // Hi·ªÉn th·ªã danh s√°ch nhi·ªám v·ª•
    async showMissionList(message, cityUser) {
        let missionList = '';
        
        Object.entries(MISSIONS).forEach(([type, mission]) => {
            const available = !cityUser.currentMission ? '‚úÖ' : '‚ùå';
            missionList += `${mission.emoji} **${mission.name}** ${available}\n`;
            missionList += `‚îî ${mission.description}\n`;
            missionList += `‚îî Th·ªùi gian: ${mission.duration} ph√∫t\n`;
            missionList += `‚îî Th∆∞·ªüng: ${mission.reward.toLocaleString()} Rin\n\n`;
        });

        const embed = new EmbedBuilder()
            .setTitle('üìã DANH S√ÅCH NHI·ªÜM V·ª§')
            .setDescription(`**C√°c nhi·ªám v·ª• c√≥ th·ªÉ nh·∫≠n:**\n\n${missionList}` +
                `**üí° C√°ch nh·∫≠n nhi·ªám v·ª•:**\n` +
                `‚Ä¢ \`,nhiemvu nhan giaohang\` - Giao h√†ng (30p)\n` +
                `‚Ä¢ \`,nhiemvu nhan donvesinh\` - D·ªçn v·ªá sinh (60p)\n` +
                `‚Ä¢ \`,nhiemvu nhan baove\` - B·∫£o v·ªá (120p)\n` +
                `‚Ä¢ \`,nhiemvu nhan quanly\` - Qu·∫£n l√Ω (240p)\n\n` +
                `‚ö†Ô∏è **L∆∞u √Ω:** Ch·ªâ c√≥ th·ªÉ nh·∫≠n 1 nhi·ªám v·ª• t·∫°i m·ªôt th·ªùi ƒëi·ªÉm!`)
            .setColor(COLORS.city)
            .setFooter({ text: 'Th·ªùi gian c√†ng d√†i = th∆∞·ªüng c√†ng cao!' });

        await message.reply({ embeds: [embed] });
    },

    // Nh·∫≠n nhi·ªám v·ª• m·ªõi
    async takeMission(message, cityUser, missionType) {
        // L√†m m·ªõi d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i m·ªõi nh·∫•t
        const freshCityUser = await getCityUser(message.author.id);
        
        if (freshCityUser.currentMission) {
            const currentMission = MISSIONS[freshCityUser.currentMission.type];
            return message.reply(`‚ùå B·∫°n ƒëang th·ª±c hi·ªán nhi·ªám v·ª• **${currentMission.name}**! H√£y ho√†n th√†nh ho·∫∑c h·ªßy nhi·ªám v·ª• hi·ªán t·∫°i tr∆∞·ªõc.`);
        }

        const mission = MISSIONS[missionType.toLowerCase()];
        if (!mission) {
            return message.reply('‚ùå Lo·∫°i nhi·ªám v·ª• kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng: `giaohang`, `donvesinh`, `baove`, ho·∫∑c `quanly`');
        }

        // T·∫°o button x√°c nh·∫≠n
        const confirmButton = new ButtonBuilder()
            .setCustomId(`mission_confirm_${missionType}_${message.author.id}`)
            .setLabel(`${mission.emoji} Nh·∫≠n nhi·ªám v·ª•`)
            .setStyle(ButtonStyle.Success);

        const cancelButton = new ButtonBuilder()
            .setCustomId(`mission_cancel_${message.author.id}`)
            .setLabel('‚ùå H·ªßy b·ªè')
            .setStyle(ButtonStyle.Secondary);

        const row = new ActionRowBuilder().addComponents(confirmButton, cancelButton);

        const embed = new EmbedBuilder()
            .setTitle(`üìã X√ÅC NH·∫¨N NH·∫¨N NHI·ªÜM V·ª§`)
            .setDescription(`${mission.emoji} **${mission.name}**\n\n` +
                `**üìù M√¥ t·∫£:** ${mission.description}\n` +
                `**‚è∞ Th·ªùi gian:** ${mission.duration} ph√∫t\n` +
                `**üí∞ Th∆∞·ªüng:** ${mission.reward.toLocaleString()} Rin\n\n` +
                `**B·∫°n c√≥ mu·ªën nh·∫≠n nhi·ªám v·ª• n√†y kh√¥ng?**`)
            .setColor(COLORS.warning)
            .setFooter({ text: 'Quy·∫øt ƒë·ªãnh trong 30 gi√¢y!' })
            .setTimestamp();

        await message.reply({ embeds: [embed], components: [row] });
    },

    // H·ªßy nhi·ªám v·ª• hi·ªán t·∫°i
    async cancelMission(message, cityUser) {
        // L√†m m·ªõi d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i m·ªõi nh·∫•t
        const freshCityUser = await getCityUser(message.author.id);
        
        if (!freshCityUser.currentMission) {
            return message.reply('‚ùå B·∫°n kh√¥ng c√≥ nhi·ªám v·ª• n√†o ƒë·ªÉ h·ªßy!');
        }

        const mission = MISSIONS[freshCityUser.currentMission.type];
        
        // T·∫°o button x√°c nh·∫≠n h·ªßy
        const confirmButton = new ButtonBuilder()
            .setCustomId(`mission_cancel_confirm_${message.author.id}`)
            .setLabel('‚ö†Ô∏è X√°c nh·∫≠n h·ªßy')
            .setStyle(ButtonStyle.Danger);

        const keepButton = new ButtonBuilder()
            .setCustomId(`mission_cancel_keep_${message.author.id}`)
            .setLabel('‚úÖ Ti·∫øp t·ª•c l√†m')
            .setStyle(ButtonStyle.Success);

        const row = new ActionRowBuilder().addComponents(confirmButton, keepButton);

        const embed = new EmbedBuilder()
            .setTitle('‚ö†Ô∏è X√ÅC NH·∫¨N H·ª¶Y NHI·ªÜM V·ª§')
            .setDescription(`B·∫°n ƒëang th·ª±c hi·ªán nhi·ªám v·ª•:\n` +
                `${mission.emoji} **${mission.name}**\n\n` +
                `**‚ö†Ô∏è C·∫£nh b√°o:** H·ªßy nhi·ªám v·ª• s·∫Ω m·∫•t to√†n b·ªô ti·∫øn ƒë·ªô!\n` +
                `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy kh√¥ng?`)
            .setColor(COLORS.error)
            .setFooter({ text: 'Quy·∫øt ƒë·ªãnh trong 30 gi√¢y!' });

        await message.reply({ embeds: [embed], components: [row] });
    },

    // Ho√†n th√†nh nhi·ªám v·ª•
    async completeMission(message, cityUser) {
        // L√†m m·ªõi d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i m·ªõi nh·∫•t
        const freshCityUser = await getCityUser(message.author.id);
        
        if (!freshCityUser.currentMission) {
            return message.reply('‚ùå B·∫°n kh√¥ng c√≥ nhi·ªám v·ª• n√†o ƒë·ªÉ ho√†n th√†nh!');
        }

        const mission = MISSIONS[freshCityUser.currentMission.type];
        const startTime = new Date(freshCityUser.currentMission.startTime);
        const now = new Date();
        const elapsed = Math.floor((now - startTime) / (60 * 1000)); // ph√∫t

        if (elapsed < mission.duration) {
            const remaining = mission.duration - elapsed;
            return message.reply(`‚è∞ Nhi·ªám v·ª• ch∆∞a ho√†n th√†nh! C√≤n l·∫°i **${remaining} ph√∫t** n·ªØa.`);
        }

        // T√≠nh th∆∞·ªüng v·ªõi bonus theo lo·∫°i nh√†
        let reward = mission.reward;
        const houseBonus = this.getHouseBonus(freshCityUser.home);
        const bonusAmount = Math.floor(reward * houseBonus);
        const totalReward = reward + bonusAmount;

        // C·∫≠p nh·∫≠t ti·ªÅn v√† x√≥a nhi·ªám v·ª•
        await updateUserRin(message.author.id, totalReward);
        await updateCityUser(message.author.id, { 
            currentMission: null,
            completedMissions: (freshCityUser.completedMissions || 0) + 1
        });

        const embed = new EmbedBuilder()
            .setTitle('üéâ HO√ÄN TH√ÄNH NHI·ªÜM V·ª§!')
            .setDescription(`${mission.emoji} **${mission.name}** ƒë√£ ho√†n th√†nh!\n\n` +
                `**üí∞ Th∆∞·ªüng c∆° b·∫£n:** ${reward.toLocaleString()} Rin\n` +
                `**üè† Bonus nh√†:** +${bonusAmount.toLocaleString()} Rin (${Math.round(houseBonus * 100)}%)\n` +
                `**üíé T·ªïng nh·∫≠n:** ${totalReward.toLocaleString()} Rin\n\n` +
                `**üìä Th·ªëng k√™:**\n` +
                `‚Ä¢ Nhi·ªám v·ª• ho√†n th√†nh: ${(freshCityUser.completedMissions || 0) + 1}\n` +
                `‚Ä¢ Th·ªùi gian th·ª±c hi·ªán: ${elapsed} ph√∫t\n\n` +
                `**Ch√∫c m·ª´ng b·∫°n! üéä**`)
            .setColor(COLORS.success)
            .setFooter({ text: 'H√£y nh·∫≠n nhi·ªám v·ª• m·ªõi ƒë·ªÉ ti·∫øp t·ª•c ki·∫øm ti·ªÅn!' })
            .setTimestamp();

        await message.reply({ embeds: [embed] });
    },

    // X·ª≠ l√Ω button interactions
    async handleInteraction(interaction) {
        if (!interaction.customId.startsWith('mission_')) return;

        const parts = interaction.customId.split('_');
        const action = parts[1]; // confirm, cancel
        const userId = parts[parts.length - 1];

        if (interaction.user.id !== userId) {
            return interaction.reply({ content: '‚ùå Ch·ªâ ng∆∞·ªùi nh·∫≠n nhi·ªám v·ª• m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán!', ephemeral: true });
        }

        try {
            const cityUser = await getCityUser(userId);

            if (action === 'confirm') {
                const missionType = parts[2];
                const mission = MISSIONS[missionType];

                if (cityUser.currentMission) {
                    return interaction.reply({ content: '‚ùå B·∫°n ƒë√£ c√≥ nhi·ªám v·ª• r·ªìi!', ephemeral: true });
                }

                // Nh·∫≠n nhi·ªám v·ª•
                await updateCityUser(userId, {
                    currentMission: {
                        type: missionType,
                        startTime: new Date()
                    }
                });

                const embed = new EmbedBuilder()
                    .setTitle('‚úÖ NH·∫¨N NHI·ªÜM V·ª§ TH√ÄNH C√îNG!')
                    .setDescription(`${mission.emoji} **${mission.name}**\n\n` +
                        `**‚è∞ Th·ªùi gian:** ${mission.duration} ph√∫t\n` +
                        `**üí∞ Th∆∞·ªüng:** ${mission.reward.toLocaleString()} Rin\n\n` +
                        `**üìù H∆∞·ªõng d·∫´n:**\n` +
                        `‚Ä¢ Ch·ªù ${mission.duration} ph√∫t\n` +
                        `‚Ä¢ D√πng \`,nhiemvu hoanthanh\` ƒë·ªÉ nh·∫≠n th∆∞·ªüng\n` +
                        `‚Ä¢ C√≥ th·ªÉ d√πng \`,nhiemvu huy\` ƒë·ªÉ h·ªßy\n\n` +
                        `**Ch√∫c b·∫°n th√†nh c√¥ng! üí™**`)
                    .setColor(COLORS.success)
                    .setFooter({ text: 'H√£y quay l·∫°i sau khi ho√†n th√†nh!' })
                    .setTimestamp();

                await interaction.reply({ embeds: [embed] });

            } else if (action === 'cancel') {
                if (parts[2] === 'confirm') {
                    // X√°c nh·∫≠n h·ªßy nhi·ªám v·ª•
                    await updateCityUser(userId, { currentMission: null });

                    const embed = new EmbedBuilder()
                        .setTitle('‚ùå ƒê√É H·ª¶Y NHI·ªÜM V·ª§')
                        .setDescription('B·∫°n ƒë√£ h·ªßy nhi·ªám v·ª• hi·ªán t·∫°i.\n\n' +
                            'C√≥ th·ªÉ nh·∫≠n nhi·ªám v·ª• m·ªõi b·∫•t c·ª© l√∫c n√†o!')
                        .setColor(COLORS.error);

                    await interaction.reply({ embeds: [embed] });

                } else if (parts[2] === 'keep') {
                    // Ti·∫øp t·ª•c l√†m nhi·ªám v·ª•
                    const embed = new EmbedBuilder()
                        .setTitle('‚úÖ TI·∫æP T·ª§C NHI·ªÜM V·ª§')
                        .setDescription('B·∫°n ƒë√£ quy·∫øt ƒë·ªãnh ti·∫øp t·ª•c th·ª±c hi·ªán nhi·ªám v·ª•.\n\n' +
                            'H√£y ho√†n th√†nh ƒë·ªÉ nh·∫≠n th∆∞·ªüng!')
                        .setColor(COLORS.success);

                    await interaction.reply({ embeds: [embed] });

                } else {
                    // H·ªßy b·ªè nh·∫≠n nhi·ªám v·ª•
                    const embed = new EmbedBuilder()
                        .setTitle('‚ùå ƒê√É H·ª¶Y NH·∫¨N NHI·ªÜM V·ª§')
                        .setDescription('B·∫°n ƒë√£ quy·∫øt ƒë·ªãnh kh√¥ng nh·∫≠n nhi·ªám v·ª• n√†y.\n\n' +
                            'C√≥ th·ªÉ ch·ªçn nhi·ªám v·ª• kh√°c b·∫•t c·ª© l√∫c n√†o!')
                        .setColor(COLORS.error);

                    await interaction.reply({ embeds: [embed] });
                }
            }

        } catch (error) {
            console.error('L·ªói x·ª≠ l√Ω interaction nhi·ªám v·ª•:', error);
            await interaction.reply({ content: '‚ùå C√≥ l·ªói x·∫£y ra!', ephemeral: true });
        }
    },

    // Helper functions
    getHouseName(houseType) {
        const houseNames = {
            'nhatro': 'Nh√† Tr·ªç',
            'nhatuong': 'Nh√† Th∆∞·ªùng',
            'bietlau': 'Bi·ªát L·∫ßu',
            'bietthu': 'Bi·ªát Th·ª±'
        };
        return houseNames[houseType] || 'Kh√¥ng r√µ';
    },

    getHouseBonus(houseType) {
        const bonuses = {
            'nhatro': 0,      // 0% bonus
            'nhatuong': 0.1,  // 10% bonus
            'bietlau': 0.25,  // 25% bonus 
            'bietthu': 0.5    // 50% bonus
        };
        return bonuses[houseType] || 0;
    }
}; 