const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { getCityUser, updateCityUser, getUserRin, updateUserRin } = require('../../utils/database');
const { HOUSE_IMAGES } = require('../../utils/constants');

// Th√¥ng tin c√°c lo·∫°i nh√† ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin nh√† hi·ªán t·∫°i
const HOUSE_TYPES = {
    'nhatro': {
        name: 'Nh√† Tr·ªç',
        price: 500,
        emoji: 'üè†'
    },
    'nhatuong': {
        name: 'Nh√† Th∆∞·ªùng',
        price: 2000,
        emoji: 'üèòÔ∏è'
    },
    'nhalau': {
        name: 'Nh√† L·∫ßu',
        price: 5000,
        emoji: 'üèõÔ∏è'
    },
    'bietthu': {
        name: 'Bi·ªát Th·ª±',
        price: 8000,
        emoji: 'üè∞'
    }
};

module.exports = {
    name: 'huynha',
    description: 'H·ªßy thu√™ nh√† hi·ªán t·∫°i v√† nh·∫≠n l·∫°i 50% ti·ªÅn',
    
    async execute(message, args) {
        try {
            const userId = message.author.id;
            const cityUser = await getCityUser(userId);

            // Ki·ªÉm tra c√≥ nh√† kh√¥ng
            if (!cityUser.home) {
                return message.reply('‚ùå B·∫°n ch∆∞a thu√™ nh√† n√†o ƒë·ªÉ h·ªßy!');
            }

            const houseInfo = HOUSE_TYPES[cityUser.home];
            if (!houseInfo) {
                return message.reply('‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√†!');
            }

            const refundAmount = Math.floor(houseInfo.price * 0.5); // Ho√†n 50%

            // X√°c nh·∫≠n h·ªßy nh√†
            const embed = new EmbedBuilder()
                .setTitle(`üè† H·ª¶Y THU√ä ${houseInfo.name.toUpperCase()}`)
                .setDescription(`**X√°c nh·∫≠n h·ªßy thu√™ ${houseInfo.name}?**\n\n` +
                    `**üí∞ Ti·ªÅn thu√™ ban ƒë·∫ßu:** ${houseInfo.price} Rin\n` +
                    `**üíµ Ti·ªÅn ho√†n l·∫°i (50%):** ${refundAmount} Rin\n\n` +
                    `‚ö†Ô∏è **C·∫£nh b√°o:**\n` +
                    `‚Ä¢ B·∫°n s·∫Ω m·∫•t to√†n b·ªô ngh·ªÅ nghi·ªáp\n` +
                    `‚Ä¢ M·∫•t c√°c l·ª£i √≠ch c·ªßa nh√†\n` +
                    `‚Ä¢ Ph·∫£i thu√™ nh√† m·ªõi ƒë·ªÉ l√†m vi·ªác ti·∫øp\n\n` +
                    `**B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy thu√™ nh√†?**`)
                .setColor('#FF6B6B')
                .setThumbnail(HOUSE_IMAGES[cityUser.home] || null)
                .setFooter({ text: 'Quy·∫øt ƒë·ªãnh trong 30 gi√¢y!' })
                .setTimestamp();

            const confirmButton = new ButtonBuilder()
                .setCustomId(`cancel_house_confirm_${userId}`)
                .setLabel(`üóëÔ∏è H·ªßy nh√† (nh·∫≠n ${refundAmount} Rin)`)
                .setStyle(ButtonStyle.Danger);

            const cancelButton = new ButtonBuilder()
                .setCustomId(`cancel_house_cancel_${userId}`)
                .setLabel('‚ùå Gi·ªØ l·∫°i nh√†')
                .setStyle(ButtonStyle.Secondary);

            const row = new ActionRowBuilder().addComponents(confirmButton, cancelButton);

            const replyMessage = await message.reply({ embeds: [embed], components: [row] });

            // T·∫°o collector ƒë·ªÉ x·ª≠ l√Ω button interactions
            const collector = replyMessage.createMessageComponentCollector({ 
                time: 30000 // 30 gi√¢y
            });

            collector.on('collect', async (interaction) => {
                await this.handleInteraction(interaction);
            });

            collector.on('end', async () => {
                try {
                    // Disable buttons sau khi h·∫øt th·ªùi gian
                    const disabledRow = new ActionRowBuilder().addComponents(
                        confirmButton.setDisabled(true),
                        cancelButton.setDisabled(true)
                    );
                    await replyMessage.edit({ components: [disabledRow] });
                } catch (error) {
                    console.error('L·ªói khi disable buttons:', error);
                }
            });

        } catch (error) {
            console.error('L·ªói huynha:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi h·ªßy thu√™ nh√†!');
        }
    },

    // X·ª≠ l√Ω button interactions
    async handleInteraction(interaction) {
        try {
            if (!interaction.customId.startsWith('cancel_house_')) return;

            const parts = interaction.customId.split('_');
            const result = parts[2]; // confirm ho·∫∑c cancel
            const userId = parts[3];
            
            if (interaction.user.id !== userId) {
                return await interaction.reply({ content: '‚ùå Ch·ªâ ng∆∞·ªùi thu√™ m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán!', ephemeral: true });
            }

            if (result === 'confirm') {
                try {
                    const cityUser = await getCityUser(userId);

                    if (!cityUser.home) {
                        return await interaction.reply({ content: '‚ùå B·∫°n kh√¥ng c√≥ nh√† ƒë·ªÉ h·ªßy!', ephemeral: true });
                    }

                    const houseInfo = HOUSE_TYPES[cityUser.home];
                    if (!houseInfo) {
                        return await interaction.reply({ content: '‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√†!', ephemeral: true });
                    }

                    const refundAmount = Math.floor(houseInfo.price * 0.5);
                    const oldHouseThumbnail = HOUSE_IMAGES[cityUser.home] || null;

                    console.log(`üè† DEBUG: User ${userId} h·ªßy nh√† ${cityUser.home}`);

                    // Ho√†n ti·ªÅn v√† x√≥a nh√†, ngh·ªÅ
                    try {
                        await updateUserRin(userId, refundAmount);
                        
                        const updateResult = await updateCityUser(userId, {
                            home: null,
                            job: null,
                            workProgress: 0,
                            lastWork: null,
                            workStartTime: null,
                            lastRepair: null,
                            dailyMoneySteal: 0
                        });

                        console.log(`üè† DEBUG: K·∫øt qu·∫£ update:`, updateResult ? 'th√†nh c√¥ng' : 'th·∫•t b·∫°i');
                    } catch (updateError) {
                        console.error(`‚ùå L·ªñI UPDATE DATABASE:`, updateError);
                        return await interaction.reply({ 
                            content: '‚ùå C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t database! Vui l√≤ng th·ª≠ l·∫°i sau.', 
                            ephemeral: true 
                        });
                    }

                    // Ki·ªÉm tra l·∫°i ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√£ x√≥a th√†nh c√¥ng
                    const verifyUser = await getCityUser(userId);
                    console.log(`üè† DEBUG: Verify user sau khi x√≥a:`, { home: verifyUser.home, job: verifyUser.job });

                    // Ki·ªÉm tra xem update c√≥ th√†nh c√¥ng kh√¥ng
                    if (verifyUser.home !== null || verifyUser.job !== null) {
                        console.error(`‚ùå L·ªñI: Update database th·∫•t b·∫°i! User v·∫´n c√≥ home=${verifyUser.home}, job=${verifyUser.job}`);
                        return await interaction.reply({ 
                            content: '‚ùå C√≥ l·ªói x·∫£y ra khi h·ªßy nh√†! Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.', 
                            ephemeral: true 
                        });
                    }

                    const embed = new EmbedBuilder()
                        .setTitle('‚úÖ H·ª¶Y THU√ä NH√Ä TH√ÄNH C√îNG!')
                        .setDescription(`**${houseInfo.name}** ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng! üè†\n\n` +
                            `**üíµ Ti·ªÅn ho√†n l·∫°i:** ${refundAmount} Rin\n\n` +
                            `**üìã T√¨nh tr·∫°ng hi·ªán t·∫°i:**\n` +
                            `‚Ä¢ Nh√†: Kh√¥ng c√≥\n` +
                            `‚Ä¢ Ngh·ªÅ: Kh√¥ng c√≥\n\n` +
                            `**üéØ B∆∞·ªõc ti·∫øp theo:**\n` +
                            `‚Ä¢ D√πng \`,thuenha\` ƒë·ªÉ thu√™ nh√† m·ªõi\n` +
                            `‚Ä¢ Sau ƒë√≥ d√πng \`,dangkynghe\` ƒë·ªÉ ch·ªçn ngh·ªÅ`)
                        .setColor('#00FF00')
                        .setThumbnail(oldHouseThumbnail)
                        .setFooter({ text: 'C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• thu√™ nh√†!' })
                        .setTimestamp();

                    // Update message ƒë·ªÉ x√≥a buttons
                    try {
                        if (!interaction.replied && !interaction.deferred) {
                            await interaction.update({ embeds: [embed], components: [] });
                        }
                    } catch (updateError) {
                        console.error('L·ªói update interaction:', updateError);
                        // N·∫øu kh√¥ng update ƒë∆∞·ª£c th√¨ th·ª≠ reply
                        if (!interaction.replied && !interaction.deferred) {
                            await interaction.reply({ embeds: [embed], components: [], ephemeral: true });
                        }
                    }

                } catch (error) {
                    console.error('L·ªói x·ª≠ l√Ω h·ªßy nh√†:', error);
                    await interaction.reply({ content: '‚ùå C√≥ l·ªói x·∫£y ra!', ephemeral: true });
                }

            } else {
                // H·ªßy b·ªè h·ªßy nh√†
                const embed = new EmbedBuilder()
                    .setTitle('‚ùå ƒê√É H·ª¶Y THAO T√ÅC')
                    .setDescription('B·∫°n ƒë√£ quy·∫øt ƒë·ªãnh gi·ªØ l·∫°i nh√† hi·ªán t·∫°i. Nh√† c·ªßa b·∫°n v·∫´n an to√†n!')
                    .setColor('#6C757D');

                // Update message ƒë·ªÉ x√≥a buttons
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.update({ embeds: [embed], components: [] });
                }
            }
        } catch (error) {
            console.error('L·ªói x·ª≠ l√Ω interaction huynha:', error);
            try {
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({ content: '‚ùå C√≥ l·ªói x·∫£y ra!', ephemeral: true });
                } else if (interaction.deferred) {
                    await interaction.editReply({ content: '‚ùå C√≥ l·ªói x·∫£y ra!' });
                }
            } catch (replyError) {
                console.error('L·ªói khi reply interaction:', replyError);
            }
        }
    }
}; 