const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { getCityUser, updateCityUser, getUserRin, updateUserRin } = require('../../utils/database');
const { HOUSE_IMAGES } = require('../../utils/constants');

// Th√¥ng tin c√°c lo·∫°i nh√† ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin nh√† hi·ªán t·∫°i
const HOUSE_TYPES = {
    'nhatro': {
        name: 'Nh√† Tr·ªç',
        price: 500,
        emoji: 'üè†'
    },
    'nhatuong': {
        name: 'Nh√† Th∆∞·ªùng',
        price: 2000,
        emoji: 'üèòÔ∏è'
    },
    'nhalau': {
        name: 'Nh√† L·∫ßu',
        price: 5000,
        emoji: 'üèõÔ∏è'
    },
    'bietthu': {
        name: 'Bi·ªát Th·ª±',
        price: 8000,
        emoji: 'üè∞'
    }
};

module.exports = {
    name: 'huynha',
    description: 'H·ªßy thu√™ nh√† hi·ªán t·∫°i v√† nh·∫≠n l·∫°i 50% ti·ªÅn',
    
    async execute(message, args) {
        try {
            const userId = message.author.id;
            const cityUser = await getCityUser(userId);

            // Ki·ªÉm tra c√≥ nh√† kh√¥ng
            if (!cityUser.home) {
                return message.reply('‚ùå B·∫°n ch∆∞a thu√™ nh√† n√†o ƒë·ªÉ h·ªßy!');
            }

            const houseInfo = HOUSE_TYPES[cityUser.home];
            if (!houseInfo) {
                return message.reply('‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√†!');
            }

            const refundAmount = Math.floor(houseInfo.price * 0.5); // Ho√†n 50%

            // X√°c nh·∫≠n h·ªßy nh√†
            const embed = new EmbedBuilder()
                .setTitle(`üè† H·ª¶Y THU√ä ${houseInfo.name.toUpperCase()}`)
                .setDescription(`**X√°c nh·∫≠n h·ªßy thu√™ ${houseInfo.name}?**\n\n` +
                    `**üí∞ Ti·ªÅn thu√™ ban ƒë·∫ßu:** ${houseInfo.price} Rin\n` +
                    `**üíµ Ti·ªÅn ho√†n l·∫°i (50%):** ${refundAmount} Rin\n\n` +
                    `‚ö†Ô∏è **C·∫£nh b√°o:**\n` +
                    `‚Ä¢ B·∫°n s·∫Ω m·∫•t to√†n b·ªô ngh·ªÅ nghi·ªáp\n` +
                    `‚Ä¢ M·∫•t c√°c l·ª£i √≠ch c·ªßa nh√†\n` +
                    `‚Ä¢ Ph·∫£i thu√™ nh√† m·ªõi ƒë·ªÉ l√†m vi·ªác ti·∫øp\n\n` +
                    `**B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy thu√™ nh√†?**`)
                .setColor('#FF6B6B')
                .setThumbnail(HOUSE_IMAGES[cityUser.home] || null)
                .setFooter({ text: 'Quy·∫øt ƒë·ªãnh trong 30 gi√¢y!' })
                .setTimestamp();

            const confirmButton = new ButtonBuilder()
                .setCustomId(`cancel_house_confirm_${userId}`)
                .setLabel(`üóëÔ∏è H·ªßy nh√† (nh·∫≠n ${refundAmount} Rin)`)
                .setStyle(ButtonStyle.Danger);

            const cancelButton = new ButtonBuilder()
                .setCustomId(`cancel_house_cancel_${userId}`)
                .setLabel('‚ùå Gi·ªØ l·∫°i nh√†')
                .setStyle(ButtonStyle.Secondary);

            const row = new ActionRowBuilder().addComponents(confirmButton, cancelButton);

            const replyMessage = await message.reply({ embeds: [embed], components: [row] });

            // T·∫°o collector ƒë·ªÉ x·ª≠ l√Ω button interactions
            const collector = replyMessage.createMessageComponentCollector({ 
                time: 30000, // 30 gi√¢y
                max: 1 // Ch·ªâ x·ª≠ l√Ω 1 l·∫ßn
            });

            collector.on('collect', async (interaction) => {
                await this.handleInteraction(interaction);
                collector.stop(); // D·ª´ng collector sau khi x·ª≠ l√Ω xong
            });

            collector.on('end', async () => {
                try {
                    // Disable buttons sau khi h·∫øt th·ªùi gian ho·∫∑c ƒë√£ x·ª≠ l√Ω xong
                    const disabledRow = new ActionRowBuilder().addComponents(
                        confirmButton.setDisabled(true),
                        cancelButton.setDisabled(true)
                    );
                    await replyMessage.edit({ components: [disabledRow] });
                } catch (error) {
                    console.error('L·ªói khi disable buttons:', error);
                }
            });

        } catch (error) {
            console.error('L·ªói huynha:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi h·ªßy thu√™ nh√†!');
        }
    },

    // X·ª≠ l√Ω button interactions
    async handleInteraction(interaction) {
        try {
            if (interaction.customId === 'confirm') {
                // X·ª≠ l√Ω x√°c nh·∫≠n h·ªßy nh√†
                const cityUser = await getCityUser(interaction.user.id);
                if (!cityUser || !cityUser.home) {
                    await interaction.reply({
                        content: '‚ùå B·∫°n ch∆∞a c√≥ nh√† ƒë·ªÉ h·ªßy!',
                        ephemeral: true
                    });
                    return;
                }

                // C·∫≠p nh·∫≠t th√¥ng tin user
                const updateResult = await updateCityUser(interaction.user.id, {
                    home: null,
                    job: null
                });

                console.log('üè† DEBUG: K·∫øt qu·∫£ update:', updateResult ? 'th√†nh c√¥ng' : 'th·∫•t b·∫°i');

                // Verify l·∫°i th√¥ng tin sau khi update
                const verifyUser = await getCityUser(interaction.user.id);
                console.log('üè† DEBUG: Verify user sau khi x√≥a:', {
                    home: verifyUser?.home,
                    job: verifyUser?.job
                });

                // C·∫≠p nh·∫≠t message v·ªõi th√¥ng b√°o th√†nh c√¥ng
                await interaction.update({
                    content: '‚úÖ ƒê√£ h·ªßy nh√† th√†nh c√¥ng!',
                    components: []
                });
            } else if (interaction.customId === 'cancel') {
                // C·∫≠p nh·∫≠t message v·ªõi th√¥ng b√°o h·ªßy
                await interaction.update({
                    content: '‚ùå ƒê√£ h·ªßy thao t√°c!',
                    components: []
                });
            }
        } catch (error) {
            console.error('L·ªói x·ª≠ l√Ω h·ªßy nh√†:', error);
            // N·∫øu interaction ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω, g·ª≠i th√¥ng b√°o l·ªói
            if (!interaction.replied && !interaction.deferred) {
                await interaction.reply({
                    content: '‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu!',
                    ephemeral: true
                });
            }
        }
    }
}; 