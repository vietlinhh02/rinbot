const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { getCityUser, updateCityUser, getUserRin, updateUserRin } = require('../../utils/database');
const { JOB_TYPES, JOB_IMAGES, COLORS } = require('../../utils/constants');

module.exports = {
    name: 'dangkynghe',
    description: 'ƒêƒÉng k√Ω ngh·ªÅ nghi·ªáp ƒë·ªÉ l√†m vi·ªác ki·∫øm ti·ªÅn',
    
    async execute(message, args) {
        try {
            const userId = message.author.id;
            const cityUser = await getCityUser(userId);

            if (!cityUser.home) {
                return message.reply('‚ùå B·∫°n c·∫ßn thu√™ nh√† tr∆∞·ªõc khi ƒëƒÉng k√Ω ngh·ªÅ nghi·ªáp! D√πng `,thuenha` ƒë·ªÉ thu√™ nh√†.');
            }

            // N·∫øu kh√¥ng c√≥ tham s·ªë, hi·ªÉn th·ªã danh s√°ch ngh·ªÅ
            if (args.length === 0) {
                return await this.showJobList(message, cityUser);
            }

            // L·ªánh ngh·ªâ vi·ªác ph·∫£i ƒë·∫∑t tr∆∞·ªõc ki·ªÉm tra jobType
            if (args[0] && args[0].toLowerCase() === 'nghiviec') {
                if (!cityUser.job) {
                    return message.reply('‚ùå B·∫°n ch∆∞a c√≥ ngh·ªÅ ƒë·ªÉ ngh·ªâ!');
                }
                await updateUserRin(userId, 50);
                await updateCityUser(userId, { job: null, workProgress: 0, lastWork: null, workStartTime: null });
                return message.reply('‚úÖ B·∫°n ƒë√£ ngh·ªâ vi·ªác th√†nh c√¥ng v√† nh·∫≠n 50 Rin tr·ª£ c·∫•p. H√£y ch·ªçn ngh·ªÅ m·ªõi n·∫øu mu·ªën!');
            }

            const jobType = args[0].toLowerCase();
            const jobInfo = JOB_TYPES[jobType];

            if (!jobInfo) {
                return message.reply('‚ùå Ngh·ªÅ nghi·ªáp kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng: `trom`, `nhabao`, `mc`, ho·∫∑c `congan`');
            }

            // Ki·ªÉm tra y√™u c·∫ßu nh√†
            if (!jobInfo.requiredHouse.includes(cityUser.home)) {
                const requiredHouses = jobInfo.requiredHouse.map(house => {
                    const houseNames = {
                        'nhatro': 'Nh√† Tr·ªç',
                        'nhatuong': 'Nh√† Th∆∞·ªùng', 
                        'bietlau': 'Bi·ªát L·∫ßu',
                        'bietthu': 'Bi·ªát Th·ª±'
                    };
                    return houseNames[house];
                }).join(', ');
                
                return message.reply(`‚ùå Ngh·ªÅ **${jobInfo.name}** y√™u c·∫ßu: ${requiredHouses}\nB·∫°n hi·ªán ƒëang ·ªü: ${this.getHouseName(cityUser.home)}`);
            }

            // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ ngh·ªÅ
            if (cityUser.job) {
                if (cityUser.job === jobType) {
                    return message.reply(`üíº B·∫°n ƒë√£ l√†m ngh·ªÅ **${jobInfo.name}** r·ªìi!`);
                } else {
                    return message.reply(`‚ùå B·∫°n ƒë√£ c√≥ ngh·ªÅ **${JOB_TYPES[cityUser.job].name}**! H√£y ngh·ªâ vi·ªác tr∆∞·ªõc khi ƒëƒÉng k√Ω ngh·ªÅ m·ªõi.`);
                }
            }

            // X√°c nh·∫≠n ƒëƒÉng k√Ω ngh·ªÅ
            const embed = new EmbedBuilder()
                .setTitle(`üíº ƒêƒÇNG K√ù NGH·ªÄ ${jobInfo.name.toUpperCase()}`)
                .setDescription(`**X√°c nh·∫≠n ƒëƒÉng k√Ω ngh·ªÅ ${jobInfo.name}?**\n\n` +
                    `**üìù M√¥ t·∫£:** ${jobInfo.description}\n\n` +
                    `**‚ö†Ô∏è L∆∞u √Ω ƒë·∫∑c bi·ªát:**\n${this.getJobSpecialInfo(jobType)}\n\n` +
                    `**‚è∞ Cooldown:** ${this.formatCooldown(jobInfo.cooldown)}`)
                .setThumbnail(JOB_IMAGES[jobType] || null)
                .setColor(COLORS.city)
                .setFooter({ text: 'Quy·∫øt ƒë·ªãnh trong 30 gi√¢y!' })
                .setTimestamp();

            const confirmButton = new ButtonBuilder()
                .setCustomId(`job_apply_confirm_${jobType}_${userId}`)
                .setLabel(`üíº ƒêƒÉng k√Ω ${jobInfo.name}`)
                .setStyle(ButtonStyle.Success);

            const cancelButton = new ButtonBuilder()
                .setCustomId(`job_apply_cancel_${userId}`)
                .setLabel('‚ùå H·ªßy b·ªè')
                .setStyle(ButtonStyle.Secondary);

            const row = new ActionRowBuilder().addComponents(confirmButton, cancelButton);

            await message.reply({ embeds: [embed], components: [row] });

        } catch (error) {
            console.error('L·ªói dangkynghe:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω ngh·ªÅ nghi·ªáp!');
        }
    },

    // Hi·ªÉn th·ªã danh s√°ch ngh·ªÅ nghi·ªáp
    async showJobList(message, cityUser) {
        const userRin = await getUserRin(message.author.id);
        
        let jobList = '';
        Object.entries(JOB_TYPES).forEach(([type, info]) => {
            const canApply = info.requiredHouse.includes(cityUser.home) ? '‚úÖ' : '‚ùå';
            const current = cityUser.job === type ? ' ‚≠ê **ƒêANG L√ÄM**' : '';
            jobList += `üíº **${info.name}** ${canApply}${current}\n`;
            jobList += `‚îî ${info.description}\n`;
            jobList += `‚îî Y√™u c·∫ßu: ${this.formatRequiredHouses(info.requiredHouse)}\n\n`;
        });

        const embed = new EmbedBuilder()
            .setTitle('üíº DANH S√ÅCH NGH·ªÄ NGHI·ªÜP')
            .setDescription(`**üë§ Ng∆∞·ªùi xin vi·ªác:** ${message.author.displayName}\n` +
                `**üè† Nh√† hi·ªán t·∫°i:** ${this.getHouseName(cityUser.home)}\n` +
                `**üíº Ngh·ªÅ hi·ªán t·∫°i:** ${cityUser.job ? JOB_TYPES[cityUser.job].name : 'Ch∆∞a c√≥'}\n\n` +
                jobList +
                `**üí° C√°ch s·ª≠ d·ª•ng:**\n` +
                `‚Ä¢ \",dangkynghe trom\" - ƒêƒÉng k√Ω ngh·ªÅ Tr·ªôm\n` +
                `‚Ä¢ \",dangkynghe nhabao\" - ƒêƒÉng k√Ω ngh·ªÅ Nh√† B√°o\n` +
                `‚Ä¢ \",dangkynghe mc\" - ƒêƒÉng k√Ω ngh·ªÅ MC\n` +
                `‚Ä¢ \",dangkynghe congan\" - ƒêƒÉng k√Ω ngh·ªÅ C√¥ng An\n\n` +
                `‚ö†Ô∏è **L∆∞u √Ω:** M·ªói ngh·ªÅ c√≥ c√°ch l√†m vi·ªác kh√°c nhau!`)
            .setColor(COLORS.city)
            .setFooter({ text: 'Ch·ªçn ngh·ªÅ ph√π h·ª£p v·ªõi nh√† c·ªßa b·∫°n!' });
        if (cityUser.job && JOB_IMAGES[cityUser.job]) {
            embed.setThumbnail(JOB_IMAGES[cityUser.job]);
        }

        await message.reply({ embeds: [embed] });
    },

    // Helper functions
    getHouseName(houseType) {
        const houseNames = {
            'nhatro': 'Nh√† Tr·ªç',
            'nhatuong': 'Nh√† Th∆∞·ªùng',
            'nhalau': 'Nh√† L·∫ßu', 
            'bietthu': 'Bi·ªát Th·ª±'
        };
        return houseNames[houseType] || 'Kh√¥ng r√µ';
    },

    formatRequiredHouses(houses) {
        return houses.map(house => this.getHouseName(house)).join(', ');
    },

    formatCooldown(ms) {
        const hours = Math.floor(ms / (60 * 60 * 1000));
        return `${hours} gi·ªù`;
    },

    getJobSpecialInfo(jobType) {
        const specialInfo = {
            'trom': '‚Ä¢ Ch·ªâ tr·ªôm ƒë∆∞·ª£c c√¢y c·ªßa ng∆∞·ªùi kh√°c ƒë√£ tr·ªìng\n‚Ä¢ C√≥ th·ªÉ b·ªã c√¥ng an b·∫Øt trong 10 ph√∫t\n‚Ä¢ R·ªßi ro cao nh∆∞ng l·ª£i nhu·∫≠n l·ªõn',
            'nhabao': '‚Ä¢ C·∫ßn chat 50 tin nh·∫Øn trong server ƒë·ªÉ ho√†n th√†nh\n‚Ä¢ M·ªói tin nh·∫Øn ƒë∆∞·ª£c 5 Rin\n‚Ä¢ C√¥ng vi·ªác an to√†n, thu nh·∫≠p ·ªïn ƒë·ªãnh',
            'mc': '‚Ä¢ C·∫ßn ng·ªìi room voice ƒë·ªß 15 ph√∫t/ng√†y ƒë·ªÉ nh·∫≠n th∆∞·ªüng\n‚Ä¢ Thu nh·∫≠p 120 Rin/ng√†y, kh√¥ng c·∫ßn chat',
            'congan': '‚Ä¢ Nh·∫≠n th√¥ng b√°o khi c√≥ tr·ªôm ho·∫°t ƒë·ªông\n‚Ä¢ C√≥ 10 ph√∫t ƒë·ªÉ b·∫Øt tr·ªôm\n‚Ä¢ Ph·∫£i gi·∫£i ƒë·ªë m·ªõi b·∫Øt ƒë∆∞·ª£c, sai = th·∫•t b·∫°i'
        };
        return specialInfo[jobType] || '';
    },

    // X·ª≠ l√Ω button interactions
    async handleInteraction(interaction) {
        if (!interaction.customId.startsWith('job_apply_')) return;

        const parts = interaction.customId.split('_');
        const result = parts[2]; // confirm ho·∫∑c cancel
        const userId = parts[parts.length - 1];
        
        if (interaction.user.id !== userId) {
            return interaction.reply({ content: '‚ùå Ch·ªâ ng∆∞·ªùi ƒëƒÉng k√Ω m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán!', ephemeral: true });
        }

        if (result === 'confirm') {
            const jobType = parts[3];
            const jobInfo = JOB_TYPES[jobType];

            try {
                const cityUser = await getCityUser(userId);

                if (cityUser.job) {
                    return interaction.reply({ content: '‚ùå B·∫°n ƒë√£ c√≥ ngh·ªÅ r·ªìi!', ephemeral: true });
                }

                if (!jobInfo.requiredHouse.includes(cityUser.home)) {
                    return interaction.reply({ content: '‚ùå Nh√† c·ªßa b·∫°n kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán cho ngh·ªÅ n√†y!', ephemeral: true });
                }

                // C·∫≠p nh·∫≠t ngh·ªÅ nghi·ªáp
                await updateCityUser(userId, {
                    job: jobType,
                    workProgress: 0, // Reset progress
                    lastWork: null
                });

                const embed = new EmbedBuilder()
                    .setTitle('üéâ ƒêƒÇNG K√ù NGH·ªÄ TH√ÄNH C√îNG!')
                    .setDescription(`**Ngh·ªÅ nghi·ªáp:** ${jobInfo.name} üíº\n\n` +
                        `**üìù M√¥ t·∫£:** ${jobInfo.description}\n\n` +
                        `**üéØ B∆∞·ªõc ti·∫øp theo:**\n${this.getNextSteps(jobType)}\n\n` +
                        `**‚è∞ Cooldown:** ${this.formatCooldown(jobInfo.cooldown)}\n\n` +
                        `**Ch√∫c m·ª´ng b·∫°n c√≥ vi·ªác l√†m m·ªõi! üéä**`)
                    .setThumbnail(JOB_IMAGES[jobType] || null)
                    .setColor(COLORS.success)
                    .setFooter({ text: 'H√£y l√†m vi·ªác chƒÉm ch·ªâ ƒë·ªÉ ki·∫øm nhi·ªÅu Rin!' })
                    .setTimestamp();

                // Update message ƒë·ªÉ x√≥a buttons
                await interaction.update({ embeds: [embed], components: [] });

            } catch (error) {
                console.error('L·ªói x√°c nh·∫≠n ƒëƒÉng k√Ω ngh·ªÅ:', error);
                await interaction.reply({ content: '‚ùå C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω ngh·ªÅ!', ephemeral: true });
            }

        } else {
            // H·ªßy b·ªè
            const embed = new EmbedBuilder()
                .setTitle('‚ùå ƒê√É H·ª¶Y ƒêƒÇNG K√ù NGH·ªÄ')
                .setDescription('B·∫°n ƒë√£ quy·∫øt ƒë·ªãnh kh√¥ng ƒëƒÉng k√Ω ngh·ªÅ. H√£y c√¢n nh·∫Øc v√† quay l·∫°i sau!')
                .setColor('#6C757D');

            // Update message ƒë·ªÉ x√≥a buttons
            await interaction.update({ embeds: [embed], components: [] });
        }
    },

    getNextSteps(jobType) {
        const nextSteps = {
            'trom': '‚Ä¢ D√πng `,lamviec` ƒë·ªÉ t√¨m v√† tr·ªôm c√¢y\n‚Ä¢ C·∫©n th·∫≠n v·ªõi c√¥ng an!',
            'nhabao': '‚Ä¢ D√πng `,lamviec` ƒë·ªÉ b·∫Øt ƒë·∫ßu ca l√†m\n‚Ä¢ Chat 50 tin nh·∫Øn ƒë·ªÉ ho√†n th√†nh',
            'mc': '‚Ä¢ D√πng `,lamviec` ƒë·ªÉ b·∫Øt ƒë·∫ßu ca l√†m\n‚Ä¢ V√†o room voice v√† ng·ªìi ƒë·ªß 15 ph√∫t ƒë·ªÉ nh·∫≠n th∆∞·ªüng', 
            'congan': '‚Ä¢ Lu√¥n s·∫µn s√†ng b·∫Øt tr·ªôm khi c√≥ th√¥ng b√°o\n‚Ä¢ D√πng `,lamviec` ƒë·ªÉ tu·∫ßn tra'
        };
        return nextSteps[jobType] || '';
    }
}; 