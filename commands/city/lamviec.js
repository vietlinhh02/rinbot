const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { getCityUser, updateCityUser, getUserRin, updateUserRin, getUser } = require('../../utils/database');
const { getFarmUser, updateFarmUser } = require('../../utils/database');
const { JOB_TYPES, JOB_IMAGES, POLICE_PUZZLES, JOB_NOTIFICATIONS, COLORS, TREE_VALUES } = require('../../utils/constants');
const Tree = require('../../models/Tree');
const AntiSpamManager = require('../../utils/antiSpam');

module.exports = {
    name: 'lamviec',
    description: 'L√†m vi·ªác theo ngh·ªÅ nghi·ªáp ƒë·ªÉ ki·∫øm ti·ªÅn',
    
    async execute(message, args) {
        const userId = message.author.id;
        
        try {
            // B·∫£o v·ªá command kh·ªèi spam v·ªõi cooldown 3 gi√¢y
            await AntiSpamManager.executeWithProtection(
                userId, 
                'lamviec', 
                3, // 3 gi√¢y cooldown
                this.executeLamViec,
                this,
                message,
                args
            );
        } catch (error) {
            return message.reply(error.message);
        }
    },

    async executeLamViec(message, args) {
        try {
            const userId = message.author.id;
            const cityUser = await getCityUser(userId);

            if (!cityUser.job) {
                return message.reply('‚ùå B·∫°n ch∆∞a c√≥ ngh·ªÅ nghi·ªáp! D√πng `,dangkynghe` ƒë·ªÉ ƒëƒÉng k√Ω ngh·ªÅ.');
            }

            const job = JOB_TYPES[cityUser.job];
            const now = new Date();
            const lastWork = cityUser.lastWork ? new Date(cityUser.lastWork) : null;
            
            // Ki·ªÉm tra ƒë√£ l√†m vi·ªác h√¥m nay ch∆∞a
            const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
            const hasWorkedToday = lastWork && lastWork >= todayStart;

            // Ngh·ªÅ tr·ªôm v√† c√¥ng an c√≥ cooldown ri√™ng, kh√¥ng gi·ªõi h·∫°n 1 l·∫ßn/ng√†y
            if (cityUser.job === 'trom') {
                const cooldownTime = 2 * 60 * 1000; // 2 ph√∫t
                if (lastWork && (now - lastWork) < cooldownTime) {
                    const timeLeft = cooldownTime - (now - lastWork);
                    const minutesLeft = Math.ceil(timeLeft / (60 * 1000));
                    return message.reply(`‚è∞ B·∫°n c·∫ßn ngh·ªâ th√™m **${minutesLeft} ph√∫t** n·ªØa m·ªõi c√≥ th·ªÉ tr·ªôm ti·∫øp!`);
                }
            } else if (cityUser.job === 'congan') {
                const cooldownTime = job.cooldown; // 1 gi·ªù
                if (lastWork && (now - lastWork) < cooldownTime) {
                    const timeLeft = cooldownTime - (now - lastWork);
                    const minutesLeft = Math.ceil(timeLeft / (60 * 1000));
                    const hoursLeft = Math.floor(minutesLeft / 60);
                    const remainingMinutes = minutesLeft % 60;
                    
                    const timeString = hoursLeft > 0 ? `${hoursLeft}h ${remainingMinutes}p` : `${remainingMinutes} ph√∫t`;
                    return message.reply(`‚è∞ B·∫°n c·∫ßn ngh·ªâ th√™m **${timeString}** n·ªØa m·ªõi c√≥ th·ªÉ tu·∫ßn tra ti·∫øp!`);
                }
            } else {
                // C√°c ngh·ªÅ kh√°c (nh√† b√°o, MC) ki·ªÉm tra 1 l·∫ßn/ng√†y
                if (hasWorkedToday) {
                    const tomorrow = new Date(todayStart);
                    tomorrow.setDate(tomorrow.getDate() + 1);
                    const timeUntilTomorrow = tomorrow - now;
                    const hoursLeft = Math.floor(timeUntilTomorrow / (60 * 60 * 1000));
                    const minutesLeft = Math.floor((timeUntilTomorrow % (60 * 60 * 1000)) / (60 * 1000));
                    
                    return message.reply(`‚úÖ B·∫°n ƒë√£ l√†m vi·ªác h√¥m nay r·ªìi!\n‚è∞ C√≥ th·ªÉ l√†m vi·ªác l·∫°i sau: **${hoursLeft}h ${minutesLeft}p** n·ªØa (0:00 ng√†y mai)`);
                }
            }

            // X·ª≠ l√Ω theo t·ª´ng lo·∫°i ngh·ªÅ
            switch (cityUser.job) {
                case 'trom':
                    return await this.handleThiefWork(message, cityUser, args);
                case 'nhabao':
                    return await this.handleChatWork(message, cityUser);
                case 'mc':
                    return await this.handleVoiceWork(message, cityUser);
                case 'congan':
                    return await this.handlePoliceWork(message, cityUser);
                default:
                    return message.reply('‚ùå Ngh·ªÅ nghi·ªáp kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!');
            }

        } catch (error) {
            console.error('L·ªói lamviec:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi l√†m vi·ªác!');
        }
    },

    // X·ª≠ l√Ω ngh·ªÅ Tr·ªôm
    async handleThiefWork(message, cityUser, args) {
        if (args.length === 0) {
            const currentHour = new Date().getHours();
            const canStealMoney = currentHour >= 19 && currentHour < 21;
            const job = JOB_TYPES[cityUser.job];
            const now = new Date();
            const lastWork = cityUser.lastWork ? new Date(cityUser.lastWork) : null;
            const canWork = !lastWork || (now - lastWork) >= (2 * 60 * 1000); // 2 ph√∫t cooldown
            
            let cooldownInfo = '';
            if (!canWork) {
                const timeLeft = (2 * 60 * 1000) - (now - lastWork);
                const minutesLeft = Math.ceil(timeLeft / (60 * 1000));
                cooldownInfo = `‚è∞ **Cooldown:** C√≤n ${minutesLeft} ph√∫t n·ªØa m·ªõi c√≥ th·ªÉ tr·ªôm ti·∫øp!\n\n`;
            }
            
            const embed = new EmbedBuilder()
                .setTitle('ü•∑ NGH·ªÄ TR·ªòM - TH·ªêNG K√ä CHI TI·∫æT')
                .setDescription(`**üìä Tr·∫°ng th√°i c√¥ng vi·ªác:**\n` +
                    `‚Ä¢ **Ngh·ªÅ nghi·ªáp:** ${job.name}\n` +
                    `‚Ä¢ **Tr·∫°ng th√°i:** ${canWork ? '‚úÖ S·∫µn s√†ng tr·ªôm' : '‚è≥ ƒêang ngh·ªâ'}\n` +
                    `‚Ä¢ **R·ªßi ro b·ªã b·∫Øt:** ${Math.round(job.riskChance * 100)}%\n\n` +
                    `${cooldownInfo}` +
                    `üè† **TR·ªòM TI·ªÄN TRONG NH√Ä** (19h-21h):\n` +
                    `‚Ä¢ **Gi·ªù hi·ªán t·∫°i:** ${currentHour}:00 ${canStealMoney ? '‚úÖ C√≥ th·ªÉ tr·ªôm ti·ªÅn' : '‚ùå Ngo√†i gi·ªù'}\n` +
                    `‚Ä¢ **Ho·∫°t ƒë·ªông:** T·ª´ 19:00 ƒë·∫øn 21:00\n` +
                    `‚Ä¢ **Gi·ªõi h·∫°n:** M·ªói nh√† ch·ªâ tr·ªôm ƒë∆∞·ª£c 1 l·∫ßn/ng√†y\n` +
                    `‚Ä¢ **Thu nh·∫≠p:** 100-500 Rin ng·∫´u nhi√™n\n\n` +
                    `üå± **TR·ªòM C√ÇY TRONG FARM:**\n` +
                    `‚Ä¢ **ƒêi·ªÅu ki·ªán:** C√¢y ƒë√£ tr∆∞·ªüng th√†nh v√† c√≥ th·ªÉ thu ho·∫°ch\n` +
                    `‚Ä¢ **Th·ªùi gian:** T·ª´ khi c√¢y c√≥ th·ªÉ thu ho·∫°ch ƒë·∫øn 3 ti·∫øng (ch∆∞a ch·∫øt)\n` +
                    `‚Ä¢ **Thu nh·∫≠p:** 30-70% gi√° tr·ªã c√¢y\n` +
                    `‚Ä¢ **R·ªßi ro:** C√≥ th·ªÉ b·ªã c√¥ng an b·∫Øt trong 10 ph√∫t\n\n` +
                    `**‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG:**\n` +
                    `‚Ä¢ **Cooldown ƒë·∫∑c bi·ªát:** 2 ph√∫t/l·∫ßn tr·ªôm\n` +
                    `‚Ä¢ **Nguy hi·ªÉm:** C√≥ th·ªÉ b·ªã c√¥ng an b·∫Øt v√† m·∫•t ti·ªÅn ph·∫°t\n` +
                    `‚Ä¢ **Th√†nh c√¥ng:** ~70% c∆° h·ªôi th√†nh c√¥ng\n\n` +
                    `**üìã C√°ch s·ª≠ d·ª•ng:**\n` +
                    `‚Ä¢ \`,lamviec @user\` - Tr·ªôm c√¢y ho·∫∑c ti·ªÅn c·ªßa user\n` +
                    `‚Ä¢ \`,lamviec list\` - Xem danh s√°ch c√≥ th·ªÉ tr·ªôm\n\n` +
                    `${canWork ? 'üéØ **S·∫µn s√†ng ƒë·ªÉ tr·ªôm!**' : '‚è∞ **ƒêang ngh·ªâ, h√£y ch·ªù cooldown!**'}`)
                .setColor(canWork ? COLORS.warning : COLORS.error)
                .setThumbnail(JOB_IMAGES.trom)
                .setFooter({ 
                    text: `${canWork ? 'S·∫µn s√†ng h√†nh ƒë·ªông' : `Cooldown c√≤n ${Math.ceil(((2 * 60 * 1000) - (now - lastWork)) / (60 * 1000))} ph√∫t`} | R·ªßi ro cao!` 
                });

            return message.reply({ embeds: [embed] });
        }

        // L·ªánh xem danh s√°ch
        if (args[0].toLowerCase() === 'list') {
            return await this.showStealTargets(message);
        }

        // Tr·ªôm c·ªßa user
        const targetUser = message.mentions.users.first();
        if (!targetUser) {
            return message.reply('‚ùå H√£y tag ng∆∞·ªùi b·∫°n mu·ªën tr·ªôm: `,lamviec @user`');
        }

        if (targetUser.id === message.author.id) {
            return message.reply('‚ùå Kh√¥ng th·ªÉ t·ª± tr·ªôm ch√≠nh m√¨nh!');
        }

        return await this.stealFromUser(message, cityUser, targetUser);
    },

    // Hi·ªÉn th·ªã danh s√°ch c√≥ th·ªÉ tr·ªôm
    async showStealTargets(message) {
        const currentHour = new Date().getHours();
        const canStealMoney = currentHour >= 19 && currentHour < 21;

        const embed = new EmbedBuilder()
            .setTitle('üéØ DANH S√ÅCH M·ª§C TI√äU TR·ªòM')
            .setDescription(`**Danh s√°ch nh·ªØng ng∆∞·ªùi c√≥ th·ªÉ tr·ªôm:**\n\n` +
                `üå± **Tr·ªôm c√¢y:** C√¢y ƒë√£ tr∆∞·ªüng th√†nh v√† c√≥ th·ªÉ thu ho·∫°ch\n` +
                `üè† **Tr·ªôm ti·ªÅn:** ${canStealMoney ? '‚úÖ Hi·ªán t·∫°i c√≥ th·ªÉ (19h-21h)' : '‚ùå Ngo√†i gi·ªù (19h-21h)'}\n\n` +
                `‚è∞ **Cooldown:** 2 ph√∫t/l·∫ßn tr·ªôm\n` +
                `‚ö†Ô∏è **Nguy c∆°:** C√≥ th·ªÉ b·ªã c√¥ng an b·∫Øt\n` +
                `üìÖ **Tr·ªôm ti·ªÅn:** M·ªói nh√† ch·ªâ 1 l·∫ßn/ng√†y\n\n` +
                `*S·ª≠ d·ª•ng:* \`,lamviec @user\` ƒë·ªÉ tr·ªôm`)
            .setColor(COLORS.info);

        return message.reply({ embeds: [embed] });
    },

    // Th·ª±c hi·ªán tr·ªôm
    async stealFromUser(message, thiefCityUser, targetUser) {
        try {
            const thiefId = message.author.id;
            const targetId = targetUser.id;
            const currentHour = new Date().getHours();
            const canStealMoney = currentHour >= 19 && currentHour < 21;

            // Ki·ªÉm tra ƒë√£ tr·ªôm ti·ªÅn nh√† n√†y h√¥m nay ch∆∞a
            const today = new Date().toDateString();
            const dailyStealRecord = thiefCityUser.dailyMoneySteal || {};
            const hasStealenMoneyToday = dailyStealRecord[targetId] === today;

            // Ki·ªÉm tra target c√≥ nh√† kh√¥ng (ƒë·ªÉ tr·ªôm ti·ªÅn)
            const targetCityUser = await getCityUser(targetId);
            const hasHouse = !!targetCityUser.home;

            // Ki·ªÉm tra farm c·ªßa target (ƒë·ªÉ tr·ªôm c√¢y)
            const targetTrees = await Tree.find({ 
                userId: targetId,
                guildId: message.guild.id // Ch·ªâ t√¨m c√¢y trong server hi·ªán t·∫°i
            });
            const stealableTrees = targetTrees.filter(tree => {
                if (!tree.maturedAt) return false; // C√¢y ph·∫£i ƒë√£ tr∆∞·ªüng th√†nh
                const matured = new Date(tree.maturedAt);
                const minutesSinceMature = (new Date() - matured) / (1000 * 60);
                if (minutesSinceMature < 60) return false; // Ph·∫£i ch·ªù √≠t nh·∫•t 1 ti·∫øng sau khi mature (c√≥ th·ªÉ thu ho·∫°ch)
                if (minutesSinceMature > 180) return false; // ƒê√£ ch·∫øt sau 3 ti·∫øng
                return true;
            });

            // X√°c ƒë·ªãnh c√≥ th·ªÉ tr·ªôm g√¨
            const canStealTrees = stealableTrees.length > 0 && hasHouse; // CH·ªà tr·ªôm c√¢y khi c√≥ nh√†
            const canStealHouseMoney = canStealMoney && hasHouse && !hasStealenMoneyToday;

            if (!canStealTrees && !canStealHouseMoney) {
                let reason = '';
                if (!hasHouse) {
                    reason = `${targetUser.displayName} kh√¥ng c√≥ nh√† tr·ªç! C·∫ßn c√≥ nh√† ƒë·ªÉ c√≥ th·ªÉ b·ªã tr·ªôm c√¢y ho·∫∑c ti·ªÅn.`;
                } else if (stealableTrees.length === 0) {
                    if (!canStealMoney) {
                        reason = `${targetUser.displayName} kh√¥ng c√≥ c√¢y n√†o ƒë·ªÉ tr·ªôm v√† kh√¥ng trong gi·ªù tr·ªôm ti·ªÅn (19h-21h)!`;
                    } else if (hasStealenMoneyToday) {
                        reason = `${targetUser.displayName} kh√¥ng c√≥ c√¢y n√†o ƒë·ªÉ tr·ªôm v√† b·∫°n ƒë√£ tr·ªôm ti·ªÅn nh√† n√†y h√¥m nay r·ªìi!`;
                    }
                } else {
                    // C√≥ c√¢y nh∆∞ng kh√¥ng th·ªÉ tr·ªôm v√¨ c√°c l√Ω do kh√°c
                    if (!canStealMoney) {
                        reason = `${targetUser.displayName} c√≥ c√¢y nh∆∞ng kh√¥ng trong gi·ªù tr·ªôm ti·ªÅn (19h-21h)!`;
                    } else if (hasStealenMoneyToday) {
                        reason = `${targetUser.displayName} c√≥ c√¢y nh∆∞ng b·∫°n ƒë√£ tr·ªôm ti·ªÅn nh√† n√†y h√¥m nay r·ªìi!`;
                    }
                }
                return message.reply(`‚ùå ${reason}`);
            }

            // Quy·∫øt ƒë·ªãnh tr·ªôm g√¨ (∆∞u ti√™n ti·ªÅn n·∫øu c√≥ th·ªÉ)
            let stealType = '';
            let stolenAmount = 0;
            let description = '';

            if (canStealHouseMoney && Math.random() < 0.6) { // 60% c∆° h·ªôi tr·ªôm ti·ªÅn n·∫øu c√≥ th·ªÉ
                // Tr·ªôm ti·ªÅn trong nh√†
                stealType = 'money';
                stolenAmount = Math.floor(100 + Math.random() * 400); // 100-500 Rin
                description = `ti·ªÅn t·ª´ nh√† ${targetUser.displayName}`;

                // C·∫≠p nh·∫≠t record tr·ªôm ti·ªÅn h√¥m nay
                const newDailyRecord = { ...dailyStealRecord, [targetId]: today };
                await updateCityUser(thiefId, { dailyMoneySteal: newDailyRecord });

            } else if (canStealTrees) {
                // Tr·ªôm c√¢y
                stealType = 'tree';
                const randomTree = stealableTrees[Math.floor(Math.random() * stealableTrees.length)];
                const treeValue = TREE_VALUES[randomTree.species] || 100;
                stolenAmount = Math.floor(treeValue * (0.3 + Math.random() * 0.4)); // 30-70% gi√° tr·ªã
                description = `c√¢y ${randomTree.species} t·ª´ farm ${targetUser.displayName}`;

                // X√≥a c√¢y kh·ªèi farm
                await Tree.deleteOne({ _id: randomTree._id });
            }

            // Th√¥ng b√°o cho channel v·ªÅ vi·ªác tr·ªôm
            const stealNotification = JOB_NOTIFICATIONS.steal_attempt
                .replace('{thief}', message.author.displayName)
                .replace('{victim}', targetUser.displayName);

            await message.channel.send(stealNotification);

            // T·ª∑ l·ªá th√†nh c√¥ng
            const successRate = 0.7; // 70% th√†nh c√¥ng
            const isSuccess = Math.random() < successRate;

            if (isSuccess) {
                // Tr·ªôm th√†nh c√¥ng
                await updateUserRin(thiefId, stolenAmount);
                await updateCityUser(thiefId, { 
                    lastWork: new Date(),
                    workProgress: (thiefCityUser.workProgress || 0) + 1
                });

                const successMsg = JOB_NOTIFICATIONS.steal_success
                    .replace('{thief}', message.author.displayName)
                    .replace('{amount}', stolenAmount.toLocaleString())
                    .replace('{victim}', targetUser.displayName);

                const embed = new EmbedBuilder()
                    .setTitle('ü•∑ TR·ªòM TH√ÄNH C√îNG!')
                    .setDescription(`B·∫°n ƒë√£ tr·ªôm ƒë∆∞·ª£c **${description}**!\n\n` +
                        `**üí∞ Ki·∫øm ƒë∆∞·ª£c:** ${stolenAmount.toLocaleString()} Rin\n` +
                        `**‚ö†Ô∏è C·∫©n th·∫≠n:** C√¥ng an c√≥ th·ªÉ b·∫Øt b·∫°n trong 10 ph√∫t!\n` +
                        `**‚è∞ Cooldown:** 2 ph√∫t`)
                    .setColor(COLORS.warning)
                    .setThumbnail(JOB_IMAGES.trom);

                await message.reply({ embeds: [embed] });
                await message.channel.send(successMsg);

                // L∆∞u th√¥ng tin ƒë·ªÉ c√¥ng an c√≥ th·ªÉ b·∫Øt
                this.saveTheftRecord(thiefId, targetId, stolenAmount, message.guild.id);

            } else {
                // Tr·ªôm th·∫•t b·∫°i
                const failMsg = JOB_NOTIFICATIONS.steal_failed
                    .replace('{thief}', message.author.displayName);

                const embed = new EmbedBuilder()
                    .setTitle('‚ùå TR·ªòM TH·∫§T B·∫†I!')
                    .setDescription(`B·∫°n ƒë√£ b·ªã ph√°t hi·ªán khi c·ªë tr·ªôm ${description}!\n\n` +
                        `**üí∏ M·∫•t:** 50 Rin (ph√≠ ph·∫°t)\n` +
                        `**‚è∞ Cooldown:** 2 ph√∫t`)
                    .setColor(COLORS.error);

                await updateUserRin(thiefId, -50);
                await updateCityUser(thiefId, { lastWork: new Date() });
                
                await message.reply({ embeds: [embed] });
                await message.channel.send(failMsg);
            }

        } catch (error) {
            console.error('L·ªói tr·ªôm:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi tr·ªôm!');
        }
    },

    // X·ª≠ l√Ω ngh·ªÅ Chat/Voice (Nh√† B√°o, MC)
    async handleVoiceWork(message, cityUser) {
        const job = JOB_TYPES[cityUser.job];
        const now = new Date();
        const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const lastWork = cityUser.lastWork ? new Date(cityUser.lastWork) : null;
        const hasWorkedToday = lastWork && lastWork >= todayStart;
        
        // N·∫øu ƒë√£ ho√†n th√†nh h√¥m nay th√¨ kh√¥ng cho l√†m n·ªØa
        if (hasWorkedToday) {
            const tomorrow = new Date(todayStart);
            tomorrow.setDate(tomorrow.getDate() + 1);
            const timeUntilTomorrow = tomorrow - now;
            const hoursLeft = Math.floor(timeUntilTomorrow / (60 * 60 * 1000));
            const minutesLeft = Math.floor((timeUntilTomorrow % (60 * 60 * 1000)) / (60 * 1000));
            
            return message.reply(`‚úÖ B·∫°n ƒë√£ ho√†n th√†nh ca l√†m MC h√¥m nay!\n‚è∞ C√≥ th·ªÉ l√†m vi·ªác l·∫°i sau: **${hoursLeft}h ${minutesLeft}p** n·ªØa (0:00 ng√†y mai)\n\nüí° **L∆∞u √Ω:** M·ªói ng√†y ch·ªâ ƒë∆∞·ª£c l√†m MC 1 l·∫ßn duy nh·∫•t!`);
        }
        
        // Ch·ªâ x·ª≠ l√Ω ngh·ªÅ MC - Voice
        const member = await message.guild.members.fetch(message.author.id);
        const isInVoice = !!member.voice.channel;
        
        const lastJoin = cityUser.lastVoiceJoin ? new Date(cityUser.lastVoiceJoin) : null;
        const dailyProgress = cityUser.dailyVoiceMinutes || 0;
        
        // Reset ti·∫øn ƒë·ªô cho ng√†y m·ªõi
        const actualProgress = hasWorkedToday ? dailyProgress : 0;
        
        // T√≠nh th·ªùi gian session hi·ªán t·∫°i n·∫øu ƒëang ·ªü voice
        let sessionMinutes = 0;
        if (isInVoice && lastJoin && !hasWorkedToday) {
            sessionMinutes = Math.floor((now - lastJoin) / 60000);
        }
        
        const totalToday = actualProgress + sessionMinutes;
        const remainingMinutes = Math.max(0, job.minVoiceMinutes - totalToday);
        const progressPercent = Math.round((totalToday / job.minVoiceMinutes) * 100);
        
        const embed = new EmbedBuilder()
            .setTitle('üé§ NGH·ªÄ MC - TH·ªêNG K√ä CHI TI·∫æT')
            .setDescription(`**üìä Tr·∫°ng th√°i c√¥ng vi·ªác:**\n` +
                `‚Ä¢ **Ngh·ªÅ nghi·ªáp:** ${job.name}\n` +
                `‚Ä¢ **Voice ƒë√£ ng·ªìi h√¥m nay:** ${totalToday}/${job.minVoiceMinutes} ph√∫t\n` +
                `‚Ä¢ **Ti·∫øn ƒë·ªô:** ${Math.min(100, progressPercent)}%\n` +
                `‚Ä¢ **C√≤n thi·∫øu:** ${remainingMinutes} ph√∫t\n\n` +
                `**üí∞ Thu nh·∫≠p:**\n` +
                `‚Ä¢ **Th∆∞·ªüng/ng√†y:** ${job.rewardPerDay} Rin\n` +
                `‚Ä¢ **Tr·∫°ng th√°i th∆∞·ªüng:** ${totalToday >= job.minVoiceMinutes ? '‚úÖ ƒê·ªß ƒëi·ªÅu ki·ªán nh·∫≠n' : '‚è≥ Ch∆∞a ƒë·ªß ƒëi·ªÅu ki·ªán'}\n\n` +
                `**‚è∞ Th·ªùi gian:**\n` +
                `‚Ä¢ **Session hi·ªán t·∫°i:** ${sessionMinutes} ph√∫t\n` +
                `‚Ä¢ **T√≠ch l≈©y h√¥m nay:** ${actualProgress} ph√∫t\n` +
                `‚Ä¢ **Gi·ªõi h·∫°n:** 1 l·∫ßn/ng√†y (reset 0:00 t·ª± ƒë·ªông)\n\n` +
                `**üìç Tr·∫°ng th√°i Voice:**\n` +
                `‚Ä¢ **Hi·ªán t·∫°i:** ${isInVoice ? `üü¢ ƒêang ·ªü ${member.voice.channel.name}` : 'üî¥ Kh√¥ng ·ªü voice'}\n` +
                `${lastJoin && !hasWorkedToday ? `‚Ä¢ **B·∫Øt ƒë·∫ßu session:** ${lastJoin.toLocaleTimeString('vi-VN')}\n` : ''}` +
                `${isInVoice && !hasWorkedToday ? `‚Ä¢ **Th·ªùi gian session:** ${sessionMinutes} ph√∫t\n` : ''}\n` +
                `**üìã H∆∞·ªõng d·∫´n:**\n` +
                `‚Ä¢ V√†o b·∫•t k·ª≥ room voice n√†o trong server\n` +
                `‚Ä¢ Bot t·ª± ƒë·ªông t√≠nh th·ªùi gian khi b·∫°n ·ªü voice\n` +
                `‚Ä¢ D√πng \`,lamviec\` ƒë·ªÉ check ti·∫øn ƒë·ªô\n` +
                `‚Ä¢ Ng·ªìi ƒë·ªß ${job.minVoiceMinutes} ph√∫t trong ng√†y ƒë·ªÉ nh·∫≠n th∆∞·ªüng\n\n` +
                `${isInVoice && !hasWorkedToday ? 'üé§ **ƒêang t√≠ch l≈©y th·ªùi gian voice!**' : hasWorkedToday ? '‚úÖ **ƒê√£ ho√†n th√†nh h√¥m nay!**' : '‚ö†Ô∏è **H√£y v√†o voice ƒë·ªÉ b·∫Øt ƒë·∫ßu t√≠ch l≈©y!**'}`)
            .setColor(hasWorkedToday ? COLORS.success : (isInVoice ? COLORS.info : COLORS.warning))
            .setThumbnail(JOB_IMAGES.mc)
            .setFooter({ 
                text: `${hasWorkedToday ? 'ƒê√£ ho√†n th√†nh' : (isInVoice ? 'ƒêang t√≠ch l≈©y th·ªùi gian' : 'C·∫ßn v√†o voice')} | 1 l·∫ßn/ng√†y` 
            });
        
        return message.reply({ embeds: [embed] });
    },

    // X·ª≠ l√Ω ngh·ªÅ Nh√† b√°o - Chat
    async handleChatWork(message, cityUser) {
        const job = JOB_TYPES[cityUser.job];
        const now = new Date();
        
        const currentProgress = cityUser.workProgress || 0;
        const isWorking = cityUser.workStartTime && !cityUser.lastWork;
        const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const lastWorkDate = cityUser.lastWork ? new Date(cityUser.lastWork) : null;
        const hasWorkedToday = lastWorkDate && lastWorkDate >= todayStart;
        
        // N·∫øu ƒë√£ ho√†n th√†nh h√¥m nay th√¨ kh√¥ng cho l√†m n·ªØa
        if (hasWorkedToday) {
            const tomorrow = new Date(todayStart);
            tomorrow.setDate(tomorrow.getDate() + 1);
            const timeUntilTomorrow = tomorrow - now;
            const hoursLeft = Math.floor(timeUntilTomorrow / (60 * 60 * 1000));
            const minutesLeft = Math.floor((timeUntilTomorrow % (60 * 60 * 1000)) / (60 * 1000));
            
            return message.reply(`‚úÖ B·∫°n ƒë√£ ho√†n th√†nh ca l√†m Nh√† b√°o h√¥m nay!\n‚è∞ C√≥ th·ªÉ l√†m vi·ªác l·∫°i sau: **${hoursLeft}h ${minutesLeft}p** n·ªØa (0:00 ng√†y mai)\n\nüí° **L∆∞u √Ω:** M·ªói ng√†y ch·ªâ ƒë∆∞·ª£c l√†m Nh√† b√°o 1 l·∫ßn duy nh·∫•t!`);
        }
        
        if (!isWorking) {
            // B·∫Øt ƒë·∫ßu ca l√†m m·ªõi - reset ti·∫øn ƒë·ªô v·ªÅ 0 cho ng√†y m·ªõi
            await updateCityUser(message.author.id, { 
                workStartTime: now,
                workProgress: 0
            });
        }
        
        // Hi·ªÉn th·ªã ti·∫øn ƒë·ªô th·ª±c t·∫ø hi·ªán t·∫°i
        const displayProgress = isWorking ? currentProgress : 0;
        const workTimeMinutes = isWorking ? Math.floor((now - new Date(cityUser.workStartTime)) / 60000) : 0;
        
        const embed = new EmbedBuilder()
            .setTitle('üì∞ NGH·ªÄ NH√Ä B√ÅO - TH·ªêNG K√ä CHI TI·∫æT')
            .setDescription(`**üìä Tr·∫°ng th√°i c√¥ng vi·ªác:**\n` +
                `‚Ä¢ **Ngh·ªÅ nghi·ªáp:** ${job.name}\n` +
                `‚Ä¢ **Tin nh·∫Øn ƒë√£ chat:** ${displayProgress}/${job.targetMessages}\n` +
                `‚Ä¢ **Ti·∫øn ƒë·ªô:** ${Math.round((displayProgress / job.targetMessages) * 100)}%\n` +
                `‚Ä¢ **C√≤n thi·∫øu:** ${Math.max(0, job.targetMessages - displayProgress)} tin nh·∫Øn\n\n` +
                `**üí∞ Thu nh·∫≠p:**\n` +
                `‚Ä¢ **Th∆∞·ªüng/tin nh·∫Øn:** ${job.rewardPerMessage} Rin\n` +
                `‚Ä¢ **ƒê√£ ki·∫øm ƒë∆∞·ª£c:** ${(displayProgress * job.rewardPerMessage).toLocaleString()} Rin\n` +
                `‚Ä¢ **T·ªïng khi ho√†n th√†nh:** ${(job.targetMessages * job.rewardPerMessage).toLocaleString()} Rin\n\n` +
                `**‚è∞ Th·ªùi gian:**\n` +
                `‚Ä¢ **Tr·∫°ng th√°i ca l√†m:** ${isWorking ? 'üü¢ ƒêang l√†m vi·ªác' : 'üöÄ B·∫Øt ƒë·∫ßu ca m·ªõi'}\n` +
                `‚Ä¢ **Th·ªùi gian l√†m vi·ªác:** ${workTimeMinutes} ph√∫t\n` +
                `‚Ä¢ **Gi·ªõi h·∫°n:** 1 l·∫ßn/ng√†y (reset 0:00)\n\n` +
                `**üìã H∆∞·ªõng d·∫´n:**\n` +
                `‚Ä¢ Chat b√¨nh th∆∞·ªùng trong server n√†y\n` +
                `‚Ä¢ M·ªói tin nh·∫Øn ƒë∆∞·ª£c t√≠nh v√† nh·∫≠n ti·ªÅn ngay\n` +
                `‚Ä¢ D√πng \`,lamviec\` ƒë·ªÉ check ti·∫øn ƒë·ªô\n` +
                `‚Ä¢ Chat ƒë·ªß ${job.targetMessages} tin nh·∫Øn ƒë·ªÉ ho√†n th√†nh\n\n` +
                `üí¨ **H√£y b·∫Øt ƒë·∫ßu chat ƒë·ªÉ t√≠ch l≈©y ti·∫øn ƒë·ªô!**`)
            .setColor(isWorking ? COLORS.info : COLORS.success)
            .setThumbnail(JOB_IMAGES.nhabao)
            .setFooter({ text: `${isWorking ? 'Ca l√†m ƒëang di·ªÖn ra' : 'B·∫Øt ƒë·∫ßu ca l√†m m·ªõi'} | 1 l·∫ßn/ng√†y` });
        
        return message.reply({ embeds: [embed] });
    },

    // X·ª≠ l√Ω ngh·ªÅ C√¥ng An  
    async handlePoliceWork(message, cityUser) {
        const job = JOB_TYPES[cityUser.job];
        const now = new Date();
        const lastWork = cityUser.lastWork ? new Date(cityUser.lastWork) : null;
        const canWork = !lastWork || (now - lastWork) >= job.cooldown;
        
        let cooldownInfo = '';
        if (!canWork) {
            const timeLeft = job.cooldown - (now - lastWork);
            const minutesLeft = Math.ceil(timeLeft / (60 * 1000));
            const hoursLeft = Math.floor(minutesLeft / 60);
            const remainingMinutes = minutesLeft % 60;
            
            const timeString = hoursLeft > 0 ? `${hoursLeft}h ${remainingMinutes}p` : `${remainingMinutes} ph√∫t`;
            cooldownInfo = `‚è∞ **Cooldown:** C√≤n ${timeString} n·ªØa m·ªõi c√≥ th·ªÉ tu·∫ßn tra ti·∫øp!\n\n`;
        }
        
        // ƒê·∫øm s·ªë record tr·ªôm hi·ªán t·∫°i (n·∫øu c√≥)
        const activeThefts = global.theftRecords ? global.theftRecords.filter(record => 
            record.guildId === message.guild.id && 
            (Date.now() - record.timestamp) <= 10 * 60 * 1000
        ).length : 0;
        
        const embed = new EmbedBuilder()
            .setTitle('üëÆ‚Äç‚ôÇÔ∏è NGH·ªÄ C√îNG AN - TH·ªêNG K√ä CHI TI·∫æT')
            .setDescription(`**üìä Tr·∫°ng th√°i c√¥ng vi·ªác:**\n` +
                `‚Ä¢ **Ngh·ªÅ nghi·ªáp:** ${job.name}\n` +
                `‚Ä¢ **Tr·∫°ng th√°i:** ${canWork ? '‚úÖ S·∫µn s√†ng tu·∫ßn tra' : '‚è≥ ƒêang ngh·ªâ'}\n` +
                `‚Ä¢ **Tr·ªôm ƒëang truy n√£:** ${activeThefts} ng∆∞·ªùi\n\n` +
                `${cooldownInfo}` +
                `**üí∞ Thu nh·∫≠p:**\n` +
                `‚Ä¢ **Th∆∞·ªüng c∆° b·∫£n:** ${job.minIncome}-${job.maxIncome} Rin/ca\n` +
                `‚Ä¢ **Th∆∞·ªüng b·∫Øt tr·ªôm:** ${job.puzzleReward} Rin/l·∫ßn\n` +
                `‚Ä¢ **ƒêi·ªÅu ki·ªán:** Ph·∫£i gi·∫£i ƒë√∫ng c√¢u ƒë·ªë\n\n` +
                `**‚öñÔ∏è Nhi·ªám v·ª• ch√≠nh:**\n` +
                `‚Ä¢ **Theo d√µi:** Th√¥ng b√°o tr·ªôm c·∫Øp trong server\n` +
                `‚Ä¢ **H√†nh ƒë·ªông:** B·∫Øt tr·ªôm trong v√≤ng ${job.catchWindow / (60 * 1000)} ph√∫t\n` +
                `‚Ä¢ **K·ªπ nƒÉng:** Gi·∫£i ƒë·ªë ƒë·ªÉ b·∫Øt th√†nh c√¥ng\n` +
                `‚Ä¢ **H·∫≠u qu·∫£:** Gi·∫£i sai = th·∫•t b·∫°i, tr·ªôm tho√°t\n\n` +
                `**üéØ C√°ch th·ª©c ho·∫°t ƒë·ªông:**\n` +
                `‚Ä¢ Bot th√¥ng b√°o khi c√≥ ng∆∞·ªùi tr·ªôm\n` +
                `‚Ä¢ D√πng \`,battrom @user\` ƒë·ªÉ b·∫Øt tr·ªôm\n` +
                `‚Ä¢ Gi·∫£i ƒë√∫ng c√¢u ƒë·ªë trong 30 gi√¢y\n` +
                `‚Ä¢ Th√†nh c√¥ng = nh·∫≠n th∆∞·ªüng + tr·ªôm m·∫•t ti·ªÅn\n\n` +
                `**‚è∞ Th·ªùi gian:**\n` +
                `‚Ä¢ **C∆° h·ªôi b·∫Øt:** ${job.catchWindow / (60 * 1000)} ph√∫t t·ª´ l√∫c tr·ªôm\n` +
                `‚Ä¢ **Cooldown tu·∫ßn tra:** ${this.formatCooldown(job.cooldown)}\n\n` +
                `${canWork ? (activeThefts > 0 ? 'üö® **C√≥ tr·ªôm ƒëang ho·∫°t ƒë·ªông! H√£y b·∫Øt ngay!**' : 'üëÆ **ƒêang tu·∫ßn tra, s·∫µn s√†ng b·∫Øt tr·ªôm!**') : '‚è∞ **ƒêang ngh·ªâ, ch·ªù cooldown!**'}`)
            .setColor(canWork ? (activeThefts > 0 ? COLORS.error : COLORS.info) : COLORS.warning)
            .setThumbnail(JOB_IMAGES.congan);

        // Footer hi·ªÉn th·ªã cooldown ch√≠nh x√°c
        let footerText = '';
        if (canWork) {
            footerText = activeThefts > 0 ? `${activeThefts} tr·ªôm ƒëang truy n√£` : 'ƒêang tu·∫ßn tra';
        } else {
            const timeLeft = job.cooldown - (now - lastWork);
            const minutesLeft = Math.ceil(timeLeft / (60 * 1000));
            const hoursLeft = Math.floor(minutesLeft / 60);
            const remainingMinutes = minutesLeft % 60;
            
            const timeString = hoursLeft > 0 ? `${hoursLeft}h ${remainingMinutes}p` : `${remainingMinutes} ph√∫t`;
            footerText = `Cooldown c√≤n ${timeString}`;
        }
        
        embed.setFooter({ text: `${footerText} | C√≥ th·ªÉ l√†m li√™n t·ª•c!` });

        // Ch·ªâ c·∫≠p nh·∫≠t lastWork khi c√≥ th·ªÉ l√†m vi·ªác
        if (canWork) {
            await updateCityUser(message.author.id, { lastWork: new Date() });
        }
        
        await message.reply({ embeds: [embed] });
    },

    // L∆∞u record tr·ªôm ƒë·ªÉ c√¥ng an b·∫Øt
    saveTheftRecord(thiefId, victimId, amount, guildId) {
        // L∆∞u v√†o memory ho·∫∑c database t·∫°m th·ªùi
        // S·∫Ω ƒë∆∞·ª£c x√≥a sau 10 ph√∫t
        const record = {
            thiefId,
            victimId,
            amount,
            guildId, // Th√™m guild ID ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ ho·∫°t ƒë·ªông trong server n√†y
            timestamp: Date.now()
        };
        
        // Gi·∫£ s·ª≠ c√≥ global object ƒë·ªÉ l∆∞u
        if (!global.theftRecords) global.theftRecords = [];
        global.theftRecords.push(record);
        
        // T·ª± ƒë·ªông x√≥a sau 10 ph√∫t
        setTimeout(() => {
            global.theftRecords = global.theftRecords.filter(r => r.timestamp !== record.timestamp);
        }, 10 * 60 * 1000);
    },

    // X·ª≠ l√Ω b·∫Øt tr·ªôm
    async handleCatchThief(message, policeUser, thiefUser) {
        if (!global.theftRecords) global.theftRecords = [];
        
        const now = Date.now();
        const recentTheft = global.theftRecords.find(record => 
            record.thiefId === thiefUser.id && 
            (now - record.timestamp) <= 10 * 60 * 1000 // 10 ph√∫t
        );

        if (!recentTheft) {
            return message.reply('‚ùå Kh√¥ng c√≥ b·∫±ng ch·ª©ng tr·ªôm c·∫Øp g·∫ßn ƒë√¢y c·ªßa ng∆∞·ªùi n√†y!');
        }

        // Random c√¢u ƒë·ªë
        const puzzle = POLICE_PUZZLES[Math.floor(Math.random() * POLICE_PUZZLES.length)];
        
        const embed = new EmbedBuilder()
            .setTitle('üß© GI·∫¢I ƒê·ªê ƒê·ªÇ B·∫ÆT TR·ªòM')
            .setDescription(`**C√¢u h·ªèi:** ${puzzle.question}\n\n` +
                `B·∫°n c√≥ **30 gi√¢y** ƒë·ªÉ tr·∫£ l·ªùi!\n` +
                `Tr·∫£ l·ªùi ƒë√∫ng = b·∫Øt th√†nh c√¥ng\n` +
                `Tr·∫£ l·ªùi sai = tr·ªôm tho√°t`)
            .setColor(COLORS.warning);

        const puzzleMsg = await message.reply({ embeds: [embed] });

        // ƒê·ª£i c√¢u tr·∫£ l·ªùi
        const filter = (msg) => msg.author.id === message.author.id;
        try {
            const collected = await message.channel.awaitMessages({ 
                filter, 
                max: 1, 
                time: 30000, 
                errors: ['time'] 
            });
            
            const answer = collected.first().content.toLowerCase().trim();
            
            if (answer === puzzle.answer.toLowerCase()) {
                // B·∫Øt th√†nh c√¥ng
                const reward = 500;
                await updateUserRin(message.author.id, reward);
                await updateUserRin(thiefUser.id, -recentTheft.amount); // Tr·ªôm m·∫•t ti·ªÅn

                const successMsg = JOB_NOTIFICATIONS.police_catch
                    .replace('{police}', message.author.displayName)
                    .replace('{thief}', thiefUser.displayName)
                    .replace('{reward}', reward.toLocaleString());

                await message.channel.send(successMsg);

                // X√≥a record
                global.theftRecords = global.theftRecords.filter(r => r.timestamp !== recentTheft.timestamp);

            } else {
                // B·∫Øt th·∫•t b·∫°i
                const failMsg = JOB_NOTIFICATIONS.police_fail
                    .replace('{police}', message.author.displayName)
                    .replace('{thief}', thiefUser.displayName);

                await message.channel.send(failMsg);
            }

        } catch (error) {
            await message.reply('‚è∞ H·∫øt th·ªùi gian! Tr·ªôm ƒë√£ tho√°t!');
        }
    },

    // Helper functions
    formatCooldown(milliseconds) {
        const hours = Math.floor(milliseconds / (60 * 60 * 1000));
        const minutes = Math.floor((milliseconds % (60 * 60 * 1000)) / (60 * 1000));
        
        if (hours > 0) {
            return `${hours} gi·ªù${minutes > 0 ? ` ${minutes} ph√∫t` : ''}`;
        } else {
            return `${minutes} ph√∫t`;
        }
    }
};