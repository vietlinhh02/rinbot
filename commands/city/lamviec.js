const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { getCityUser, updateCityUser, getUserRin, updateUserRin, getUser } = require('../../utils/database');
const { getFarmUser, updateFarmUser } = require('../../utils/database');
const { JOB_TYPES, JOB_IMAGES, POLICE_PUZZLES, JOB_NOTIFICATIONS, COLORS, TREE_VALUES } = require('../../utils/constants');
const Tree = require('../../models/Tree');

module.exports = {
    name: 'lamviec',
    description: 'L√†m vi·ªác theo ngh·ªÅ nghi·ªáp ƒë·ªÉ ki·∫øm ti·ªÅn',
    
    async execute(message, args) {
        try {
            const userId = message.author.id;
            const cityUser = await getCityUser(userId);

            if (!cityUser.job) {
                return message.reply('‚ùå B·∫°n ch∆∞a c√≥ ngh·ªÅ nghi·ªáp! D√πng `,dangkynghe` ƒë·ªÉ ƒëƒÉng k√Ω ngh·ªÅ.');
            }

            const job = JOB_TYPES[cityUser.job];
            const now = new Date();
            const lastWork = cityUser.lastWork ? new Date(cityUser.lastWork) : null;

            // Ki·ªÉm tra cooldown - ri√™ng cho tr·ªôm l√† 2 ph√∫t
            let cooldownTime = job.cooldown;
            if (cityUser.job === 'trom') {
                cooldownTime = 2 * 60 * 1000; // 2 ph√∫t
            }

            if (lastWork && (now - lastWork) < cooldownTime) {
                const timeLeft = cooldownTime - (now - lastWork);
                const minutesLeft = Math.ceil(timeLeft / (60 * 1000));
                if (cityUser.job === 'trom') {
                    return message.reply(`‚è∞ B·∫°n c·∫ßn ngh·ªâ th√™m **${minutesLeft} ph√∫t** n·ªØa m·ªõi c√≥ th·ªÉ tr·ªôm ti·∫øp!`);
                } else {
                    const hoursLeft = Math.ceil(timeLeft / (60 * 60 * 1000));
                    return message.reply(`‚è∞ B·∫°n c·∫ßn ngh·ªâ th√™m **${hoursLeft} gi·ªù** n·ªØa m·ªõi c√≥ th·ªÉ l√†m vi·ªác ti·∫øp!`);
                }
            }

            // X·ª≠ l√Ω theo t·ª´ng lo·∫°i ngh·ªÅ
            switch (cityUser.job) {
                case 'trom':
                    return await this.handleThiefWork(message, cityUser, args);
                case 'nhabao':
                case 'mc':
                    return await this.handleVoiceWork(message, cityUser);
                case 'congan':
                    return await this.handlePoliceWork(message, cityUser);
                default:
                    return message.reply('‚ùå Ngh·ªÅ nghi·ªáp kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!');
            }

        } catch (error) {
            console.error('L·ªói lamviec:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi l√†m vi·ªác!');
        }
    },

    // X·ª≠ l√Ω ngh·ªÅ Tr·ªôm
    async handleThiefWork(message, cityUser, args) {
        if (args.length === 0) {
            const currentHour = new Date().getHours();
            const embed = new EmbedBuilder()
                .setTitle('ü•∑ NGH·ªÄ TR·ªòM - H∆Ø·ªöNG D·∫™N')
                .setDescription(`**C√°ch th·ª©c ho·∫°t ƒë·ªông:**\n` +
                    `‚Ä¢ Tr·ªôm c√¢y t·ª´ farm c·ªßa ng∆∞·ªùi kh√°c\n` +
                    `‚Ä¢ Ch·ªâ tr·ªôm ƒë∆∞·ª£c c√¢y ƒë√£ tr·ªìng (kh√¥ng ph·∫£i h·∫°t gi·ªëng)\n` +
                    `‚Ä¢ C√≥ th·ªÉ b·ªã c√¥ng an b·∫Øt trong 10 ph√∫t\n` +
                    `‚Ä¢ **Cooldown:** 2 ph√∫t gi·ªØa c√°c l·∫ßn tr·ªôm\n\n` +
                    `üè† **TR·ªòM TI·ªÄN TRONG NH√Ä** (19h-21h):\n` +
                    `‚Ä¢ Ch·ªâ ho·∫°t ƒë·ªông t·ª´ 19:00 ƒë·∫øn 21:00\n` +
                    `‚Ä¢ M·ªói nh√† ch·ªâ tr·ªôm ƒë∆∞·ª£c 1 l·∫ßn/ng√†y\n` +
                    `‚Ä¢ Tr·ªôm ti·ªÅn ng·∫´u nhi√™n t·ª´ 100-500 Rin\n\n` +
                    `**Gi·ªù hi·ªán t·∫°i:** ${currentHour}:00 ${currentHour >= 19 && currentHour < 21 ? '‚úÖ (C√≥ th·ªÉ tr·ªôm ti·ªÅn)' : '‚ùå (Ch·ªâ tr·ªôm c√¢y)'}\n\n` +
                    `**C√°ch s·ª≠ d·ª•ng:**\n` +
                    `\`,lamviec @user\` - Tr·ªôm c√¢y ho·∫∑c ti·ªÅn c·ªßa user\n` +
                    `\`,lamviec list\` - Xem danh s√°ch c√≥ th·ªÉ tr·ªôm\n\n` +
                    `**‚ö†Ô∏è R·ªßi ro:** N·∫øu b·ªã b·∫Øt s·∫Ω m·∫•t ti·ªÅn ph·∫°t!`)
                .setColor(COLORS.warning)
                .setThumbnail(JOB_IMAGES.trom);

            return message.reply({ embeds: [embed] });
        }

        // L·ªánh xem danh s√°ch
        if (args[0].toLowerCase() === 'list') {
            return await this.showStealTargets(message);
        }

        // Tr·ªôm c·ªßa user
        const targetUser = message.mentions.users.first();
        if (!targetUser) {
            return message.reply('‚ùå H√£y tag ng∆∞·ªùi b·∫°n mu·ªën tr·ªôm: `,lamviec @user`');
        }

        if (targetUser.id === message.author.id) {
            return message.reply('‚ùå Kh√¥ng th·ªÉ t·ª± tr·ªôm ch√≠nh m√¨nh!');
        }

        return await this.stealFromUser(message, cityUser, targetUser);
    },

    // Hi·ªÉn th·ªã danh s√°ch c√≥ th·ªÉ tr·ªôm
    async showStealTargets(message) {
        const currentHour = new Date().getHours();
        const canStealMoney = currentHour >= 19 && currentHour < 21;

        const embed = new EmbedBuilder()
            .setTitle('üéØ DANH S√ÅCH M·ª§C TI√äU TR·ªòM')
            .setDescription(`**Danh s√°ch nh·ªØng ng∆∞·ªùi c√≥ th·ªÉ tr·ªôm:**\n\n` +
                `üå± **Tr·ªôm c√¢y:** Lu√¥n c√≥ th·ªÉ (n·∫øu c√≥ c√¢y ph√π h·ª£p)\n` +
                `üè† **Tr·ªôm ti·ªÅn:** ${canStealMoney ? '‚úÖ Hi·ªán t·∫°i c√≥ th·ªÉ (19h-21h)' : '‚ùå Ngo√†i gi·ªù (19h-21h)'}\n\n` +
                `‚è∞ **Cooldown:** 2 ph√∫t/l·∫ßn tr·ªôm\n` +
                `‚ö†Ô∏è **Nguy c∆°:** C√≥ th·ªÉ b·ªã c√¥ng an b·∫Øt\n` +
                `üìÖ **Tr·ªôm ti·ªÅn:** M·ªói nh√† ch·ªâ 1 l·∫ßn/ng√†y\n\n` +
                `*S·ª≠ d·ª•ng:* \`,lamviec @user\` ƒë·ªÉ tr·ªôm`)
            .setColor(COLORS.info);

        return message.reply({ embeds: [embed] });
    },

    // Th·ª±c hi·ªán tr·ªôm
    async stealFromUser(message, thiefCityUser, targetUser) {
        try {
            const thiefId = message.author.id;
            const targetId = targetUser.id;
            const currentHour = new Date().getHours();
            const canStealMoney = currentHour >= 19 && currentHour < 21;

            // Ki·ªÉm tra ƒë√£ tr·ªôm ti·ªÅn nh√† n√†y h√¥m nay ch∆∞a
            const today = new Date().toDateString();
            const dailyStealRecord = thiefCityUser.dailyMoneySteal || {};
            const hasStealenMoneyToday = dailyStealRecord[targetId] === today;

            // Ki·ªÉm tra target c√≥ nh√† kh√¥ng (ƒë·ªÉ tr·ªôm ti·ªÅn)
            const targetCityUser = await getCityUser(targetId);
            const hasHouse = !!targetCityUser.home;

            // Ki·ªÉm tra farm c·ªßa target (ƒë·ªÉ tr·ªôm c√¢y)
            const targetTrees = await Tree.find({ 
                userId: targetId,
                guildId: message.guild.id // Ch·ªâ t√¨m c√¢y trong server hi·ªán t·∫°i
            });
            const stealableTrees = targetTrees.filter(tree => {
                if (!tree.maturedAt) return false;
                const matured = new Date(tree.maturedAt);
                const minutesSinceMature = (new Date() - matured) / (1000 * 60);
                if (minutesSinceMature < 80) return false; // Ch∆∞a ƒë·ªß 1h20p
                if (minutesSinceMature > 180) return false; // ƒê√£ ch·∫øt
                return true;
            });

            // X√°c ƒë·ªãnh c√≥ th·ªÉ tr·ªôm g√¨
            const canStealTrees = stealableTrees.length > 0;
            const canStealHouseMoney = canStealMoney && hasHouse && !hasStealenMoneyToday;

            if (!canStealTrees && !canStealHouseMoney) {
                let reason = '';
                if (!canStealTrees && !hasHouse) {
                    reason = `${targetUser.displayName} kh√¥ng c√≥ c√¢y n√†o ƒë·ªÉ tr·ªôm v√† kh√¥ng c√≥ nh√†!`;
                } else if (!canStealTrees && hasHouse) {
                    if (!canStealMoney) {
                        reason = `${targetUser.displayName} kh√¥ng c√≥ c√¢y ƒë·ªÉ tr·ªôm v√† kh√¥ng trong gi·ªù tr·ªôm ti·ªÅn (19h-21h)!`;
                    } else if (hasStealenMoneyToday) {
                        reason = `${targetUser.displayName} kh√¥ng c√≥ c√¢y ƒë·ªÉ tr·ªôm v√† b·∫°n ƒë√£ tr·ªôm ti·ªÅn nh√† n√†y h√¥m nay r·ªìi!`;
                    }
                } else if (canStealTrees && hasHouse && hasStealenMoneyToday && !canStealMoney) {
                    reason = `${targetUser.displayName} c√≥ c√¢y nh∆∞ng kh√¥ng trong gi·ªù tr·ªôm ti·ªÅn v√† ƒë√£ tr·ªôm ti·ªÅn nh√† n√†y h√¥m nay!`;
                }
                return message.reply(`‚ùå ${reason}`);
            }

            // Quy·∫øt ƒë·ªãnh tr·ªôm g√¨ (∆∞u ti√™n ti·ªÅn n·∫øu c√≥ th·ªÉ)
            let stealType = '';
            let stolenAmount = 0;
            let description = '';

            if (canStealHouseMoney && Math.random() < 0.6) { // 60% c∆° h·ªôi tr·ªôm ti·ªÅn n·∫øu c√≥ th·ªÉ
                // Tr·ªôm ti·ªÅn trong nh√†
                stealType = 'money';
                stolenAmount = Math.floor(100 + Math.random() * 400); // 100-500 Rin
                description = `ti·ªÅn t·ª´ nh√† ${targetUser.displayName}`;

                // C·∫≠p nh·∫≠t record tr·ªôm ti·ªÅn h√¥m nay
                const newDailyRecord = { ...dailyStealRecord, [targetId]: today };
                await updateCityUser(thiefId, { dailyMoneySteal: newDailyRecord });

            } else if (canStealTrees) {
                // Tr·ªôm c√¢y
                stealType = 'tree';
                const randomTree = stealableTrees[Math.floor(Math.random() * stealableTrees.length)];
                const treeValue = TREE_VALUES[randomTree.type] || 100;
                stolenAmount = Math.floor(treeValue * (0.3 + Math.random() * 0.4)); // 30-70% gi√° tr·ªã
                description = `c√¢y ${randomTree.type} t·ª´ farm ${targetUser.displayName}`;

                // X√≥a c√¢y kh·ªèi farm
                await Tree.deleteOne({ _id: randomTree._id });
            }

            // Th√¥ng b√°o cho channel v·ªÅ vi·ªác tr·ªôm
            const stealNotification = JOB_NOTIFICATIONS.steal_attempt
                .replace('{thief}', message.author.displayName)
                .replace('{victim}', targetUser.displayName);

            await message.channel.send(stealNotification);

            // T·ª∑ l·ªá th√†nh c√¥ng
            const successRate = 0.7; // 70% th√†nh c√¥ng
            const isSuccess = Math.random() < successRate;

            if (isSuccess) {
                // Tr·ªôm th√†nh c√¥ng
                await updateUserRin(thiefId, stolenAmount);
                await updateCityUser(thiefId, { 
                    lastWork: new Date(),
                    workProgress: (thiefCityUser.workProgress || 0) + 1
                });

                const successMsg = JOB_NOTIFICATIONS.steal_success
                    .replace('{thief}', message.author.displayName)
                    .replace('{amount}', stolenAmount.toLocaleString())
                    .replace('{victim}', targetUser.displayName);

                const embed = new EmbedBuilder()
                    .setTitle('ü•∑ TR·ªòM TH√ÄNH C√îNG!')
                    .setDescription(`B·∫°n ƒë√£ tr·ªôm ƒë∆∞·ª£c **${description}**!\n\n` +
                        `**üí∞ Ki·∫øm ƒë∆∞·ª£c:** ${stolenAmount.toLocaleString()} Rin\n` +
                        `**‚ö†Ô∏è C·∫©n th·∫≠n:** C√¥ng an c√≥ th·ªÉ b·∫Øt b·∫°n trong 10 ph√∫t!\n` +
                        `**‚è∞ Cooldown:** 2 ph√∫t`)
                    .setColor(COLORS.warning)
                    .setThumbnail(JOB_IMAGES.trom);

                await message.reply({ embeds: [embed] });
                await message.channel.send(successMsg);

                // L∆∞u th√¥ng tin ƒë·ªÉ c√¥ng an c√≥ th·ªÉ b·∫Øt
                this.saveTheftRecord(thiefId, targetId, stolenAmount, message.guild.id);

            } else {
                // Tr·ªôm th·∫•t b·∫°i
                const failMsg = JOB_NOTIFICATIONS.steal_failed
                    .replace('{thief}', message.author.displayName);

                const embed = new EmbedBuilder()
                    .setTitle('‚ùå TR·ªòM TH·∫§T B·∫†I!')
                    .setDescription(`B·∫°n ƒë√£ b·ªã ph√°t hi·ªán khi c·ªë tr·ªôm ${description}!\n\n` +
                        `**üí∏ M·∫•t:** 50 Rin (ph√≠ ph·∫°t)\n` +
                        `**‚è∞ Cooldown:** 2 ph√∫t`)
                    .setColor(COLORS.error);

                await updateUserRin(thiefId, -50);
                await updateCityUser(thiefId, { lastWork: new Date() });
                
                await message.reply({ embeds: [embed] });
                await message.channel.send(failMsg);
            }

        } catch (error) {
            console.error('L·ªói tr·ªôm:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi tr·ªôm!');
        }
    },

    // X·ª≠ l√Ω ngh·ªÅ MC (voice)
    async handleVoiceWork(message, cityUser) {
        const job = JOB_TYPES[cityUser.job];
        // Ki·ªÉm tra user c√≥ ƒëang trong voice kh√¥ng
        const member = await message.guild.members.fetch(message.author.id);
        if (!member.voice.channel) {
            return message.reply('‚ùå B·∫°n ph·∫£i v√†o room voice ƒë·ªÉ l√†m ngh·ªÅ MC!');
        }
        // L·∫•y th·ªùi gian join voice g·∫ßn nh·∫•t (gi·∫£ s·ª≠ ƒë√£ l∆∞u ·ªü cityUser.lastVoiceJoin)
        const now = new Date();
        const lastJoin = cityUser.lastVoiceJoin ? new Date(cityUser.lastVoiceJoin) : now;
        const minutes = Math.floor((now - lastJoin) / 60000);
        if (minutes < job.minVoiceMinutes) {
            return message.reply(`‚è≥ B·∫°n c·∫ßn ng·ªìi voice √≠t nh·∫•t ${job.minVoiceMinutes} ph√∫t m·ªõi nh·∫≠n th∆∞·ªüng! (ƒê√£: ${minutes} ph√∫t)`);
        }
        // Th∆∞·ªüng
        await updateUserRin(message.author.id, job.rewardPerDay);
        await updateCityUser(message.author.id, { lastVoiceJoin: null });
        return message.reply(`üé§ Ngh·ªÅ MC: B·∫°n ƒë√£ nh·∫≠n ${job.rewardPerDay} Rin cho ${job.minVoiceMinutes} ph√∫t voice!`);
    },

    // X·ª≠ l√Ω ngh·ªÅ Chat (Nh√† B√°o, MC)
    async handleChatWork(message, cityUser) {
        const job = JOB_TYPES[cityUser.job];
        const currentProgress = cityUser.workProgress || 0;

        if (currentProgress >= job.targetMessages) {
            return message.reply('‚úÖ B·∫°n ƒë√£ ho√†n th√†nh c√¥ng vi·ªác! H√£y ngh·ªâ v√† ch·ªù cooldown ƒë·ªÉ l√†m ca m·ªõi.');
        }

        const embed = new EmbedBuilder()
            .setTitle(`üì∞ B·∫ÆT ƒê·∫¶U CA L√ÄM ${job.name.toUpperCase()}`)
            .setDescription(`**Nhi·ªám v·ª•:** Chat ${job.targetMessages} tin nh·∫Øn trong server\n` +
                `**Ti·∫øn ƒë·ªô hi·ªán t·∫°i:** ${currentProgress}/${job.targetMessages} tin nh·∫Øn\n` +
                `**Th∆∞·ªüng:** ${job.rewardPerMessage} Rin/tin nh·∫Øn\n\n` +
                `**üìù B·∫Øt ƒë·∫ßu chat ƒë·ªÉ t√≠ch l≈©y ti·∫øn ƒë·ªô!**\n` +
                `M·ªói tin nh·∫Øn s·∫Ω ƒë∆∞·ª£c t√≠nh v√† b·∫°n nh·∫≠n ti·ªÅn ngay l·∫≠p t·ª©c.`)
            .setColor(COLORS.city)
            .setThumbnail(JOB_IMAGES[cityUser.job]);

        // B·∫Øt ƒë·∫ßu ca l√†m
        await updateCityUser(message.author.id, { 
            workStartTime: new Date(),
            workProgress: currentProgress 
        });

        await message.reply({ embeds: [embed] });
    },

    // X·ª≠ l√Ω ngh·ªÅ C√¥ng An  
    async handlePoliceWork(message, cityUser) {
        const embed = new EmbedBuilder()
            .setTitle('üëÆ‚Äç‚ôÇÔ∏è TU·∫¶N TRA C√îNG AN')
            .setDescription(`**Nhi·ªám v·ª• c·ªßa b·∫°n:**\n` +
                `‚Ä¢ Theo d√µi th√¥ng b√°o tr·ªôm c·∫Øp\n` +
                `‚Ä¢ B·∫Øt tr·ªôm trong v√≤ng 10 ph√∫t\n` +
                `‚Ä¢ Gi·∫£i ƒë·ªë ƒë·ªÉ b·∫Øt th√†nh c√¥ng\n\n` +
                `**C√°ch b·∫Øt tr·ªôm:**\n` +
                `\`,battrom @user\` khi c√≥ th√¥ng b√°o tr·ªôm\n\n` +
                `**‚ö†Ô∏è L∆∞u √Ω:** Gi·∫£i sai ƒë·ªë = th·∫•t b·∫°i!`)
            .setColor(COLORS.info)
            .setThumbnail(JOB_IMAGES.congan);

        await updateCityUser(message.author.id, { lastWork: new Date() });
        await message.reply({ embeds: [embed] });
    },

    // L∆∞u record tr·ªôm ƒë·ªÉ c√¥ng an b·∫Øt
    saveTheftRecord(thiefId, victimId, amount, guildId) {
        // L∆∞u v√†o memory ho·∫∑c database t·∫°m th·ªùi
        // S·∫Ω ƒë∆∞·ª£c x√≥a sau 10 ph√∫t
        const record = {
            thiefId,
            victimId,
            amount,
            guildId, // Th√™m guild ID ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ ho·∫°t ƒë·ªông trong server n√†y
            timestamp: Date.now()
        };
        
        // Gi·∫£ s·ª≠ c√≥ global object ƒë·ªÉ l∆∞u
        if (!global.theftRecords) global.theftRecords = [];
        global.theftRecords.push(record);
        
        // T·ª± ƒë·ªông x√≥a sau 10 ph√∫t
        setTimeout(() => {
            global.theftRecords = global.theftRecords.filter(r => r.timestamp !== record.timestamp);
        }, 10 * 60 * 1000);
    },

    // X·ª≠ l√Ω b·∫Øt tr·ªôm
    async handleCatchThief(message, policeUser, thiefUser) {
        if (!global.theftRecords) global.theftRecords = [];
        
        const now = Date.now();
        const recentTheft = global.theftRecords.find(record => 
            record.thiefId === thiefUser.id && 
            (now - record.timestamp) <= 10 * 60 * 1000 // 10 ph√∫t
        );

        if (!recentTheft) {
            return message.reply('‚ùå Kh√¥ng c√≥ b·∫±ng ch·ª©ng tr·ªôm c·∫Øp g·∫ßn ƒë√¢y c·ªßa ng∆∞·ªùi n√†y!');
        }

        // Random c√¢u ƒë·ªë
        const puzzle = POLICE_PUZZLES[Math.floor(Math.random() * POLICE_PUZZLES.length)];
        
        const embed = new EmbedBuilder()
            .setTitle('üß© GI·∫¢I ƒê·ªê ƒê·ªÇ B·∫ÆT TR·ªòM')
            .setDescription(`**C√¢u h·ªèi:** ${puzzle.question}\n\n` +
                `B·∫°n c√≥ **30 gi√¢y** ƒë·ªÉ tr·∫£ l·ªùi!\n` +
                `Tr·∫£ l·ªùi ƒë√∫ng = b·∫Øt th√†nh c√¥ng\n` +
                `Tr·∫£ l·ªùi sai = tr·ªôm tho√°t`)
            .setColor(COLORS.warning);

        const puzzleMsg = await message.reply({ embeds: [embed] });

        // ƒê·ª£i c√¢u tr·∫£ l·ªùi
        const filter = (msg) => msg.author.id === message.author.id;
        try {
            const collected = await message.channel.awaitMessages({ 
                filter, 
                max: 1, 
                time: 30000, 
                errors: ['time'] 
            });
            
            const answer = collected.first().content.toLowerCase().trim();
            
            if (answer === puzzle.answer.toLowerCase()) {
                // B·∫Øt th√†nh c√¥ng
                const reward = 500;
                await updateUserRin(message.author.id, reward);
                await updateUserRin(thiefUser.id, -recentTheft.amount); // Tr·ªôm m·∫•t ti·ªÅn

                const successMsg = JOB_NOTIFICATIONS.police_catch
                    .replace('{police}', message.author.displayName)
                    .replace('{thief}', thiefUser.displayName)
                    .replace('{reward}', reward.toLocaleString());

                await message.channel.send(successMsg);

                // X√≥a record
                global.theftRecords = global.theftRecords.filter(r => r.timestamp !== recentTheft.timestamp);

            } else {
                // B·∫Øt th·∫•t b·∫°i
                const failMsg = JOB_NOTIFICATIONS.police_fail
                    .replace('{police}', message.author.displayName)
                    .replace('{thief}', thiefUser.displayName);

                await message.channel.send(failMsg);
            }

        } catch (error) {
            await message.reply('‚è∞ H·∫øt th·ªùi gian! Tr·ªôm ƒë√£ tho√°t!');
        }
    }
};