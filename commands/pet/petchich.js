const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { getPet, updatePet } = require('../../utils/database');
const { PET_IMAGES } = require('../../utils/constants');

// L∆∞u tr·ªØ c√°c l·ªùi m·ªùi gh√©p c·∫∑p
const breedingInvitations = new Map();

module.exports = {
    name: 'petchich',
    description: 'Gh√©p c·∫∑p th√∫ c∆∞ng v·ªõi ng∆∞·ªùi kh√°c',
    
    async execute(message, args) {
        try {
            // Clean up c√°c l·ªùi m·ªùi h·∫øt h·∫°n
            const now = Date.now();
            for (const [inviteId, invitation] of breedingInvitations.entries()) {
                if (now > invitation.expiresAt) {
                    breedingInvitations.delete(inviteId);
                }
            }

            const userId = message.author.id;
            const pet = await getPet(userId);
            
            if (!pet) {
                return message.reply('‚ùå B·∫°n ch∆∞a c√≥ th√∫ c∆∞ng! H√£y d√πng l·ªánh `,muapet` ƒë·ªÉ mua th√∫ c∆∞ng.');
            }

            // Ki·ªÉm tra mention user
            const targetUser = message.mentions.users.first();
            if (!targetUser) {
                return message.reply('‚ùå Vui l√≤ng tag ng∆∞·ªùi b·∫°n mu·ªën gh√©p c·∫∑p th√∫ c∆∞ng! V√≠ d·ª•: `,petchich @t√™n_ng∆∞·ªùi_d√πng`');
            }

            if (targetUser.id === userId) {
                return message.reply('‚ùå B·∫°n kh√¥ng th·ªÉ gh√©p c·∫∑p th√∫ c∆∞ng v·ªõi ch√≠nh m√¨nh!');
            }

            // Ki·ªÉm tra th√∫ c∆∞ng c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c tag
            const targetPet = await getPet(targetUser.id);
            if (!targetPet) {
                return message.reply(`‚ùå ${targetUser.displayName} ch∆∞a c√≥ th√∫ c∆∞ng!`);
            }

            // Ki·ªÉm tra ƒëi·ªÅu ki·ªán gh√©p c·∫∑p
            if (pet.health !== 'B√¨nh th∆∞·ªùng') {
                return message.reply('‚ùå Th√∫ c∆∞ng c·ªßa b·∫°n ƒëang ·ªëm, kh√¥ng th·ªÉ gh√©p c·∫∑p!');
            }

            if (targetPet.health !== 'B√¨nh th∆∞·ªùng') {
                return message.reply(`‚ùå Th√∫ c∆∞ng c·ªßa ${targetUser.displayName} ƒëang ·ªëm, kh√¥ng th·ªÉ gh√©p c·∫∑p!`);
            }

            if (pet.gender === targetPet.gender) {
                return message.reply('‚ùå Hai th√∫ c∆∞ng c√πng gi·ªõi t√≠nh kh√¥ng th·ªÉ gh√©p c·∫∑p!');
            }

            if (pet.married && pet.partnerId === targetUser.id) {
                // Ki·ªÉm tra xem c√≥ ƒëang trong qu√° tr√¨nh breeding kh√¥ng (race condition protection)
                const breedingKey = `${userId}_${targetUser.id}`;
                if (global.activeBreeding && global.activeBreeding.has(breedingKey)) {
                    return message.reply('‚è∞ ƒêang x·ª≠ l√Ω y√™u c·∫ßu sinh s·∫£n, vui l√≤ng ch·ªù!');
                }
                
                // Set flag ƒëang breeding
                if (!global.activeBreeding) global.activeBreeding = new Set();
                global.activeBreeding.add(breedingKey);
                
                try {
                // N·∫øu ƒë√£ k·∫øt h√¥n v·ªõi nhau, th·ª≠ sinh s·∫£n
                return await this.tryBreeding(message, pet, targetPet, targetUser);
                } finally {
                    // Lu√¥n cleanup flag sau khi xong
                    global.activeBreeding.delete(breedingKey);
                }
            }

            if (pet.married) {
                return message.reply('‚ùå Th√∫ c∆∞ng c·ªßa b·∫°n ƒë√£ k·∫øt h√¥n r·ªìi!');
            }

            if (targetPet.married) {
                return message.reply(`‚ùå Th√∫ c∆∞ng c·ªßa ${targetUser.displayName} ƒë√£ k·∫øt h√¥n r·ªìi!`);
            }

            // T·∫°o l·ªùi m·ªùi gh√©p c·∫∑p
            const expiresAt = Date.now() + 60000; // 1 ph√∫t
            const invitationId = `${userId}_${targetUser.id}_${Date.now()}`;
            
            breedingInvitations.set(invitationId, {
                sender: message.author,
                target: targetUser,
                pet1: pet,
                pet2: targetPet,
                channelId: message.channel.id,
                expiresAt: expiresAt 
            });
            const embed = new EmbedBuilder()
                .setTitle('üíï L·ªúI M·ªúI GH√âP C·∫∂P TH√ö C∆ØNG')
                .setDescription(`**${message.author.displayName}** mu·ªën gh√©p c·∫∑p th√∫ c∆∞ng v·ªõi **${targetUser.displayName}**!\n\n` +
                    `**üêæ Th√¥ng tin hai th√∫ c∆∞ng:**\n` +
                    `‚Ä¢ **${pet.petType}** (${pet.gender}) - Tu·ªïi: ${pet.age || 0}\n` +
                    `‚Ä¢ **${targetPet.petType}** (${targetPet.gender}) - Tu·ªïi: ${targetPet.age || 0}\n\n` +
                    `**üíç K·∫øt qu·∫£ n·∫øu ƒë·ªìng √Ω:**\n` +
                    `‚Ä¢ Hai th√∫ c∆∞ng s·∫Ω k·∫øt h√¥n\n` +
                    `‚Ä¢ C√≥ c∆° h·ªôi sinh con v√† nh·∫≠n th∆∞·ªüng\n` +
                    `‚Ä¢ C√≥ th·ªÉ ti·∫øp t·ª•c gh√©p c·∫∑p trong t∆∞∆°ng lai\n\n` +
                    `${targetUser}, b·∫°n c√≥ ƒë·ªìng √Ω kh√¥ng?\n` +
                    `‚è∞ **H·∫øt h·∫°n v√†o:** <t:${Math.floor(expiresAt/1000)}:R>`)
                .setColor('#FF69B4')
                .setFooter({ text: 'L·ªùi m·ªùi s·∫Ω h·∫øt h·∫°n sau 60 gi√¢y' })
                .setTimestamp();

            const acceptButton = new ButtonBuilder()
                .setCustomId(`breed_accept_${invitationId}`)
                .setLabel('üíï ƒê·ªìng √Ω')
                .setStyle(ButtonStyle.Success);

            const rejectButton = new ButtonBuilder()
                .setCustomId(`breed_reject_${invitationId}`)
                .setLabel('‚ùå T·ª´ ch·ªëi')
                .setStyle(ButtonStyle.Danger);

            const row = new ActionRowBuilder().addComponents(acceptButton, rejectButton);

            await message.reply({ embeds: [embed], components: [row] });

            // T·ª± ƒë·ªông x√≥a l·ªùi m·ªùi sau 1 ph√∫t
            const timeoutDuration = expiresAt - Date.now();
            
            setTimeout(() => {
                breedingInvitations.delete(invitationId);
            }, timeoutDuration);

        } catch (error) {
            console.error('L·ªói petchich:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi gh√©p c·∫∑p th√∫ c∆∞ng!');
        }
    },

    // X·ª≠ l√Ω breeding gi·ªØa hai th√∫ ƒë√£ k·∫øt h√¥n
    async tryBreeding(message, pet1, pet2, targetUser) {
        const now = new Date();
        
        // L·∫•y l·∫°i data m·ªõi nh·∫•t t·ª´ database ƒë·ªÉ tr√°nh cache stale
        const freshPet1 = await getPet(pet1.userId);
        const freshPet2 = await getPet(targetUser.id);
        
        // Ki·ªÉm tra cooldown breeding (24 gi·ªù) cho C·∫¢ HAI th√∫ c∆∞ng
        
        if (freshPet1?.lastBred) {
            const hoursSinceLastBred1 = (now - new Date(freshPet1.lastBred)) / (1000 * 60 * 60);
            if (hoursSinceLastBred1 < 24) {
                const remainingHours = Math.ceil(24 - hoursSinceLastBred1);
                return message.reply(`‚è∞ Th√∫ c∆∞ng c·ªßa ${message.author.displayName} v·∫´n ƒëang ngh·ªâ ng∆°i sau l·∫ßn sinh s·∫£n tr∆∞·ªõc! H√£y quay l·∫°i sau **${remainingHours} gi·ªù**.`);
            }
        }
        
        if (freshPet2?.lastBred) {
            const hoursSinceLastBred2 = (now - new Date(freshPet2.lastBred)) / (1000 * 60 * 60);
            if (hoursSinceLastBred2 < 24) {
                const remainingHours = Math.ceil(24 - hoursSinceLastBred2);
                return message.reply(`‚è∞ Th√∫ c∆∞ng c·ªßa ${targetUser.displayName} v·∫´n ƒëang ngh·ªâ ng∆°i sau l·∫ßn sinh s·∫£n tr∆∞·ªõc! H√£y quay l·∫°i sau **${remainingHours} gi·ªù**.`);
            }
        }

        // T√≠nh t·ª∑ l·ªá th√†nh c√¥ng d·ª±a tr√™n tu·ªïi v√† s·ª©c kh·ªèe (s·ª≠ d·ª•ng fresh data)
        const age1 = freshPet1?.age || pet1.age || 0;
        const age2 = freshPet2?.age || pet2.age || 0;
        const avgAge = (age1 + age2) / 2;
        
        let successRate = 0.3; // Base 30%
        if (avgAge >= 10) successRate += 0.2; // +20% n·∫øu trung b√¨nh >= 10 tu·ªïi
        if (avgAge >= 20) successRate += 0.2; // +20% n·ªØa n·∫øu >= 20 tu·ªïi
        
        const health1 = freshPet1?.health || pet1.health;
        const health2 = freshPet2?.health || pet2.health;
        if (health1 === 'B√¨nh th∆∞·ªùng' && health2 === 'B√¨nh th∆∞·ªùng') successRate += 0.1; // +10% n·∫øu c·∫£ hai kh·ªèe

        const isSuccess = Math.random() < successRate;

        // C·∫≠p nh·∫≠t lastBred cho c·∫£ hai th√∫
        try {
        await updatePet(pet1.userId, { lastBred: now });
        await updatePet(targetUser.id, { lastBred: now });
            
            console.log(`‚úÖ Breeding cooldown set: 24h for both pets`);
            
        } catch (error) {
            console.error('‚ùå Error updating pet lastBred:', error);
            return message.reply('‚ùå C√≥ l·ªói khi c·∫≠p nh·∫≠t th√¥ng tin th√∫ c∆∞ng! Vui l√≤ng th·ª≠ l·∫°i.');
        }

        if (isSuccess) {
            // Sinh s·∫£n th√†nh c√¥ng
            const breedCount1 = (freshPet1?.breedCount || pet1.breedCount || 0) + 1;
            const breedCount2 = (freshPet2?.breedCount || pet2.breedCount || 0) + 1;
            
            await updatePet(pet1.userId, { breedCount: breedCount1 });
            await updatePet(targetUser.id, { breedCount: breedCount2 });

            // Th∆∞·ªüng Rin cho c·∫£ hai
            const { updateUserRin } = require('../../utils/database');
            const reward = 100 + (breedCount1 * 20); // Base 100 + bonus theo s·ªë l·∫ßn ƒë·∫ª
            
            await updateUserRin(pet1.userId, reward);
            await updateUserRin(targetUser.id, reward);

            const embed = new EmbedBuilder()
                .setTitle('üéâ SINH S·∫¢N TH√ÄNH C√îNG!')
                .setDescription(`**${freshPet1?.petType || pet1.petType}** v√† **${freshPet2?.petType || pet2.petType}** ƒë√£ sinh con th√†nh c√¥ng! üë∂\n\n` +
                    `**üéÅ Ph·∫ßn th∆∞·ªüng:**\n` +
                    `‚Ä¢ ${message.author.displayName}: +${reward} Rin\n` +
                    `‚Ä¢ ${targetUser.displayName}: +${reward} Rin\n\n` +
                    `**üìä Th·ªëng k√™:**\n` +
                    `‚Ä¢ ${freshPet1?.petType || pet1.petType}: ${breedCount1} l·∫ßn ƒë·∫ª\n` +
                    `‚Ä¢ ${freshPet2?.petType || pet2.petType}: ${breedCount2} l·∫ßn ƒë·∫ª\n` +
                    `‚Ä¢ T·ª∑ l·ªá th√†nh c√¥ng: ${Math.round(successRate * 100)}%\n\n` +
                    `**‚è∞ L·∫ßn ti·∫øp theo:** 24 gi·ªù n·ªØa`)
                .setColor('#00FF00')
                .setFooter({ text: 'Ch√∫c m·ª´ng c·∫£ hai! H√£y ti·∫øp t·ª•c chƒÉm s√≥c th√∫ c∆∞ng! üêæ' })
                .setTimestamp();

            return message.reply({ embeds: [embed] });

        } else {
            // Sinh s·∫£n th·∫•t b·∫°i
            const embed = new EmbedBuilder()
                .setTitle('üòî SINH S·∫¢N TH·∫§T B·∫†I')
                .setDescription(`**${freshPet1?.petType || pet1.petType}** v√† **${freshPet2?.petType || pet2.petType}** ƒë√£ c·ªë g·∫Øng nh∆∞ng kh√¥ng th√†nh c√¥ng...\n\n` +
                    `**üìä Th√¥ng tin:**\n` +
                    `‚Ä¢ T·ª∑ l·ªá th√†nh c√¥ng: ${Math.round(successRate * 100)}%\n` +
                    `‚Ä¢ K·∫øt qu·∫£: Th·∫•t b·∫°i\n` +
                    `‚Ä¢ Ph·∫ßn th∆∞·ªüng: 0 Rin\n\n` +
                    `**üí° Tips ƒë·ªÉ tƒÉng t·ª∑ l·ªá th√†nh c√¥ng:**\n` +
                    `‚Ä¢ Cho ƒÉn ƒë·ªÅu ƒë·∫∑n ƒë·ªÉ tƒÉng tu·ªïi\n` +
                    `‚Ä¢ Gi·ªØ s·ª©c kh·ªèe t·ªët\n` +
                    `‚Ä¢ Th·ª≠ l·∫°i sau 24 gi·ªù\n\n` +
                    `**‚è∞ L·∫ßn ti·∫øp theo:** 24 gi·ªù n·ªØa`)
                .setColor('#FF6B6B')
                .setFooter({ text: 'ƒê·ª´ng n·∫£n l√≤ng! H√£y th·ª≠ l·∫°i sau! üêæ' })
                .setTimestamp();

            return message.reply({ embeds: [embed] });
        }
    },

    // X·ª≠ l√Ω button interactions
    async handleInteraction(interaction) {
        if (!interaction.customId.startsWith('breed_')) return;

        const parts = interaction.customId.split('_');
        const action = parts[0]; // 'breed'
        const result = parts[1]; // 'accept' ho·∫∑c 'reject'
        const invitationId = parts.slice(2).join('_'); // Gh√©p l·∫°i ph·∫ßn c√≤n l·∫°i v√¨ c√≥ th·ªÉ c√≥ d·∫•u _ trong ID
        
        const invitation = breedingInvitations.get(invitationId);

        if (!invitation) {
            return interaction.reply({ content: '‚ùå L·ªùi m·ªùi ƒë√£ h·∫øt h·∫°n!', flags: 64 });
        }

        // Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n ch√≠nh x√°c
        const currentTime = Date.now();
        
        if (currentTime > invitation.expiresAt) {
            breedingInvitations.delete(invitationId);
            return interaction.reply({ content: '‚ùå L·ªùi m·ªùi ƒë√£ h·∫øt h·∫°n!', flags: 64 });
        }

        if (interaction.user.id !== invitation.target.id) {
            return interaction.reply({ content: '‚ùå Ch·ªâ ng∆∞·ªùi ƒë∆∞·ª£c tag m·ªõi c√≥ th·ªÉ ph·∫£n h·ªìi!', flags: 64 });
        }

        if (result === 'accept') {
            // ƒê·ªìng √Ω gh√©p c·∫∑p - k·∫øt h√¥n
            try {
                await updatePet(invitation.pet1.userId, { 
                    married: true, 
                    partnerId: invitation.target.id,
                    marriedAt: new Date()
                });
                
                await updatePet(invitation.target.id, { 
                    married: true, 
                    partnerId: invitation.pet1.userId,
                    marriedAt: new Date()
                });

                const embed = new EmbedBuilder()
                    .setTitle('üíç K·∫æT H√îN TH√ÄNH C√îNG!')
                    .setDescription(`**${invitation.pet1.petType}** v√† **${invitation.pet2.petType}** ƒë√£ k·∫øt h√¥n! üéâ\n\n` +
                        `**üë´ C·∫∑p ƒë√¥i:**\n` +
                        `‚Ä¢ ${invitation.sender.displayName} ‚ÜîÔ∏è ${invitation.target.displayName}\n\n` +
                        `**üéØ T√≠nh nƒÉng m·ªü kh√≥a:**\n` +
                        `‚Ä¢ C√≥ th·ªÉ sinh s·∫£n ƒë·ªÉ nh·∫≠n th∆∞·ªüng\n` +
                        `‚Ä¢ S·ª≠ d·ª•ng l·∫°i \`,petchich @partner\` ƒë·ªÉ th·ª≠ sinh con\n` +
                        `‚Ä¢ M·ªói 24 gi·ªù c√≥ th·ªÉ th·ª≠ 1 l·∫ßn\n\n` +
                        `**üíï Ch√∫c m·ª´ng c·∫£ hai!**`)
                    .setColor('#FF69B4')
                    .setFooter({ text: 'H√£y chƒÉm s√≥c th√∫ c∆∞ng th·∫≠t t·ªët! üêæ' })
                    .setTimestamp();

                // Update message ƒë·ªÉ x√≥a buttons
                await interaction.update({ embeds: [embed], components: [] });

            } catch (error) {
                console.error('L·ªói k·∫øt h√¥n pet:', error);
                await interaction.reply({ content: '‚ùå C√≥ l·ªói x·∫£y ra khi k·∫øt h√¥n!', flags: 64 });
            }

        } else {
            // T·ª´ ch·ªëi gh√©p c·∫∑p
            const embed = new EmbedBuilder()
                .setTitle('üíî ƒê√É T·ª™ CH·ªêI')
                .setDescription(`${invitation.target.displayName} ƒë√£ t·ª´ ch·ªëi l·ªùi m·ªùi gh√©p c·∫∑p th√∫ c∆∞ng.`)
                .setColor('#FF6B6B');

            // Update message ƒë·ªÉ x√≥a buttons
            await interaction.update({ embeds: [embed], components: [] });
        }

        breedingInvitations.delete(invitationId);
    }
}; 