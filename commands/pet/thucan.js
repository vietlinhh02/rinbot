const { EmbedBuilder } = require('discord.js');
const { getPet, updatePet } = require('../../utils/database');
const FastUtils = require('../../utils/fastUtils');
const { PET_IMAGES } = require('../../utils/constants');
const AntiSpamManager = require('../../utils/antiSpam');

module.exports = {
    name: 'thucan',
    description: 'Cho th√∫ c∆∞ng ƒÉn (m·ªói 3 gi·ªù, 20 Rin)',
    
    async execute(message, args) {
        const userId = message.author.id;
        
        try {
            // B·∫£o v·ªá command kh·ªèi spam v·ªõi cooldown 2 gi√¢y
            await AntiSpamManager.executeWithProtection(
                userId, 
                'thucan', 
                2, // 2 gi√¢y cooldown
                this.executeThuCan,
                this,
                message,
                args
            );
        } catch (error) {
            return message.reply(error.message);
        }
    },

    async executeThuCan(message, args) {
        try {
            const userId = message.author.id;
            const pet = await getPet(userId);
            
            if (!pet) {
                return message.reply('‚ùå B·∫°n ch∆∞a c√≥ th√∫ c∆∞ng! H√£y d√πng l·ªánh `,muapet` ƒë·ªÉ mua th√∫ c∆∞ng.');
            }

            const now = new Date();
            
            // Ki·ªÉm tra cooldown 3 gi·ªù
            if (pet.lastFed) {
                const hoursSinceLastFed = (now - new Date(pet.lastFed)) / (1000 * 60 * 60);
                if (hoursSinceLastFed < 3) {
                    const remainingTime = Math.ceil(3 - hoursSinceLastFed);
                    const hours = Math.floor(remainingTime);
                    const minutes = Math.ceil((remainingTime - hours) * 60);
                    
                    return message.reply(`‚è∞ Th√∫ c∆∞ng v·∫´n c√≤n no! H√£y quay l·∫°i sau **${hours > 0 ? hours + 'h ' : ''}${minutes}p**.`);
                }
            }

            // Ki·ªÉm tra s·ªë Rin
            if (!(await FastUtils.canAfford(userId, 20))) {
                return message.reply('‚ùå C·∫ßn 20 Rin!');
            }

            // Ki·ªÉm tra l·∫°i pet v√† ti·ªÅn tr∆∞·ªõc khi th·ª±c hi·ªán (tr√°nh race condition)
            const freshPet = await getPet(userId);
            if (!freshPet) {
                return message.reply('‚ùå Kh√¥ng t√¨m th·∫•y th√∫ c∆∞ng! (Ph√°t hi·ªán spam)');
            }

            // Ki·ªÉm tra l·∫°i cooldown
            if (freshPet.lastFed) {
                const hoursSinceLastFed = (now - new Date(freshPet.lastFed)) / (1000 * 60 * 60);
                if (hoursSinceLastFed < 3) {
                    const remainingTime = Math.ceil(3 - hoursSinceLastFed);
                    const hours = Math.floor(remainingTime);
                    const minutes = Math.ceil((remainingTime - hours) * 60);
                    
                    return message.reply(`‚è∞ Th√∫ c∆∞ng v·∫´n c√≤n no! (Ph√°t hi·ªán spam - c√≤n **${hours > 0 ? hours + 'h ' : ''}${minutes}p**)`);
                }
            }

            // Tr·ª´ ti·ªÅn v√† cho ƒÉn
            await FastUtils.updateFastUserRin(userId, -20);
            
            // Random c√°c hi·ªáu ·ª©ng khi cho ƒÉn
            const feedingResults = [
                { 
                    message: 'r·∫•t th√≠ch m√≥n ƒÉn n√†y! üòã', 
                    effect: 'normal',
                    healthBonus: false
                },
                { 
                    message: 'ƒÉn ngon l√†nh! üòä', 
                    effect: 'normal',
                    healthBonus: false
                },
                { 
                    message: 'no cƒÉng b·ª•ng! ü§§', 
                    effect: 'normal',
                    healthBonus: false
                },
                { 
                    message: 'ƒÉn xong c√≤n xin th√™m! üòç', 
                    effect: 'happy',
                    healthBonus: false
                },
                { 
                    message: 'c·∫£m th·∫•y kh·ªèe kho·∫Øn h∆°n sau b·ªØa ƒÉn! ‚ú®', 
                    effect: 'healing',
                    healthBonus: true
                }
            ];

            const randomResult = feedingResults[Math.floor(Math.random() * feedingResults.length)];
            
            // C·∫≠p nh·∫≠t th√¥ng tin pet (d√πng freshPet)
            const updateData = {
                lastFed: now,
                age: freshPet.age + 1 // TƒÉng tu·ªïi khi cho ƒÉn
            };

            // N·∫øu c√≥ hi·ªáu ·ª©ng ch·ªØa l√†nh v√† th√∫ ƒëang ·ªëm
            if (randomResult.healthBonus && freshPet.health === '·ªêm') {
                updateData.health = 'B√¨nh th∆∞·ªùng';
            }

            await updatePet(userId, updateData);

            // Random kh·∫£ nƒÉng th√∫ c∆∞ng ·ªëm (5% chance n·∫øu kh√¥ng ƒÉn ƒë√∫ng gi·ªù)
            let healthWarning = '';
            if (!freshPet.lastFed && Math.random() < 0.05) {
                await updatePet(userId, { health: '·ªêm' });
                healthWarning = '\n‚ö†Ô∏è **Th√∫ c∆∞ng c√≥ v·∫ª kh√¥ng kh·ªèe! H√£y chƒÉm s√≥c c·∫©n th·∫≠n.**';
            }

            const embed = new EmbedBuilder()
                .setTitle('üçñ CHO ƒÇN TH√ÄNH C√îNG!')
                .setDescription(`**${freshPet.petType}** c·ªßa ${message.author.displayName} ${randomResult.message}\n\n` +
                    `**üìä Th√¥ng tin:**\n` +
                    `‚Ä¢ Chi ph√≠: 20 Rin\n` +
                    `‚Ä¢ Tu·ªïi: ${freshPet.age + 1} (tƒÉng +1)\n` +
                    `‚Ä¢ S·ª©c kh·ªèe: ${randomResult.healthBonus && freshPet.health === '·ªêm' ? 'B√¨nh th∆∞·ªùng (ƒë√£ h·ªìi ph·ª•c! ‚ú®)' : freshPet.health}\n` +
                    `‚Ä¢ L·∫ßn ti·∫øp theo: 3 gi·ªù n·ªØa\n\n` +
                    `**üí° Tip:** Cho ƒÉn ƒë·ªÅu ƒë·∫∑n ƒë·ªÉ th√∫ c∆∞ng kh·ªèe m·∫°nh v√† c√≥ c∆° h·ªôi sinh s·∫£n!${healthWarning}`)
                .setThumbnail(PET_IMAGES[freshPet.petType] || null)
                .setColor(randomResult.effect === 'healing' ? '#00FF00' : randomResult.effect === 'happy' ? '#FFD700' : '#66CCFF')
                .setFooter({ text: 'Th√∫ c∆∞ng c·ªßa b·∫°n r·∫•t h·∫°nh ph√∫c! üêæ' })
                .setTimestamp();

            // Th√™m field ƒë·∫∑c bi·ªát n·∫øu c√≥ hi·ªáu ·ª©ng ch·ªØa l√†nh
            if (randomResult.healthBonus && freshPet.health === '·ªêm') {
                embed.addFields({
                    name: '‚ú® Hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát!',
                    value: 'M√≥n ƒÉn b·ªï d∆∞·ª°ng ƒë√£ gi√∫p th√∫ c∆∞ng h·ªìi ph·ª•c s·ª©c kh·ªèe!',
                    inline: false
                });
            }

            await message.reply({ embeds: [embed] });

        } catch (error) {
            console.error('L·ªói thucan:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi cho th√∫ c∆∞ng ƒÉn!');
        }
    }
}; 