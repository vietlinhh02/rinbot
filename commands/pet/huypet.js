const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { getPet, deletePet, getUserRin, updateUserRin, updatePet } = require('../../utils/database');
const { PET_IMAGES } = require('../../utils/constants');

module.exports = {
    name: 'huypet',
    description: 'H·ªßy th√∫ c∆∞ng v√† nh·∫≠n b·ªìi th∆∞·ªùng',
    
    async execute(message, args) {
        try {
            const userId = message.author.id;
            const pet = await getPet(userId);
            
            if (!pet) {
                return message.reply('‚ùå B·∫°n ch∆∞a c√≥ th√∫ c∆∞ng! H√£y d√πng l·ªánh `,muapet` ƒë·ªÉ mua th√∫ c∆∞ng.');
            }

            const now = new Date();
            
            // T√≠nh tu·ªïi v√† th·ªùi gian s·ªü h·ªØu
            const petAge = pet.age || 0;
            const ownedDays = Math.floor((now - new Date(pet.createdAt)) / (1000 * 60 * 60 * 24));
            
            // T√≠nh b·ªìi th∆∞·ªùng d·ª±a tr√™n nhi·ªÅu y·∫øu t·ªë
            const baseCompensation = 60; // B·ªìi th∆∞·ªùng c∆° b·∫£n
            const ageCompensation = Math.floor(petAge / 3) * 10; // 10 Rin m·ªói 3 tu·ªïi
            const breedCompensation = pet.breedCount * 30; // 30 Rin m·ªói l·∫ßn ƒë·∫ª
            const healthBonus = pet.health === 'B√¨nh th∆∞·ªùng' ? 20 : 0; // Bonus s·ª©c kh·ªèe t·ªët
            const marriageBonus = pet.married ? 25 : 0; // Bonus n·∫øu ƒë√£ k·∫øt h√¥n
            const timeBonus = Math.min(ownedDays * 2, 50); // 2 Rin/ng√†y, t·ªëi ƒëa 50 Rin
            
            const totalCompensation = baseCompensation + ageCompensation + breedCompensation + healthBonus + marriageBonus + timeBonus;

            // Th√¥ng tin v·ªÅ ng∆∞·ªùi ph·ªëi ng·∫´u
            let partnerInfo = '';
            if (pet.married && pet.partnerId) {
                try {
                    const partnerUser = await message.client.users.fetch(pet.partnerId);
                    partnerInfo = `üíç **Ng∆∞·ªùi ph·ªëi ng·∫´u:** ${partnerUser.displayName}\n`;
                } catch (error) {
                    partnerInfo = 'üíç **Ng∆∞·ªùi ph·ªëi ng·∫´u:** (Kh√¥ng x√°c ƒë·ªãnh)\n';
                }
            }

            const embed = new EmbedBuilder()
                .setTitle('üîÑ H·ª¶Y TH√ö C∆ØNG')
                .setDescription(`**${pet.petType}** c·ªßa ${message.author.displayName}\n\n` +
                    `**üìã Th√¥ng tin th√∫ c∆∞ng:**\n` +
                    `üé≠ Lo√†i: ${pet.petType} (${pet.gender})\n` +
                    `‚è∞ Tu·ªïi: ${petAge} tu·ªïi (${ownedDays} ng√†y s·ªü h·ªØu)\n` +
                    `üíö S·ª©c kh·ªèe: ${pet.health}\n` +
                    `üë∂ S·ªë l·∫ßn ƒë·∫ª: ${pet.breedCount} l·∫ßn\n` +
                    `${partnerInfo}\n` +
                    `**üí∞ T√≠nh to√°n b·ªìi th∆∞·ªùng:**\n` +
                    `‚Ä¢ B·ªìi th∆∞·ªùng c∆° b·∫£n: ${baseCompensation} Rin\n` +
                    `‚Ä¢ Tu·ªïi t√°c: +${ageCompensation} Rin (${petAge} tu·ªïi)\n` +
                    `‚Ä¢ Sinh s·∫£n: +${breedCompensation} Rin (${pet.breedCount} l·∫ßn)\n` +
                    `‚Ä¢ S·ª©c kh·ªèe t·ªët: +${healthBonus} Rin\n` +
                    `‚Ä¢ K·∫øt h√¥n: +${marriageBonus} Rin\n` +
                    `‚Ä¢ Th·ªùi gian chƒÉm s√≥c: +${timeBonus} Rin\n` +
                    `‚Ä¢ **T·ªïng b·ªìi th∆∞·ªùng:** ${totalCompensation} Rin\n\n` +
                    `‚ö†Ô∏è **C·∫£nh b√°o:** H·ªßy th√∫ c∆∞ng s·∫Ω x√≥a vƒ©nh vi·ªÖn v√† kh√¥ng th·ªÉ ho√†n t√°c!\n` +
                    `üí° **L∆∞u √Ω:** ƒê√¢y l√† b·ªìi th∆∞·ªùng th·∫•p h∆°n b√°n pet, nh∆∞ng √°p d·ª•ng cho c·∫£ pet ch∆∞a sinh s·∫£n.`)
                .setThumbnail(PET_IMAGES[pet.petType] || null)
                .setColor('#FF9900')
                .setFooter({ text: 'H·ªßy pet = b·ªìi th∆∞·ªùng th·∫•p h∆°n, b√°n pet = gi√° tr·ªã cao h∆°n' })
                .setTimestamp();

            const confirmButton = new ButtonBuilder()
                .setCustomId(`cancel_pet_confirm_${userId}`)
                .setLabel(`üîÑ H·ªßy v√† nh·∫≠n ${totalCompensation} Rin`)
                .setStyle(ButtonStyle.Danger);

            const cancelButton = new ButtonBuilder()
                .setCustomId(`cancel_pet_cancel_${userId}`)
                .setLabel('‚ùå Gi·ªØ l·∫°i pet')
                .setStyle(ButtonStyle.Secondary);

            const row = new ActionRowBuilder().addComponents(confirmButton, cancelButton);

            await message.reply({ embeds: [embed], components: [row] });

        } catch (error) {
            console.error('L·ªói huypet:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi h·ªßy th√∫ c∆∞ng!');
        }
    },

    // X·ª≠ l√Ω button interactions
    async handleInteraction(interaction) {
        if (!interaction.customId.startsWith('cancel_pet_')) return;

        const [action, pet, result, userId] = interaction.customId.split('_');
        
        if (interaction.user.id !== userId) {
            return interaction.reply({ content: '‚ùå Ch·ªâ ch·ªß th√∫ c∆∞ng m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán!', ephemeral: true });
        }

        if (result === 'confirm') {
            try {
                const pet = await getPet(userId);
                if (!pet) {
                    return interaction.reply({ content: '‚ùå Kh√¥ng t√¨m th·∫•y th√∫ c∆∞ng!', ephemeral: true });
                }

                // T√≠nh l·∫°i b·ªìi th∆∞·ªùng ƒë·ªÉ ƒë·∫£m b·∫£o ch√≠nh x√°c
                const now = new Date();
                const petAge = pet.age || 0;
                const ownedDays = Math.floor((now - new Date(pet.createdAt)) / (1000 * 60 * 60 * 24));
                const baseCompensation = 60;
                const ageCompensation = Math.floor(petAge / 3) * 10;
                const breedCompensation = pet.breedCount * 30;
                const healthBonus = pet.health === 'B√¨nh th∆∞·ªùng' ? 20 : 0;
                const marriageBonus = pet.married ? 25 : 0;
                const timeBonus = Math.min(ownedDays * 2, 50);
                const totalCompensation = baseCompensation + ageCompensation + breedCompensation + healthBonus + marriageBonus + timeBonus;

                // Th√™m ti·ªÅn b·ªìi th∆∞·ªùng cho ng∆∞·ªùi ch∆°i
                await updateUserRin(userId, totalCompensation);

                // X·ª≠ l√Ω divorce n·∫øu th√∫ c∆∞ng ƒë√£ k·∫øt h√¥n
                let divorceInfo = '';
                if (pet.married && pet.partnerId) {
                    try {
                        // C·∫≠p nh·∫≠t partner th√†nh ƒë·ªôc th√¢n
                        await updatePet(pet.partnerId, { 
                            married: false, 
                            partnerId: null,
                            marriedAt: null 
                        });
                        
                        const partnerUser = await interaction.client.users.fetch(pet.partnerId);
                        divorceInfo = `\nüíî ${partnerUser.displayName}, th√∫ c∆∞ng c·ªßa b·∫°n ƒë√£ tr·ªü l·∫°i ƒë·ªôc th√¢n.`;
                        
                        // G·ª≠i th√¥ng b√°o cho partner
                        try {
                            await partnerUser.send(`üíî **Th√¥ng b√°o ly d·ªã**\n\nTh√∫ c∆∞ng c·ªßa ${interaction.user.displayName} ƒë√£ b·ªã h·ªßy. Th√∫ c∆∞ng c·ªßa b·∫°n gi·ªù ƒë√£ tr·ªü l·∫°i ƒë·ªôc th√¢n v√† c√≥ th·ªÉ t√¨m ki·∫øm t√¨nh y√™u m·ªõi!`);
                        } catch (dmError) {
                            // Kh√¥ng g·ª≠i ƒë∆∞·ª£c DM, b·ªè qua
                        }
                    } catch (error) {
                        console.error('L·ªói x·ª≠ l√Ω divorce:', error);
                    }
                }

                // X√≥a th√∫ c∆∞ng kh·ªèi database
                await deletePet(userId);

                const embed = new EmbedBuilder()
                    .setTitle('‚úÖ ƒê√É H·ª¶Y TH√ö C∆ØNG TH√ÄNH C√îNG!')
                    .setDescription(`**${pet.petType}** ƒë√£ ƒë∆∞·ª£c h·ªßy v√† b·ªìi th∆∞·ªùng! üí∞\n\n` +
                        `**üíµ K·∫øt qu·∫£ b·ªìi th∆∞·ªùng:**\n` +
                        `‚Ä¢ S·ªë ti·ªÅn nh·∫≠n ƒë∆∞·ª£c: **${totalCompensation} Rin**\n` +
                        `‚Ä¢ Th√∫ c∆∞ng: ${pet.petType} (${pet.breedCount} l·∫ßn ƒë·∫ª)\n` +
                        `‚Ä¢ Th·ªùi gian chƒÉm s√≥c: ${ownedDays} ng√†y\n\n` +
                        `**üéØ B∆∞·ªõc ti·∫øp theo:**\n` +
                        `‚Ä¢ D√πng \`,muapet\` ƒë·ªÉ mua th√∫ c∆∞ng m·ªõi\n` +
                        `‚Ä¢ Ho·∫∑c ti·∫øt ki·ªám Rin ƒë·ªÉ mua pet t·ªët h∆°n!\n\n` +
                        `**C·∫£m ∆°n b·∫°n ƒë√£ tr·∫£i nghi·ªám h·ªá th·ªëng pet! üêæ**${divorceInfo}`)
                    .setColor('#00FF00')
                    .setFooter({ text: 'H·∫πn g·∫∑p l·∫°i trong l·∫ßn nu√¥i pet ti·∫øp theo!' })
                    .setTimestamp();

                // Update message ƒë·ªÉ x√≥a buttons
                await interaction.update({ embeds: [embed], components: [] });

            } catch (error) {
                console.error('L·ªói x√°c nh·∫≠n h·ªßy pet:', error);
                await interaction.reply({ content: '‚ùå C√≥ l·ªói x·∫£y ra khi h·ªßy th√∫ c∆∞ng!', ephemeral: true });
            }

        } else {
            // H·ªßy b·ªè
            const embed = new EmbedBuilder()
                .setTitle('‚ùå ƒê√É H·ª¶Y THAO T√ÅC')
                .setDescription('B·∫°n ƒë√£ quy·∫øt ƒë·ªãnh gi·ªØ l·∫°i th√∫ c∆∞ng. H√£y ti·∫øp t·ª•c chƒÉm s√≥c nh√©! üêæ')
                .setColor('#6C757D');

            // Update message ƒë·ªÉ x√≥a buttons
            await interaction.update({ embeds: [embed], components: [] });
        }
    }
}; 