const { EmbedBuilder } = require('discord.js');
const { getPet, updatePet, getUserRin, updateUserRin } = require('../../utils/database');
const { PET_IMAGES } = require('../../utils/constants');
const AntiSpamManager = require('../../utils/antiSpam');

module.exports = {
    name: 'thuoc',
    description: 'Ch·ªØa b·ªánh cho th√∫ c∆∞ng (50 Rin)',
    
    async execute(message, args) {
        const userId = message.author.id;
        
        try {
            // B·∫£o v·ªá command kh·ªèi spam v·ªõi cooldown 2 gi√¢y
            await AntiSpamManager.executeWithProtection(
                userId, 
                'thuoc', 
                2, // 2 gi√¢y cooldown
                this.executeThuoc,
                this,
                message,
                args
            );
        } catch (error) {
            return message.reply(error.message);
        }
    },

    async executeThuoc(message, args) {
        try {
            const userId = message.author.id;
            const pet = await getPet(userId);
            
            if (!pet) {
                return message.reply('‚ùå B·∫°n ch∆∞a c√≥ th√∫ c∆∞ng! H√£y d√πng l·ªánh `,muapet` ƒë·ªÉ mua th√∫ c∆∞ng.');
            }

            if (pet.health === 'B√¨nh th∆∞·ªùng') {
                return message.reply('üòä Th√∫ c∆∞ng c·ªßa b·∫°n r·∫•t kh·ªèe m·∫°nh, kh√¥ng c·∫ßn ch·ªØa tr·ªã!');
            }

            // Ki·ªÉm tra s·ªë Rin
            const userRin = await getUserRin(userId);
            if (userRin < 50) {
                return message.reply('‚ùå B·∫°n c·∫ßn 50 Rin ƒë·ªÉ mua thu·ªëc ch·ªØa b·ªánh cho th√∫ c∆∞ng!');
            }

            // Ki·ªÉm tra l·∫°i pet v√† ti·ªÅn tr∆∞·ªõc khi th·ª±c hi·ªán (tr√°nh race condition)
            const freshPet = await getPet(userId);
            if (!freshPet) {
                return message.reply('‚ùå Kh√¥ng t√¨m th·∫•y th√∫ c∆∞ng! (Ph√°t hi·ªán spam)');
            }

            if (freshPet.health === 'B√¨nh th∆∞·ªùng') {
                return message.reply('üòä Th√∫ c∆∞ng ƒë√£ kh·ªèe r·ªìi! (Ph√°t hi·ªán spam)');
            }

            // Tr·ª´ ti·ªÅn v√† ch·ªØa b·ªánh
            await updateUserRin(userId, -50);
            
            // Random hi·ªáu qu·∫£ c·ªßa thu·ªëc
            const treatmentResults = [
                {
                    success: true,
                    message: 'Thu·ªëc c√≥ hi·ªáu qu·∫£ tuy·ªát v·ªùi! Th√∫ c∆∞ng ƒë√£ kh·ªèe l·∫°i ho√†n to√†n! üéâ',
                    color: '#00FF00',
                    emoji: '‚ú®'
                },
                {
                    success: true,
                    message: 'Sau khi u·ªëng thu·ªëc, th√∫ c∆∞ng c·∫£m th·∫•y t·ªët h∆°n nhi·ªÅu! üòä',
                    color: '#00FF00',
                    emoji: 'üíä'
                },
                {
                    success: true,
                    message: 'Thu·ªëc ƒë√£ ph√°t huy t√°c d·ª•ng, th√∫ c∆∞ng tr·ªü l·∫°i kh·ªèe m·∫°nh! üåü',
                    color: '#00FF00',
                    emoji: 'üè•'
                }
            ];

            // 95% t·ª∑ l·ªá th√†nh c√¥ng
            const isSuccess = Math.random() < 0.95;
            
            if (isSuccess) {
                // Ch·ªØa th√†nh c√¥ng
                await updatePet(userId, { 
                    health: 'B√¨nh th∆∞·ªùng',
                    lastTreated: new Date()
                });

                const randomResult = treatmentResults[Math.floor(Math.random() * treatmentResults.length)];

                const embed = new EmbedBuilder()
                    .setTitle('üè• CH·ªÆA B·ªÜNH TH√ÄNH C√îNG!')
                    .setDescription(`**${freshPet.petType}** c·ªßa ${message.author.displayName}\n\n${randomResult.message}\n\n` +
                        `**üìä Th√¥ng tin ch·ªØa tr·ªã:**\n` +
                        `‚Ä¢ Chi ph√≠: 50 Rin\n` +
                        `‚Ä¢ T√¨nh tr·∫°ng c≈©: ${freshPet.health}\n` +
                        `‚Ä¢ T√¨nh tr·∫°ng m·ªõi: B√¨nh th∆∞·ªùng\n` +
                        `‚Ä¢ Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}\n\n` +
                        `**üí° L·ªùi khuy√™n:** H√£y cho ƒÉn ƒë·ªÅu ƒë·∫∑n ƒë·ªÉ th√∫ c∆∞ng kh√¥ng b·ªã ·ªëm n·ªØa!`)
                    .setThumbnail(PET_IMAGES[freshPet.petType] || null)
                    .setColor(randomResult.color)
                    .setFooter({ text: 'Th√∫ c∆∞ng ƒë√£ ho√†n to√†n kh·ªèe m·∫°nh! üêæ' })
                    .setTimestamp();

                // Th√™m bonus n·∫øu ch·ªØa tr·ªã th√†nh c√¥ng ho√†n h·∫£o
                if (Math.random() < 0.1) { // 10% chance
                    embed.addFields({
                        name: 'üéÅ Bonus ƒë·∫∑c bi·ªát!',
                        value: 'Th√∫ c∆∞ng r·∫•t bi·∫øt ∆°n v√† c√≥ v·∫ª vui v·∫ª h∆°n! C∆° h·ªôi sinh s·∫£n tƒÉng l√™n!',
                        inline: false
                    });
                }

            } else {
                // Ch·ªØa th·∫•t b·∫°i (5% chance)
                const embed = new EmbedBuilder()
                    .setTitle('üòü CH·ªÆA B·ªÜNH TH·∫§T B·∫†I')
                    .setDescription(`**${freshPet.petType}** c·ªßa ${message.author.displayName}\n\n` +
                        `Thu·ªëc kh√¥ng c√≥ hi·ªáu qu·∫£ nh∆∞ mong ƒë·ª£i... Th√∫ c∆∞ng v·∫´n c√≤n ·ªëm.\n\n` +
                        `**üìä Th√¥ng tin:**\n` +
                        `‚Ä¢ Chi ph√≠: 50 Rin (ƒë√£ m·∫•t)\n` +
                        `‚Ä¢ T√¨nh tr·∫°ng: V·∫´n ${freshPet.health}\n` +
                        `‚Ä¢ Khuy·∫øn ngh·ªã: Th·ª≠ l·∫°i sau ho·∫∑c chƒÉm s√≥c t·ªët h∆°n\n\n` +
                        `**üí° Tip:** ƒê√¥i khi thu·ªëc kh√¥ng hi·ªáu qu·∫£ 100%. H√£y th·ª≠ l·∫°i!`)
                    .setThumbnail(PET_IMAGES[freshPet.petType] || null)
                    .setColor('#FF6B6B')
                    .setFooter({ text: 'ƒê·ª´ng n·∫£n l√≤ng! H√£y th·ª≠ l·∫°i sau. üêæ' })
                    .setTimestamp();
            }

            await message.reply({ embeds: [embed] });

        } catch (error) {
            console.error('L·ªói thuoc:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi ch·ªØa b·ªánh cho th√∫ c∆∞ng!');
        }
    }
}; 