const { EmbedBuilder } = require('discord.js');

module.exports = {
    name: 'taixiudebug',
    aliases: ['txdebug', 'checktx'],
    description: '[DEBUG] Check active t√†i x·ªâu games v√† troubleshoot',

    async execute(message, args) {
        try {
            // L·∫•y taixiu command ƒë·ªÉ access games Map
            const taixiuCommand = message.client.commands.get('taixiu');
            if (!taixiuCommand) {
                return message.reply('‚ùå T√†i x·ªâu command kh√¥ng t√¨m th·∫•y!');
            }

            // Access games t·ª´ taixiu module (c·∫ßn expose)
            const fs = require('fs');
            let activeGamesInfo = 'Kh√¥ng th·ªÉ truy c·∫≠p active games (c·∫ßn expose games Map)';
            
            // ƒê·ªçc history
            let historyCount = 0;
            let lastSession = 'N/A';
            try {
                if (fs.existsSync('./data/taixiu_history.json')) {
                    const history = JSON.parse(fs.readFileSync('./data/taixiu_history.json', 'utf8'));
                    historyCount = history.length;
                    lastSession = history.length > 0 ? history[history.length - 1].session : 'N/A';
                }
            } catch (error) {
                console.error('Debug read history error:', error);
            }

            const embed = new EmbedBuilder()
                .setTitle('üîß TAIXIU DEBUG PANEL')
                .setDescription('**Th√¥ng tin debug v√† troubleshoot**')
                .addFields(
                    {
                        name: 'üìä History Status',
                        value: `‚Ä¢ **Total records:** ${historyCount}\n` +
                               `‚Ä¢ **Last session:** #${lastSession}\n` +
                               `‚Ä¢ **File exists:** ${fs.existsSync('./data/taixiu_history.json') ? '‚úÖ' : '‚ùå'}`,
                        inline: true
                    },
                    {
                        name: 'üéÆ Active Games',
                        value: activeGamesInfo,
                        inline: true
                    },
                    {
                        name: 'üîß Common Issues',
                        value: `**"Kh√¥ng c√≥ v√°n game n√†o":**\n` +
                               `‚Ä¢ Games Map b·ªã clear\n` +
                               `‚Ä¢ Channel ID kh√¥ng match\n` +
                               `‚Ä¢ Interaction ƒë√£ expired\n\n` +
                               `**"Interaction acknowledged":**\n` +
                               `‚Ä¢ Duplicate handlers\n` +
                               `‚Ä¢ Timing conflicts\n` +
                               `‚Ä¢ Bot restart mid-game`,
                        inline: false
                    },
                    {
                        name: 'üí° Troubleshooting',
                        value: `‚Ä¢ **Fix no game:** T·∫°o game m·ªõi v·ªõi \`,taixiu\`\n` +
                               `‚Ä¢ **Fix interaction:** Restart bot\n` +
                               `‚Ä¢ **Check logs:** Console c√≥ chi ti·∫øt\n` +
                               `‚Ä¢ **Reset data:** X√≥a file history n·∫øu c·∫ßn`,
                        inline: false
                    }
                )
                .setColor('#FFA500')
                .setFooter({ text: 'Debug Panel | For troubleshooting only' })
                .setTimestamp();

            await message.reply({ embeds: [embed] });

        } catch (error) {
            console.error('L·ªói taixiu debug:', error);
            await message.reply(`‚ùå C√≥ l·ªói debug: ${error.message}`);
        }
    }
}; 