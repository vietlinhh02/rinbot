const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const FastUtils = require('../../utils/fastUtils');
const { getUserRin } = require('../../utils/database');
const { BAU_CUA_ANIMALS, BAU_CUA_EMOJIS } = require('../../utils/constants');

// L∆∞u tr·ªØ c√°c v√°n game ƒëang di·ªÖn ra
const games = new Map();

// Modal ƒë·ªÉ nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c
class BetModal extends ModalBuilder {
    constructor(animal) {
        super();
        this.setCustomId(`bet_modal_${animal}`)
            .setTitle(`C∆∞·ª£c v√†o ${animal}`);

        const betInput = new TextInputBuilder()
            .setCustomId('bet_amount')
            .setLabel(`S·ªë Rin c∆∞·ª£c cho ${animal}:`)
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Nh·∫≠p s·ªë Rin...')
            .setRequired(true);

        const firstActionRow = new ActionRowBuilder().addComponents(betInput);
        this.addComponents(firstActionRow);
    }
}

// View v·ªõi c√°c n√∫t c∆∞·ª£c (chia th√†nh 2 rows)
function createBetViews() {
    const row1 = new ActionRowBuilder();
    const row2 = new ActionRowBuilder();
    
    BAU_CUA_ANIMALS.forEach((animal, index) => {
        const button = new ButtonBuilder()
            .setCustomId(`bet_${animal}`)
            .setLabel(`${BAU_CUA_EMOJIS[animal]} ${animal.charAt(0).toUpperCase() + animal.slice(1)}`)
            .setStyle(ButtonStyle.Primary);
        
        if (index < 3) {
            row1.addComponents(button);
        } else {
            row2.addComponents(button);
        }
    });
    
    return [row1, row2];
}

// View v·ªõi n√∫t b·∫Øt ƒë·∫ßu (b·ªè n√∫t x√°c nh·∫≠n)
class ControlView extends ActionRowBuilder {
    constructor() {
        super();
        this.addComponents(
            new ButtonBuilder()
                .setCustomId('start_game')
                .setLabel('üé≤ B·∫Øt ƒë·∫ßu quay (Ch·ªâ qu·∫£n tr√≤)')
                .setStyle(ButtonStyle.Danger),
            new ButtonBuilder()
                .setCustomId('cancel_game')
                .setLabel('‚ùå H·ªßy v√°n')
                .setStyle(ButtonStyle.Secondary)
        );
    }
}

module.exports = {
    name: 'bcgo',
    description: 'B·∫Øt ƒë·∫ßu v√°n B·∫ßu Cua',

    // C·∫≠p nh·∫≠t embed game ƒë·ªÉ hi·ªÉn th·ªã ng∆∞·ªùi c∆∞·ª£c
    async updateGameEmbed(interaction, game) {
        try {
            // T·∫°o danh s√°ch ng∆∞·ªùi ƒë√£ c∆∞·ª£c
            let playerList = '';
            let totalPlayers = 0;
            let totalAmount = 0;

            for (const [userId, userBets] of game.bets) {
                const betTotal = Object.values(userBets).reduce((sum, amount) => sum + amount, 0);
                if (betTotal > 0) {
                    const user = await interaction.client.users.fetch(userId);
                    const betDetails = Object.entries(userBets)
                        .map(([animal, amount]) => `${BAU_CUA_EMOJIS[animal]}${amount}`)
                        .join(' ');
                    
                    playerList += `‚Ä¢ **${user.displayName}**: ${betDetails} (${betTotal} Rin)\n`;
                    totalPlayers++;
                    totalAmount += betTotal;
                }
            }

            const embed = new EmbedBuilder()
                .setTitle('üé∞ B·∫¶U CUA ƒêANG M·ªû')
                .setDescription(`**Qu·∫£n tr√≤:** ${game.host.displayName}\n\n${totalPlayers > 0 ? `**Ng∆∞·ªùi ƒë√£ ƒë·∫∑t c∆∞·ª£c (${totalPlayers}):**\n${playerList}\n**T·ªïng s·ªë ti·ªÅn:** ${totalAmount.toLocaleString()} Rin\n\n` : ''}B·∫•m v√†o c√°c n√∫t ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!`)
                .addFields(
                    { name: 'üìã Lu·∫≠t ch∆°i:', value: 
                        '‚Ä¢ Ch·ªçn con v·∫≠t ƒë·ªÉ c∆∞·ª£c\n' +
                        '‚Ä¢ Qu·∫£n tr√≤ s·∫Ω quay 3 x√∫c x·∫Øc\n' +
                        '‚Ä¢ Tr√∫ng 1 con: x1 ti·ªÅn c∆∞·ª£c\n' +
                        '‚Ä¢ Tr√∫ng 2 con: x2 ti·ªÅn c∆∞·ª£c\n' +
                        '‚Ä¢ Tr√∫ng 3 con: x4 ti·ªÅn c∆∞·ª£c\n' +
                        '‚Ä¢ Kh√¥ng tr√∫ng: ti·ªÅn c∆∞·ª£c tr·∫£ cho ch·ªß x√≤ng'
                    }
                )
                .setColor(totalPlayers > 0 ? '#00FF00' : '#FFD700')
                .setThumbnail('https://i.pinimg.com/originals/37/27/af/3727afbe6ca619733cba6c07a6c4fcd7.gif');

            const betViews = createBetViews();
            const controlView = new ControlView();

            // Edit message game g·ªëc n·∫øu c√≥ messageId
            if (game.messageId) {
                try {
                    const gameMessage = await interaction.channel.messages.fetch(game.messageId);
                    await gameMessage.edit({ embeds: [embed], components: [...betViews, controlView] });
                } catch (error) {
                    console.error('Kh√¥ng th·ªÉ edit message game:', error);
                }
            }
        } catch (error) {
            console.error('L·ªói update game embed:', error);
        }
    },
    async execute(message, args) {
        const channelId = message.channel.id;
        
        // Ki·ªÉm tra xem ƒë√£ c√≥ v√°n n√†o ch∆∞a
        if (games.has(channelId)) {
            return message.reply('‚ùå ƒê√£ c√≥ v√°n B·∫ßu Cua trong k√™nh n√†y!');
        }

        // CHECK √ÇM TI·ªÄN - Kh√¥ng cho ph√©p qu·∫£n tr√≤ √¢m ti·ªÅn l√†m game
        const { getUserRin } = require('../../utils/database');
        const hostRin = await getUserRin(message.author.id);
        if (hostRin < 0) {
            return message.reply(`‚ùå **Kh√¥ng th·ªÉ l√†m qu·∫£n tr√≤ B·∫ßu Cua!**\n\n` +
                `**L√Ω do:** B·∫°n ƒëang √¢m ti·ªÅn (${hostRin} Rin)\n\n` +
                `üí° **H∆∞·ªõng d·∫´n:** Ki·∫øm ti·ªÅn ƒë·ªÉ c√≥ s·ªë d∆∞ d∆∞∆°ng tr∆∞·ªõc khi l√†m qu·∫£n tr√≤!`);
        }

        // T·∫°o v√°n game m·ªõi
        games.set(channelId, {
            host: message.author,
            bets: new Map(), // userId -> {animal: amount}
            started: false,
            participants: new Set(),
            messageId: null // L∆∞u ID message game ƒë·ªÉ edit sau
        });

        const embed = new EmbedBuilder()
            .setTitle('üé∞ B·∫¶U CUA ƒêANG M·ªû')
            .setDescription(`**Qu·∫£n tr√≤:** ${message.author.displayName}\n\nB·∫•m v√†o c√°c n√∫t ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!`)
            .addFields(
                { name: 'üìã Lu·∫≠t ch∆°i:', value: 
                    '‚Ä¢ Ch·ªçn con v·∫≠t ƒë·ªÉ c∆∞·ª£c\n' +
                    '‚Ä¢ Qu·∫£n tr√≤ s·∫Ω quay 3 x√∫c x·∫Øc\n' +
                    '‚Ä¢ Tr√∫ng 1 con: x1 ti·ªÅn c∆∞·ª£c\n' +
                    '‚Ä¢ Tr√∫ng 2 con: x2 ti·ªÅn c∆∞·ª£c\n' +
                    '‚Ä¢ Tr√∫ng 3 con: x4 ti·ªÅn c∆∞·ª£c\n' +
                    '‚Ä¢ Kh√¥ng tr√∫ng: ti·ªÅn c∆∞·ª£c tr·∫£ cho ch·ªß x√≤ng'
                }
            )
            .setColor('#FFD700')
            .setThumbnail('https://i.pinimg.com/originals/37/27/af/3727afbe6ca619733cba6c07a6c4fcd7.gif');

        const betViews = createBetViews();
        const controlView = new ControlView();

        const gameMessage = await message.reply({ 
            embeds: [embed], 
            components: [...betViews, controlView] 
        });

        // L∆∞u message ID ƒë·ªÉ edit sau
        games.get(channelId).messageId = gameMessage.id;
    },

    // X·ª≠ l√Ω interactions
    async handleInteraction(interaction) {
        const channelId = interaction.channel.id;
        const game = games.get(channelId);
        
        if (!game) {
            return interaction.reply({ content: '‚ùå Kh√¥ng c√≥ v√°n game n√†o!', ephemeral: true });
        }

        // X·ª≠ l√Ω modal submit
        if (interaction.isModalSubmit() && interaction.customId.startsWith('bet_modal_')) {
            const animal = interaction.customId.split('_')[2];
            const amount = parseInt(interaction.fields.getTextInputValue('bet_amount'));

            if (isNaN(amount) || amount <= 0) {
                return interaction.reply({ content: '‚ùå S·ªë Rin kh√¥ng h·ª£p l·ªá!', ephemeral: true });
            }

            if (!(await FastUtils.canAfford(interaction.user.id, amount))) {
                return interaction.reply({ content: '‚ùå Kh√¥ng ƒë·ªß Rin!', ephemeral: true });
            }

            // L∆∞u c∆∞·ª£c (ch∆∞a tr·ª´ ti·ªÅn)
            if (!game.bets.has(interaction.user.id)) {
                game.bets.set(interaction.user.id, {});
            }
            
            const userBets = game.bets.get(interaction.user.id);
            userBets[animal] = (userBets[animal] || 0) + amount;
            game.participants.add(interaction.user.id);

            await interaction.reply({ 
                content: `‚úÖ ƒê√£ ƒë·∫∑t c∆∞·ª£c **${amount} Rin** v√†o **${animal}**! Ti·ªÅn s·∫Ω ƒë∆∞·ª£c tr·ª´ khi b·∫Øt ƒë·∫ßu quay.`, 
                ephemeral: true 
            });

            // C·∫≠p nh·∫≠t embed ch√≠nh ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi c∆∞·ª£c
            await module.exports.updateGameEmbed(interaction, game);
            return;
        }

        // X·ª≠ l√Ω button clicks
        if (interaction.customId.startsWith('bet_')) {
            // Ki·ªÉm tra qu·∫£n tr√≤ kh√¥ng ƒë∆∞·ª£c c∆∞·ª£c
            if (interaction.user.id === game.host.id) {
                return interaction.reply({ content: '‚ùå Qu·∫£n tr√≤ kh√¥ng ƒë∆∞·ª£c ƒë·∫∑t c∆∞·ª£c!', ephemeral: true });
            }

            if (game.started) {
                return interaction.reply({ content: '‚ùå Game ƒë√£ b·∫Øt ƒë·∫ßu, kh√¥ng th·ªÉ c∆∞·ª£c!', ephemeral: true });
            }

            const animal = interaction.customId.split('_')[1];
            const modal = new BetModal(animal);
            await interaction.showModal(modal);
            return;
        }

        if (interaction.customId === 'start_game') {
            if (interaction.user.id !== game.host.id) {
                return interaction.reply({ content: '‚õî Ch·ªâ qu·∫£n tr√≤ ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu!', ephemeral: true });
            }

            if (game.started) {
                return interaction.reply({ content: '‚ùå Game ƒë√£ b·∫Øt ƒë·∫ßu r·ªìi!', ephemeral: true });
            }

            if (game.participants.size === 0) {
                return interaction.reply({ content: '‚ùå Ch∆∞a c√≥ ai c∆∞·ª£c! C·∫ßn √≠t nh·∫•t 1 ng∆∞·ªùi ƒë·∫∑t c∆∞·ª£c ƒë·ªÉ b·∫Øt ƒë·∫ßu.', ephemeral: true });
            }

            // Ki·ªÉm tra c√≥ ng∆∞·ªùi c∆∞·ª£c ch∆∞a (kh√¥ng c·∫ßn x√°c nh·∫≠n n·ªØa)
            let totalBets = 0;
            for (const [userId, userBets] of game.bets) {
                const totalBet = Object.values(userBets).reduce((sum, amount) => sum + amount, 0);
                if (totalBet > 0) totalBets++;
            }

            if (totalBets === 0) {
                return interaction.reply({ content: '‚ùå Ch∆∞a c√≥ ai c∆∞·ª£c!', ephemeral: true });
            }

            game.started = true;

            // Tr·ª´ ti·ªÅn c·ªßa t·∫•t c·∫£ ng∆∞·ªùi c∆∞·ª£c tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
            for (const [userId, userBets] of game.bets) {
                const totalBet = Object.values(userBets).reduce((sum, amount) => sum + amount, 0);
                if (totalBet > 0) {
                    await FastUtils.updateFastUserRin(userId, -totalBet);
                }
            }

            // Hi·ªáu ·ª©ng quay t·ª´ng x√∫c x·∫Øc (fix tri·ªát ƒë·ªÉ l·ªói InteractionAlreadyReplied)
            let tempResults = [];
            // G·ª≠i l·∫ßn ƒë·∫ßu (reply)
            const firstEmbed = new EmbedBuilder()
                .setTitle('üé≤ ƒêANG QUAY B·∫¶U CUA...')
                .setDescription('ƒêang m·ªü k·∫øt qu·∫£...')
                .setColor('#FFD700');
            await interaction.reply({ embeds: [firstEmbed] });
            // L·∫≠t t·ª´ng x√∫c x·∫Øc
            for (let i = 0; i < 3; i++) {
                await new Promise(r => setTimeout(r, 1200));
                const rand = BAU_CUA_ANIMALS[Math.floor(Math.random() * BAU_CUA_ANIMALS.length)];
                tempResults.push(rand);
                const embed = new EmbedBuilder()
                    .setTitle('üé≤ ƒêANG QUAY B·∫¶U CUA...')
                    .setDescription(`ƒê√£ m·ªü: ${tempResults.map(r => `${BAU_CUA_EMOJIS[r]} ${r}`).join(' | ')}${' | ‚ùì'.repeat(3 - tempResults.length)}`)
                    .setColor('#FFD700');
                await interaction.editReply({ embeds: [embed] });
            }
            // K·∫øt qu·∫£ th·∫≠t
            const results = tempResults;

            // T√≠nh k·∫øt qu·∫£
            const resultEmbed = new EmbedBuilder()
                .setTitle('üé≤ K·∫æT QU·∫¢ B·∫¶U CUA')
                .setDescription(`**K·∫øt qu·∫£:** ${results.map(r => `${BAU_CUA_EMOJIS[r]} ${r}`).join(' | ')}`)
                .setColor('#FF4500');

            let resultText = '';

            let hostNetWinnings = 0; // T·ªïng ti·ªÅn nh√† c√°i th·∫Øng/thua

            // X·ª≠ l√Ω t·ª´ng ng∆∞·ªùi ch∆°i
            for (const [userId, userBets] of game.bets) {
                const user = await interaction.client.users.fetch(userId);
                let totalWin = 0;
                let totalLoss = 0;
                const betResults = [];

                for (const [animal, amount] of Object.entries(userBets)) {
                    const count = results.filter(r => r === animal).length;
                    let winAmount = 0;
                    let multiplier = 0;
                    if (count === 1) {
                        multiplier = 1;
                        winAmount = amount + (amount * multiplier); // Ho√†n l·∫°i ti·ªÅn c∆∞·ª£c + ti·ªÅn th∆∞·ªüng
                        totalWin += winAmount;
                        hostNetWinnings -= winAmount; // Nh√† c√°i m·∫•t ti·ªÅn khi ng∆∞·ªùi ch∆°i th·∫Øng
                        betResults.push(`${BAU_CUA_EMOJIS[animal]} ${animal}: +${winAmount} Rin (${amount} g·ªëc + ${amount * multiplier} th∆∞·ªüng)`);
                    } else if (count === 2) {
                        multiplier = 2;
                        winAmount = amount + (amount * multiplier);
                        totalWin += winAmount;
                        hostNetWinnings -= winAmount;
                        betResults.push(`${BAU_CUA_EMOJIS[animal]} ${animal}: +${winAmount} Rin (${amount} g·ªëc + ${amount * multiplier} th∆∞·ªüng)`);
                    } else if (count === 3) {
                        multiplier = 4;
                        winAmount = amount + (amount * multiplier);
                        totalWin += winAmount;
                        hostNetWinnings -= winAmount;
                        betResults.push(`${BAU_CUA_EMOJIS[animal]} ${animal}: +${winAmount} Rin (${amount} g·ªëc + ${amount * multiplier} th∆∞·ªüng)`);
                    } else {
                        totalLoss += amount;
                        hostNetWinnings += amount;
                        betResults.push(`${BAU_CUA_EMOJIS[animal]} ${animal}: -${amount} Rin`);
                    }
                }

                // C·ªông ti·ªÅn th·∫Øng cho ng∆∞·ªùi ch∆°i
                if (totalWin > 0) {
                    await FastUtils.updateFastUserRin(userId, totalWin);
                }

                const netResult = totalWin - totalLoss;
                resultText += `\n**${user.displayName}**: ${netResult >= 0 ? '+' : ''}${netResult} Rin\n`;
                resultText += betResults.join('\n') + '\n';
            }

            // C·∫≠p nh·∫≠t ti·ªÅn cho nh√† c√°i
            if (hostNetWinnings !== 0) {
                await FastUtils.updateFastUserRin(game.host.id, hostNetWinnings);
            }

            resultEmbed.setDescription(resultEmbed.data.description + '\n\n' + resultText);
            await interaction.editReply({ embeds: [resultEmbed] });

            // X√≥a game
            games.delete(channelId);
            return;
        }

        if (interaction.customId === 'cancel_game') {
            if (interaction.user.id !== game.host.id && !interaction.member.permissions.has('Administrator')) {
                return interaction.reply({ content: '‚õî Ch·ªâ qu·∫£n tr√≤ ho·∫∑c admin ƒë∆∞·ª£c h·ªßy!', ephemeral: true });
            }

            let cancelMessage = '‚ùå V√°n B·∫ßu Cua ƒë√£ b·ªã h·ªßy!';

            // Ch·ªâ ho√†n ti·ªÅn n·∫øu game ƒë√£ b·∫Øt ƒë·∫ßu (ƒë√£ tr·ª´ ti·ªÅn)
            if (game.started) {
            for (const [userId, userBets] of game.bets) {
                const totalRefund = Object.values(userBets).reduce((sum, amount) => sum + amount, 0);
                if (totalRefund > 0) {
                    await FastUtils.updateFastUserRin(userId, totalRefund);
                }
                }
                cancelMessage = '‚ùå V√°n B·∫ßu Cua ƒë√£ b·ªã h·ªßy! ƒê√£ ho√†n ti·ªÅn cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i.';
            } else {
                cancelMessage = '‚ùå V√°n B·∫ßu Cua ƒë√£ b·ªã h·ªßy! (Ch∆∞a tr·ª´ ti·ªÅn n√™n kh√¥ng c·∫ßn ho√†n)';
            }

            games.delete(channelId);

            const cancelEmbed = new EmbedBuilder()
                .setTitle('‚ùå V√ÅN ƒê√É B·ªä H·ª¶Y')
                .setDescription(cancelMessage)
                .setColor('#FF0000');

            await interaction.reply({ embeds: [cancelEmbed] });
        }
    }
}; 