const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle, AttachmentBuilder } = require('discord.js');
const { getUserRin, updateUserRin } = require('../../utils/database');
const FastUtils = require('../../utils/fastUtils');
const imageUtils = require('../../utils/imageUtils');
const path = require('path');

// Utility functions cho X√¨ D√°ch
function createDeck() {
    const suits = ['hearts', 'diamonds', 'clubs', 'spades'];
    const ranks = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]; // 11=J, 12=Q, 13=K, 14=A
    const deck = [];
    
    for (const suit of suits) {
        for (const rank of ranks) {
            deck.push({ suit, value: rank, hidden: false });
        }
    }
    
    // Shuffle deck
    for (let i = deck.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [deck[i], deck[j]] = [deck[j], deck[i]];
    }
    
    return deck;
}

function getCardString(card) {
    const suits = { 'hearts': '‚ô•Ô∏è', 'diamonds': '‚ô¶Ô∏è', 'clubs': '‚ô£Ô∏è', 'spades': '‚ô†Ô∏è' };
    const values = {
        2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: '10',
        11: 'J', 12: 'Q', 13: 'K', 14: 'A'
    };
    
    return `${values[card.value]}${suits[card.suit]}`;
}

function calculatePoints(cards) {
    let points = 0;
    let aces = 0;
    
    for (const card of cards) {
        if (card.value >= 11 && card.value <= 13) { // J, Q, K
            points += 10;
        } else if (card.value === 14) { // A
            points += 11;
            aces++;
        } else {
            points += card.value;
        }
    }
    
    // Adjust for aces
    while (points > 21 && aces > 0) {
        points -= 10;
        aces--;
    }
    
    return points;
}

function checkSpecialHand(cards) {
    if (cards.length === 2) {
        const values = cards.map(card => card.value);
        if (values.includes(14) && [10, 11, 12, 13].some(v => values.includes(v))) {
            return "X√¨ D√°ch";
        }
        if (values[0] === 14 && values[1] === 14) {
            return "X√¨ B√†n";
        }
    }
    
    if (cards.length === 5 && calculatePoints(cards) <= 21) {
        return "Ng≈© Linh";
    }
    
    return null;
}

// Global interaction tracking ƒë·ªÉ tr√°nh duplicate
const processedInteractions = new Set();

// Game locks ƒë·ªÉ tr√°nh race condition
const gameLocks = new Map();

// Handle join game
async function handleJoin(interaction, channelId) {
    try {
        // Unique interaction ID ƒë·ªÉ track duplicate
        const interactionId = interaction.id;
        
        // Ki·ªÉm tra interaction ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a
        if (interaction.replied || interaction.deferred) {
            console.log('‚ö†Ô∏è Interaction ƒë√£ ƒë∆∞·ª£c replied/deferred');
            return;
        }
        
        // Ki·ªÉm tra duplicate processing
        if (processedInteractions.has(interactionId)) {
            console.log('‚ö†Ô∏è Interaction ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥:', interactionId);
            return;
        }
        
        // Mark as processing
        processedInteractions.add(interactionId);
        
        // Cleanup old interactions (keep only last 100)
        if (processedInteractions.size > 100) {
            const toDelete = Array.from(processedInteractions).slice(0, 50);
            toDelete.forEach(id => processedInteractions.delete(id));
        }
        
        channelId = String(channelId);
        
        // Ki·ªÉm tra game lock
        if (gameLocks.has(channelId)) {
            console.log('‚ö†Ô∏è Game ƒëang b·ªã lock, ch·ªù x·ª≠ l√Ω kh√°c ho√†n th√†nh');
            if (!interaction.replied && !interaction.deferred) {
                return await interaction.reply({ 
                    content: '‚è≥ Game ƒëang x·ª≠ l√Ω, vui l√≤ng th·ª≠ l·∫°i sau!', 
                    flags: 64 
                });
            }
            return;
        }
        
        // Lock game
        gameLocks.set(channelId, true);
        
        const game = global.games[channelId];
        
        if (!game) {
            // Unlock game
            gameLocks.delete(channelId);
            if (!interaction.replied && !interaction.deferred) {
                return await interaction.reply({ 
                    content: `‚ùå Kh√¥ng t√¨m th·∫•y b√†n game! H√£y t·∫°o b√†n m·ªõi v·ªõi \`,xjgo\``, 
                    flags: 64
                });
            }
            return;
        }

        if (game.started) {
            console.log('‚ö†Ô∏è Game ƒë√£ b·∫Øt ƒë·∫ßu, user kh√¥ng th·ªÉ tham gia:', interaction.user.displayName);
            if (!interaction.replied && !interaction.deferred) {
                return await interaction.reply({ 
                    content: '‚ùå Game ƒë√£ b·∫Øt ƒë·∫ßu, kh√¥ng th·ªÉ tham gia!', 
                    flags: 64 
                });
            }
            return;
        }

        if (interaction.user.id in game.players) {
            if (!interaction.replied && !interaction.deferred) {
                return await interaction.reply({ 
                    content: '‚ùå B·∫°n ƒë√£ tham gia r·ªìi!', 
                    flags: 64 
                });
            }
            return;
        }

        if (interaction.user.id === game.host.id) {
            if (!interaction.replied && !interaction.deferred) {
                return await interaction.reply({ 
                    content: '‚ùå Nh√† c√°i kh√¥ng th·ªÉ tham gia!', 
                    flags: 64 
                });
            }
            return;
        }

        // Double check tr∆∞·ªõc khi reply
        if (interaction.replied || interaction.deferred) {
            console.log('‚ö†Ô∏è Interaction b·ªã x·ª≠ l√Ω trong qu√° tr√¨nh ki·ªÉm tra');
            return;
        }

        // Thay th·∫ø modal b·∫±ng buttons v·ªõi s·ªë ti·ªÅn preset
        const embed = new EmbedBuilder()
            .setTitle('üí∞ CH·ªåN TI·ªÄN C∆Ø·ª¢C')
            .setDescription(`**${interaction.user.displayName}** h√£y ch·ªçn s·ªë ti·ªÅn mu·ªën c∆∞·ª£c:\n\n` +
                '**Ho·∫∑c g√µ:** `,xjbet [s·ªë ti·ªÅn]` ƒë·ªÉ c∆∞·ª£c s·ªë ti·ªÅn t√πy ch·ªçn\n' +
                '**V√≠ d·ª•:** `,xjbet 150`')
            .setColor('#FFD700');

        const row1 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`bet_${channelId}_50`)
                    .setLabel('50 Rin')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId(`bet_${channelId}_100`)
                    .setLabel('100 Rin')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId(`bet_${channelId}_200`)
                    .setLabel('200 Rin')
                    .setStyle(ButtonStyle.Primary)
            );

        const row2 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`bet_${channelId}_500`)
                    .setLabel('500 Rin')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId(`bet_${channelId}_1000`)
                    .setLabel('1000 Rin')
                    .setStyle(ButtonStyle.Danger),
                new ButtonBuilder()
                    .setCustomId(`bet_cancel`)
                    .setLabel('‚ùå H·ªßy')
                    .setStyle(ButtonStyle.Secondary)
            );

        // Final check before reply
        if (!interaction.replied && !interaction.deferred) {
            await interaction.reply({ 
                embeds: [embed], 
                components: [row1, row2], 
                flags: 64 
            });
        }
        
        // Unlock game
        gameLocks.delete(channelId);
        
    } catch (error) {
        console.error('‚ùå L·ªói trong handleJoin:', error);
        // Unlock game in case of error
        if (channelId) gameLocks.delete(channelId);
        
        if (!interaction.replied && !interaction.deferred) {
            try {
                await interaction.reply({ 
                    content: '‚ùå C√≥ l·ªói x·∫£y ra khi tham gia game!', 
                    flags: 64 
                });
            } catch (replyError) {
                console.error('‚ùå Kh√¥ng th·ªÉ reply interaction:', replyError);
            }
        }
    }
}

// Handle modal submit
async function handleBetModal(interaction, channelId) {
    // Ki·ªÉm tra interaction ƒë√£ ƒë∆∞·ª£c reply ch∆∞a
    if (interaction.replied || interaction.deferred) {
        return;
    }
    
    channelId = String(channelId);
    
    const game = global.games[channelId];
    if (!game) {
        return;
    }

    const betAmount = parseInt(interaction.fields.getTextInputValue('bet_amount'));
    
    if (isNaN(betAmount) || betAmount <= 0) {
        return await interaction.reply({ 
            content: '‚ùå S·ªë Rin kh√¥ng h·ª£p l·ªá!', 
            flags: 64 
        });
    }

    const userRin = await getUserRin(interaction.user.id);
    
    if (userRin < betAmount) {
        return await interaction.reply({ 
            content: '‚ùå B·∫°n kh√¥ng ƒë·ªß Rin!', 
            flags: 64 
        });
    }

    // Th√™m player v√†o game
    game.players[interaction.user.id] = {
        user: interaction.user,
        bet: betAmount,
        cards: [],
        done: false
    };

    const embed = new EmbedBuilder()
        .setTitle('‚úÖ Tham gia th√†nh c√¥ng!')
        .setDescription(`${interaction.user.displayName} ƒë√£ tham gia v·ªõi ${betAmount} Rin!`)
        .setColor('#00FF00');

    await interaction.reply({ embeds: [embed] });

    // Update main message
    if (game.gameMessage) {
        await updateGameMessage(game.gameMessage, channelId);
    }
}

// Handle start game
async function handleStart(interaction, channelId) {
    try {
        // Unique interaction ID ƒë·ªÉ track duplicate
        const interactionId = interaction.id;
        
        // Ki·ªÉm tra interaction ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a
        if (interaction.replied || interaction.deferred) {
            console.log('‚ö†Ô∏è Interaction start ƒë√£ ƒë∆∞·ª£c replied/deferred');
            return;
        }
        
        // Ki·ªÉm tra duplicate processing
        if (processedInteractions.has(interactionId)) {
            console.log('‚ö†Ô∏è Interaction start ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥:', interactionId);
            return;
        }
        
        // Mark as processing
        processedInteractions.add(interactionId);
        
        channelId = String(channelId);
        
        const game = global.games[channelId];
        if (!game) {
            if (!interaction.replied && !interaction.deferred) {
                return await interaction.reply({ 
                    content: '‚ùå Kh√¥ng c√≥ b√†n game n√†o!', 
                    flags: 64 
                });
            }
            return;
        }

        if (game.started) {
            console.log('‚ö†Ô∏è Game ƒë√£ b·∫Øt ƒë·∫ßu, kh√¥ng th·ªÉ start l·∫°i:', interaction.user.displayName);
            if (!interaction.replied && !interaction.deferred) {
                return await interaction.reply({ 
                    content: '‚ùå Game ƒë√£ b·∫Øt ƒë·∫ßu r·ªìi!', 
                    flags: 64 
                });
            }
            return;
        }

        if (interaction.user.id !== game.host.id) {
            if (!interaction.replied && !interaction.deferred) {
                return await interaction.reply({ 
                    content: '‚õî Ch·ªâ nh√† c√°i ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu!', 
                    flags: 64 
                });
            }
            return;
        }

        if (Object.keys(game.players).length === 0) {
            if (!interaction.replied && !interaction.deferred) {
                return await interaction.reply({ 
                    content: '‚ùå Ch∆∞a c√≥ ai tham gia! C·∫ßn √≠t nh·∫•t 1 ng∆∞·ªùi ch∆°i ƒë·ªÉ b·∫Øt ƒë·∫ßu.', 
                    flags: 64 
                });
            }
            return;
        }

        if (Object.keys(game.players).length > 13) {
            if (!interaction.replied && !interaction.deferred) {
                return await interaction.reply({ 
                    content: '‚ùå Qu√° nhi·ªÅu ng∆∞·ªùi ch∆°i! T·ªëi ƒëa 13 ng∆∞·ªùi.', 
                    flags: 64 
                });
            }
            return;
        }

    // Tr·ª´ ti·ªÅn c∆∞·ª£c
    for (const [playerId, playerData] of Object.entries(game.players)) {
        await updateUserRin(playerId, -playerData.bet);
    }

    // Deal initial cards
    game.playerOrder = Object.keys(game.players);
    game.playerOrder.push(game.host.id); // Host goes last

    // Deal 2 cards to each player and host
    for (const playerId of game.playerOrder) {
        const cards = [];
        cards.push(game.deck.pop());
        cards.push(game.deck.pop());
        
        if (playerId === game.host.id) {
            game.hostCards = cards;
        } else {
            game.players[playerId].cards = cards;
        }
    }

    game.started = true;
    game.currentPlayerIndex = 0;

        // Defer reply ƒë·ªÉ tr√°nh conflict v·ªõi animation
        if (!interaction.replied && !interaction.deferred) {
            await interaction.deferReply();
        }

        // T·∫°o animation chia b√†i
        await showDealingAnimation(interaction, channelId);

        // Start first turn
        await startNextTurn(interaction.channel, channelId);
        
    } catch (error) {
        console.error('‚ùå L·ªói trong handleStart:', error);
        if (!interaction.replied && !interaction.deferred) {
            try {
                await interaction.reply({ 
                    content: '‚ùå C√≥ l·ªói x·∫£y ra khi b·∫Øt ƒë·∫ßu game!', 
                    flags: 64 
                });
            } catch (replyError) {
                console.error('‚ùå Kh√¥ng th·ªÉ reply interaction:', replyError);
            }
        }
    }
}

// Update game message
async function updateGameMessage(message, channelId) {
    const game = global.games[channelId];
    if (!game) return;

    const playersList = Object.values(game.players)
        .map(p => `‚Ä¢ ${p.user.displayName} (${p.bet} Rin)`)
        .join('\n') || 'Ch∆∞a c√≥ ai tham gia';

    const playerCount = Object.keys(game.players).length;

    const embed = new EmbedBuilder()
        .setTitle('üÉè X√å D√ÅCH ƒêANG M·ªû')
        .setDescription('**üè† Nh√† c√°i:** ' + game.host.displayName + '\n\n' +
            '**üìã Lu·∫≠t ch∆°i m·ªõi:**\n' +
            '‚Ä¢ Nh√† c√°i c≈©ng ƒë∆∞·ª£c chia b√†i v√† ch∆°i nh∆∞ ng∆∞·ªùi ch∆°i\n' +
            '‚Ä¢ Nh√† c√°i m·ªü b√†i cu·ªëi c√πng ƒë·ªÉ so s√°nh ƒëi·ªÉm\n' +
            '‚Ä¢ **Qu·∫Øc 22-27:** H√≤a n·∫øu c·∫£ hai c√πng qu·∫Øc\n' +
            '‚Ä¢ **Qu·∫Øc ‚â•28:** Thua x2 ti·ªÅn\n' +
            '‚Ä¢ **<16 ƒëi·ªÉm:** Ch∆∞a ƒë·ªß tu·ªïi, thua x2 ti·ªÅn\n' +
            '‚Ä¢ **X√¨ B√†n:** 2 con A (x3 ti·ªÅn)\n' +
            '‚Ä¢ **X√¨ D√°ch:** A + 10/J/Q/K (x2 ti·ªÅn)\n' +
            '‚Ä¢ **Ng≈© Linh:** 5 l√° ‚â§21 ƒëi·ªÉm (x2 ti·ªÅn)\n\n' +
            `**üë• Ng∆∞·ªùi ch∆°i:** ${playerCount}/13\n` +
            'üí° *B·∫•m n√∫t ƒë·ªÉ tham gia!*')
        .addFields(
            { name: 'Nh√† c√°i', value: game.host.toString(), inline: false },
            { name: 'Ng∆∞·ªùi ch∆°i', value: playersList, inline: false }
        )
        .setColor('#0099FF');

    const joinButton = new ButtonBuilder()
        .setCustomId('xj_join')
        .setLabel('üéüÔ∏è Tham gia c∆∞·ª£c')
        .setStyle(ButtonStyle.Success);

    const startButton = new ButtonBuilder()
        .setCustomId('xj_start')
        .setLabel('üöÄ B·∫Øt ƒë·∫ßu')
        .setStyle(ButtonStyle.Danger);

    const row = new ActionRowBuilder().addComponents(joinButton, startButton);

    await message.edit({ embeds: [embed], components: [row] });
}

// Show dealing animation
async function showDealingAnimation(interaction, channelId) {
    const game = global.games[channelId];
    if (!game) return;

    const tempFiles = [];
    
    try {
        // Chu·∫©n b·ªã data cho animation v·ªõi validation
        const dealerHand = game.hostCards || [];
        const playerHands = Object.values(game.players).map(p => ({
            name: p.user.displayName,
            hand: p.cards || []
        }));

        // Validate card data
        const validateCard = (card) => {
            return card && 
                   typeof card.suit === 'string' && 
                   typeof card.value === 'number' &&
                   ['hearts', 'diamonds', 'clubs', 'spades'].includes(card.suit) &&
                   card.value >= 2 && card.value <= 14;
        };

        // Check dealer hand
        const validDealerHand = dealerHand.filter(validateCard);
        if (validDealerHand.length !== dealerHand.length) {
            console.log('‚ö†Ô∏è C√≥ card kh√¥ng h·ª£p l·ªá trong dealer hand:', dealerHand);
            throw new Error('Invalid dealer cards');
        }

        // Check player hands
        for (const playerHand of playerHands) {
            const validCards = playerHand.hand.filter(validateCard);
            if (validCards.length !== playerHand.hand.length) {
                console.log('‚ö†Ô∏è C√≥ card kh√¥ng h·ª£p l·ªá trong player hand:', playerHand.hand);
                throw new Error('Invalid player cards');
            }
        }

        // T·∫°o GIF animation
        const gifPath = path.join(__dirname, `../../temp/xidach_deal_${Date.now()}.gif`);
        tempFiles.push(gifPath);
        
        // T·∫°o temp directory n·∫øu ch∆∞a c√≥
        const tempDir = path.dirname(gifPath);
        require('fs').mkdirSync(tempDir, { recursive: true });
        
        await imageUtils.createBlackjackGIF(validDealerHand, playerHands, gifPath);
        
        const attachment = new AttachmentBuilder(gifPath, { name: 'xidach_deal.gif' });
        
        const embed = new EmbedBuilder()
            .setTitle('üé¥ X√å D√ÅCH B·∫ÆT ƒê·∫¶U!')
            .setDescription('üÉè **ƒêang chia b√†i cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i...**\n\n' +
                `üë• **S·ªë ng∆∞·ªùi ch∆°i:** ${Object.keys(game.players).length}\n` +
                `üè† **Nh√† c√°i:** ${game.host.displayName}\n\n` +
                '‚è∞ G√µ `,xjrin` ƒë·ªÉ xem b√†i v√† h√†nh ƒë·ªông!')
            .setColor('#0099FF')
            .setImage('attachment://xidach_deal.gif')
            .setFooter({ text: 'T·∫•t c·∫£ ƒë√£ ƒë∆∞·ª£c chia 2 l√° b√†i!' });

        if (interaction.deferred) {
            await interaction.editReply({ 
                embeds: [embed], 
                files: [attachment]
            });
        } else {
            await interaction.reply({ 
                embeds: [embed], 
                files: [attachment]
            });
        }

        // Cleanup temp files sau 10 gi√¢y
        setTimeout(() => {
            imageUtils.cleanupTempFiles(tempFiles);
        }, 10000);

    } catch (error) {
        console.error('L·ªói t·∫°o animation chia b√†i:', error);
        // Fallback v·ªÅ text display
        const embed = new EmbedBuilder()
            .setTitle('üé¥ X√å D√ÅCH B·∫ÆT ƒê·∫¶U!')
            .setDescription('üÉè **ƒê√£ chia b√†i cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i!**\n\n' +
                `üë• **S·ªë ng∆∞·ªùi ch∆°i:** ${Object.keys(game.players).length}\n` +
                `üè† **Nh√† c√°i:** ${game.host.displayName}\n\n` +
                '‚è∞ G√µ `,xjrin` ƒë·ªÉ xem b√†i v√† h√†nh ƒë·ªông!')
            .setColor('#0099FF')
            .setFooter({ text: 'T·∫•t c·∫£ ƒë√£ ƒë∆∞·ª£c chia 2 l√° b√†i!' });

        if (interaction.deferred) {
            await interaction.editReply({ embeds: [embed] });
        } else {
            await interaction.reply({ embeds: [embed] });
        }
    }
}

// Start next turn
async function startNextTurn(channel, channelId) {
    const game = global.games[channelId];
    if (!game) return;

    if (game.currentPlayerIndex >= game.playerOrder.length) {
        return await endGame(channel, channelId);
    }

    const currentPlayerId = game.playerOrder[game.currentPlayerIndex];
    const isHost = currentPlayerId === game.host.id;
    const currentPlayer = isHost ? game.host : game.players[currentPlayerId].user;

    const embed = new EmbedBuilder()
        .setTitle(isHost ? 'üè† L∆∞·ª£t nh√† c√°i!' : 'üéØ L∆∞·ª£t c·ªßa b·∫°n!')
        .setDescription(`${currentPlayer}, g√µ \`,xjrin\` ƒë·ªÉ xem b√†i v√† h√†nh ƒë·ªông!`)
        .setColor('#0099FF');

    await channel.send({ embeds: [embed] });
}

// End game
async function endGame(channel, channelId) {
    const game = global.games[channelId];
    if (!game) return;

    const hostPoints = calculatePoints(game.hostCards);
    const hostSpecial = checkSpecialHand(game.hostCards);

    const tempFiles = [];
    
    try {
        // Chu·∫©n b·ªã data cho h√¨nh ·∫£nh k·∫øt qu·∫£ v·ªõi validation
        const dealerHand = game.hostCards || [];
        const playerHands = Object.values(game.players).map(p => ({
            name: p.user.displayName,
            hand: p.cards || []
        }));

        // Validate card data (same validation as animation)
        const validateCard = (card) => {
            return card && 
                   typeof card.suit === 'string' && 
                   typeof card.value === 'number' &&
                   ['hearts', 'diamonds', 'clubs', 'spades'].includes(card.suit) &&
                   card.value >= 2 && card.value <= 14;
        };

        const validDealerHand = dealerHand.filter(validateCard);
        const validPlayerHands = playerHands.map(p => ({
            name: p.name,
            hand: p.hand.filter(validateCard)
        }));

        // T·∫°o h√¨nh ·∫£nh static cho k·∫øt qu·∫£
        const imagePath = path.join(__dirname, `../../temp/xidach_result_${Date.now()}.png`);
        tempFiles.push(imagePath);
        
        // T·∫°o temp directory n·∫øu ch∆∞a c√≥
        const tempDir = path.dirname(imagePath);
        require('fs').mkdirSync(tempDir, { recursive: true });
        
        await imageUtils.createBlackjackTable(validDealerHand, validPlayerHands, imagePath);
        
        const attachment = new AttachmentBuilder(imagePath, { name: 'xidach_result.png' });
        
        const embed = new EmbedBuilder()
            .setTitle('üé≤ K·∫æT QU·∫¢ X√å D√ÅCH')
            .setColor('#0099FF')
            .setImage('attachment://xidach_result.png');

        let hostMsg = `${game.hostCards.map(getCardString).join(', ')} (${hostPoints} ƒëi·ªÉm)`;
        if (hostSpecial) hostMsg += ` - ${hostSpecial}`;
        
        embed.addFields({ name: 'üè† Nh√† c√°i', value: hostMsg, inline: false });

        let totalHostWinnings = 0; 
        let totalHostLosses = 0;   

        for (const [pid, pdata] of Object.entries(game.players)) {
            const playerPoints = calculatePoints(pdata.cards);
            const playerSpecial = checkSpecialHand(pdata.cards);
            const bet = pdata.bet;
            
            let playerMsg = `${pdata.cards.map(getCardString).join(', ')} (${playerPoints} ƒëi·ªÉm)`;
            if (playerSpecial) playerMsg += ` - ${playerSpecial}`;
            
            let outcome = '';
            let playerWinAmount = 0;

            // Game logic
            if (playerSpecial === "X√¨ B√†n") {
                playerWinAmount = bet + (bet * 3);
                totalHostLosses += bet * 3;
                outcome = `üéâ X√¨ B√†n ‚Äì Th·∫Øng +${bet * 3} Rin`;
            } else if (hostSpecial === "X√¨ B√†n") {
                totalHostWinnings += bet;
                outcome = `‚ùå Thua X√¨ B√†n nh√† c√°i ‚Äì M·∫•t ${bet} Rin`;
            } else if (playerSpecial === "Ng≈© Linh") {
                if (hostSpecial === "Ng≈© Linh") {
                    playerWinAmount = bet;
                    outcome = 'ü§ù H√≤a (c·∫£ hai Ng≈© Linh)';
                } else {
                    playerWinAmount = bet + (bet * 2);
                    totalHostLosses += bet * 2;
                    outcome = `üéâ Ng≈© Linh ‚Äì Th·∫Øng +${bet * 2} Rin`;
                }
            } else if (hostSpecial === "Ng≈© Linh" && playerSpecial !== "Ng≈© Linh") {
                totalHostWinnings += bet;
                outcome = `‚ùå Thua Ng≈© Linh nh√† c√°i ‚Äì M·∫•t ${bet} Rin`;
            } else if (playerSpecial === "X√¨ D√°ch") {
                if (hostSpecial === "X√¨ D√°ch") {
                    playerWinAmount = bet;
                    outcome = `ü§ù H√≤a (c√πng X√¨ D√°ch)`;
                } else {
                    playerWinAmount = bet + (bet * 2);
                    totalHostLosses += bet * 2;
                    outcome = `üéâ X√¨ D√°ch ‚Äì Th·∫Øng +${bet * 2} Rin`;
                }
            } else if (hostSpecial === "X√¨ D√°ch") {
                totalHostWinnings += bet;
                outcome = `‚ùå Thua X√¨ D√°ch nh√† c√°i ‚Äì M·∫•t ${bet} Rin`;
            } else {
                // So s√°nh ƒëi·ªÉm th∆∞·ªùng
                if (playerPoints >= 28) {
                    totalHostWinnings += bet * 2;
                    outcome = `üí• Qu·∫Øc n·∫∑ng (${playerPoints}) ‚Äì M·∫•t ${bet * 2} Rin`;
                } else if (playerPoints >= 22 && playerPoints <= 27 && hostPoints >= 22 && hostPoints <= 27) {
                    playerWinAmount = bet;
                    outcome = `ü§ù H√≤a (c·∫£ hai qu·∫Øc nh·∫π: ${playerPoints} vs ${hostPoints})`;
                } else if (playerPoints >= 22 && playerPoints <= 27) {
                    if (hostPoints > 21) {
                        playerWinAmount = bet;
                        outcome = `ü§ù H√≤a (player qu·∫Øc nh·∫π ${playerPoints}, nh√† c√°i qu·∫Øc ${hostPoints})`;
                    } else {
                        totalHostWinnings += bet;
                        outcome = `‚ùå Qu·∫Øc nh·∫π (${playerPoints}) ‚Äì M·∫•t ${bet} Rin`;
                    }
                } else if (hostPoints >= 22 && hostPoints <= 27) {
                    if (playerPoints > 21) {
                        playerWinAmount = bet;
                        outcome = `ü§ù H√≤a (nh√† c√°i qu·∫Øc nh·∫π ${hostPoints}, player qu·∫Øc ${playerPoints})`;
                    } else {
                        playerWinAmount = bet + bet;
                        totalHostLosses += bet;
                        outcome = `‚úÖ Nh√† c√°i qu·∫Øc nh·∫π ‚Äì Th·∫Øng +${bet} Rin`;
                    }
                } else if (hostPoints >= 28) {
                    playerWinAmount = bet + bet;
                    totalHostLosses += bet;
                    outcome = `‚úÖ Nh√† c√°i qu·∫Øc n·∫∑ng ‚Äì Th·∫Øng +${bet} Rin`;
                } else if (playerPoints < 16) {
                    totalHostWinnings += bet * 2;
                    outcome = `üë∂ Ch∆∞a ƒë·ªß tu·ªïi (${playerPoints}) ‚Äì M·∫•t ${bet * 2} Rin`;
                } else if (hostPoints < 16) {
                    playerWinAmount = bet + bet;
                    totalHostLosses += bet;
                    outcome = `‚úÖ Nh√† c√°i ch∆∞a ƒë·ªß tu·ªïi ‚Äì Th·∫Øng +${bet} Rin`;
                } else if (playerPoints > hostPoints) {
                    playerWinAmount = bet + bet;
                    totalHostLosses += bet;
                    outcome = `‚úÖ Th·∫Øng ƒëi·ªÉm (${playerPoints} vs ${hostPoints}) ‚Äì Th·∫Øng +${bet} Rin`;
                } else if (playerPoints < hostPoints) {
                    totalHostWinnings += bet;
                    outcome = `‚ùå Thua ƒëi·ªÉm (${playerPoints} vs ${hostPoints}) ‚Äì M·∫•t ${bet} Rin`;
                } else {
                    playerWinAmount = bet;
                    outcome = `ü§ù H√≤a ƒëi·ªÉm (${playerPoints})`;
                }
            }

            if (playerWinAmount > 0) {
                await updateUserRin(pdata.user.id, playerWinAmount);
            }

            embed.addFields({ 
                name: pdata.user.displayName, 
                value: `${playerMsg}\n${outcome}`, 
                inline: false 
            });
        }

        // T√≠nh to√°n ti·ªÅn cho nh√† c√°i
        const hostNetWinnings = totalHostWinnings - totalHostLosses;
        
        if (hostNetWinnings > 0) {
            await updateUserRin(game.host.id, hostNetWinnings);
            embed.addFields({ 
                name: 'üí∞ Nh√† c√°i', 
                value: `üéâ Th·∫Øng r√≤ng: +${hostNetWinnings} Rin`, 
                inline: false 
            });
        } else if (hostNetWinnings < 0) {
            embed.addFields({ 
                name: 'üí∞ Nh√† c√°i', 
                value: `üí∏ Thua r√≤ng: ${hostNetWinnings} Rin`, 
                inline: false 
            });
        } else {
            embed.addFields({ 
                name: 'üí∞ Nh√† c√°i', 
                value: `ü§ù H√≤a v·ªën: 0 Rin`, 
                inline: false 
            });
        }

        await channel.send({ 
            embeds: [embed], 
            files: [attachment]
        });

        // Cleanup temp files sau 10 gi√¢y
        setTimeout(() => {
            imageUtils.cleanupTempFiles(tempFiles);
        }, 10000);

    } catch (error) {
        console.error('L·ªói t·∫°o h√¨nh ·∫£nh k·∫øt qu·∫£:', error);
        // Fallback v·ªÅ text display
        const embed = new EmbedBuilder()
            .setTitle('üé≤ K·∫æT QU·∫¢ X√å D√ÅCH')
            .setColor('#0099FF');

        let hostMsg = `Nh√† c√°i: ${game.hostCards.map(getCardString).join(', ')} (${hostPoints} ƒëi·ªÉm)`;
        if (hostSpecial) hostMsg += ` - ${hostSpecial}`;
        
        embed.addFields({ name: 'üè† Nh√† c√°i', value: hostMsg, inline: false });

        // Th√™m logic game t∆∞∆°ng t·ª± nh∆∞ tr√™n cho fallback...
        await channel.send({ embeds: [embed] });
    }
    
    delete global.games[channelId];
}

// Handle bet button
async function handleBetButton(interaction, channelId) {
    try {
        // Unique interaction ID ƒë·ªÉ track duplicate
        const interactionId = interaction.id;
        
        // Ki·ªÉm tra interaction ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a
        if (interaction.replied || interaction.deferred) {
            console.log('‚ö†Ô∏è Interaction bet button ƒë√£ ƒë∆∞·ª£c replied/deferred');
            return;
        }
        
        // Ki·ªÉm tra duplicate processing
        if (processedInteractions.has(interactionId)) {
            console.log('‚ö†Ô∏è Interaction bet button ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥:', interactionId);
            return;
        }
        
        // Mark as processing
        processedInteractions.add(interactionId);
        
        channelId = String(channelId);
        
        const game = global.games[channelId];
        if (!game) {
            if (!interaction.replied && !interaction.deferred) {
                return await interaction.update({
                    content: '‚ùå Kh√¥ng t√¨m th·∫•y game!',
                    embeds: [],
                    components: []
                });
            }
            return;
        }

        const parts = interaction.customId.split('_');
        const betAmount = parseInt(parts[parts.length - 1]);

        if (isNaN(betAmount) || betAmount <= 0) {
            if (!interaction.replied && !interaction.deferred) {
                return await interaction.update({
                    content: '‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!',
                    embeds: [],
                    components: []
                });
            }
            return;
        }

        const userRin = await getUserRin(interaction.user.id);
        
        if (userRin < betAmount) {
            if (!interaction.replied && !interaction.deferred) {
                return await interaction.update({
                    content: `‚ùå B·∫°n kh√¥ng ƒë·ªß ${betAmount} Rin! (Hi·ªán c√≥: ${userRin} Rin)`,
                    embeds: [],
                    components: []
                });
            }
            return;
        }

        // Th√™m player v√†o game
        game.players[interaction.user.id] = {
            user: interaction.user,
            bet: betAmount,
            cards: [],
            done: false
        };

        const embed = new EmbedBuilder()
            .setTitle('‚úÖ Tham gia th√†nh c√¥ng!')
            .setDescription(`**${interaction.user.displayName}** ƒë√£ tham gia v·ªõi **${betAmount} Rin**!`)
            .setColor('#00FF00');

        if (!interaction.replied && !interaction.deferred) {
            await interaction.update({ 
                embeds: [embed], 
                components: [] 
            });
        }
        
        // Update main message
        if (game.gameMessage) {
            await updateGameMessage(game.gameMessage, channelId);
        }
        
    } catch (error) {
        console.error('‚ùå L·ªói trong handleBetButton:', error);
        if (!interaction.replied && !interaction.deferred) {
            try {
                await interaction.update({ 
                    content: '‚ùå C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t c∆∞·ª£c!', 
                    embeds: [], 
                    components: [] 
                });
            } catch (updateError) {
                console.error('‚ùå Kh√¥ng th·ªÉ update interaction:', updateError);
            }
        }
    }
}

module.exports = {
    name: 'xjgo',
    description: 'M·ªü b√†n X√¨ D√°ch',
    
    // Export handler functions
    handleJoin,
    handleStart, 
    handleBetModal,
    handleBetButton,
    updateGameMessage,
    
    async execute(message, args) {
        try {
            const channelId = String(message.channel.id);
            
            if (global.games[channelId]) {
                const embed = new EmbedBuilder()
                    .setTitle('‚ùå L·ªói!')
                    .setDescription('ƒê√£ c√≥ b√†n game trong k√™nh n√†y!')
                    .setColor('#FF0000');
                return await message.reply({ embeds: [embed] });
            }

            global.games[channelId] = {
                host: message.author,
                players: {},
                deck: createDeck(),
                started: false,
                currentPlayerIndex: 0,
                playerOrder: [],
                hostCards: [],
                hostDone: false
            };

            const embed = new EmbedBuilder()
                .setTitle('üÉè X√å D√ÅCH ƒêANG M·ªû')
                .setDescription('**üè† Nh√† c√°i:** ' + message.author.displayName + '\n\n' +
                    '**üìã Lu·∫≠t ch∆°i m·ªõi:**\n' +
                    '‚Ä¢ Nh√† c√°i c≈©ng ƒë∆∞·ª£c chia b√†i v√† ch∆°i nh∆∞ ng∆∞·ªùi ch∆°i\n' +
                    '‚Ä¢ Nh√† c√°i m·ªü b√†i cu·ªëi c√πng ƒë·ªÉ so s√°nh ƒëi·ªÉm\n' +
                    '‚Ä¢ **Qu·∫Øc 22-27:** H√≤a n·∫øu c·∫£ hai c√πng qu·∫Øc\n' +
                    '‚Ä¢ **Qu·∫Øc ‚â•28:** Thua x2 ti·ªÅn\n' +
                    '‚Ä¢ **<16 ƒëi·ªÉm:** Ch∆∞a ƒë·ªß tu·ªïi, thua x2 ti·ªÅn\n' +
                    '‚Ä¢ **X√¨ B√†n:** 2 con A (x3 ti·ªÅn)\n' +
                    '‚Ä¢ **X√¨ D√°ch:** A + 10/J/Q/K (x2 ti·ªÅn)\n' +
                    '‚Ä¢ **Ng≈© Linh:** 5 l√° ‚â§21 ƒëi·ªÉm (x2 ti·ªÅn)\n\n' +
                    '**üë• Ng∆∞·ªùi ch∆°i:** 0/13\n' +
                    'üí° *B·∫•m n√∫t ƒë·ªÉ tham gia!*')
                .addFields({ name: 'Nh√† c√°i', value: message.author.toString(), inline: false })
                .setColor('#0099FF');

            const joinButton = new ButtonBuilder()
                .setCustomId('xj_join')
                .setLabel('üéüÔ∏è Tham gia c∆∞·ª£c')
                .setStyle(ButtonStyle.Success);

            const startButton = new ButtonBuilder()
                .setCustomId('xj_start')
                .setLabel('üöÄ B·∫Øt ƒë·∫ßu')
                .setStyle(ButtonStyle.Danger);

            const row = new ActionRowBuilder().addComponents(joinButton, startButton);

            const gameMessage = await message.reply({ embeds: [embed], components: [row] });

            // L∆∞u reference ƒë·∫øn message ƒë·ªÉ update sau
            global.games[channelId].gameMessage = gameMessage;

        } catch (error) {
            console.error('‚ùå L·ªói xjgo:', error);
            const embed = new EmbedBuilder()
                .setTitle('‚ùå L·ªói!')
                .setDescription('ƒê√£ x·∫£y ra l·ªói khi t·∫°o b√†n game!')
                .setColor('#FF0000');
            return await message.reply({ embeds: [embed] });
        }
    }
}; 