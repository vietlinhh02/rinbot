const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const { getUserRin, updateUserRin } = require('../../utils/database');
const { BAU_CUA_ANIMALS, BAU_CUA_EMOJIS } = require('../../utils/constants');

// L∆∞u tr·ªØ c√°c v√°n game ƒëang di·ªÖn ra (bot l√†m nh√† c√°i)
const botGames = new Map();

// Timeout settings
const GAME_TIMEOUT = 3 * 60 * 1000; // 3 ph√∫t timeout

// Modal ƒë·ªÉ nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c
class BetModal extends ModalBuilder {
    constructor(animal) {
        super();
        this.setCustomId(`bot_bet_modal_${animal}`)
            .setTitle(`C∆∞·ª£c v√†o ${animal}`);

        const betInput = new TextInputBuilder()
            .setCustomId('bet_amount')
            .setLabel(`S·ªë Rin c∆∞·ª£c cho ${animal}:`)
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Nh·∫≠p s·ªë Rin...')
            .setRequired(true);

        const firstActionRow = new ActionRowBuilder().addComponents(betInput);
        this.addComponents(firstActionRow);
    }
}

// View v·ªõi c√°c n√∫t c∆∞·ª£c (chia th√†nh 2 rows)
function createBetViews() {
    const row1 = new ActionRowBuilder();
    const row2 = new ActionRowBuilder();
    
    BAU_CUA_ANIMALS.forEach((animal, index) => {
        const button = new ButtonBuilder()
            .setCustomId(`bot_bet_${animal}`)
            .setLabel(`${BAU_CUA_EMOJIS[animal]} ${animal.charAt(0).toUpperCase() + animal.slice(1)}`)
            .setStyle(ButtonStyle.Primary);
        
        if (index < 3) {
            row1.addComponents(button);
        } else {
            row2.addComponents(button);
        }
    });
    
    return [row1, row2];
}

// View v·ªõi n√∫t x√°c nh·∫≠n
class ControlView extends ActionRowBuilder {
    constructor() {
        super();
        this.addComponents(
            new ButtonBuilder()
                .setCustomId('bot_confirm_bet')
                .setLabel('‚úÖ X√°c nh·∫≠n & Quay')
                .setStyle(ButtonStyle.Success),
            new ButtonBuilder()
                .setCustomId('bot_auto_play')
                .setLabel('ü§ñ T·ª± ƒë·ªông (30s)')
                .setStyle(ButtonStyle.Danger)
        );
    }
}

module.exports = {
    name: 'bcbot',
    description: 'B·∫Øt ƒë·∫ßu v√°n B·∫ßu Cua v·ªõi bot l√†m nh√† c√°i',
    async execute(message, args) {
        const channelId = message.channel.id;
        
        // Ki·ªÉm tra xem ƒë√£ c√≥ v√°n n√†o ch∆∞a
        if (botGames.has(channelId)) {
            return message.reply('‚ùå ƒê√£ c√≥ v√°n B·∫ßu Cua (Bot) trong k√™nh n√†y!');
        }

        // T·∫°o v√°n game m·ªõi v·ªõi bot l√†m nh√† c√°i
        botGames.set(channelId, {
            initiator: message.author,
            bets: new Map(), // userId -> {animal: amount}
            participants: new Set(),
            autoPlay: false,
            autoTimer: null,
            gameTimeout: null,
            gameMessage: null // Tin nh·∫Øn ch√≠nh c·ªßa game
        });

        // Set game timeout (3 ph√∫t)
        const game = botGames.get(channelId);
        game.gameTimeout = setTimeout(async () => {
            await timeoutGame(message.channel, channelId);
        }, GAME_TIMEOUT);

        await this.updateGameDisplay(message.channel, channelId, true);
    },

    // C·∫≠p nh·∫≠t hi·ªÉn th·ªã game trong 1 tin nh·∫Øn
    async updateGameDisplay(channel, channelId, isNew = false) {
        const game = botGames.get(channelId);
        if (!game) return;

        // T·∫°o danh s√°ch c∆∞·ª£c hi·ªán t·∫°i
        let betsDisplay = '';
        if (game.participants.size === 0) {
            betsDisplay = '*Ch∆∞a c√≥ ai c∆∞·ª£c...*';
        } else {
            for (const userId of game.participants) {
                const user = await channel.client.users.fetch(userId);
                const userBets = game.bets.get(userId);
                
                if (userBets && Object.keys(userBets).length > 0) {
                    const betList = Object.entries(userBets)
                        .map(([animal, amount]) => `${BAU_CUA_EMOJIS[animal]}${amount}`)
                        .join(' ');
                    betsDisplay += `**${user.displayName}:** ${betList}\n`;
                }
            }
        }

        const embed = new EmbedBuilder()
            .setTitle('üé∞ B·∫¶U CUA BOT')
            .setDescription('**ü§ñ Nh√† c√°i:** RinBot\n\n' +
                '**üìã Lu·∫≠t ch∆°i:**\n' +
                '‚Ä¢ Ch·ªçn con v·∫≠t ƒë·ªÉ c∆∞·ª£c\n' +
                '‚Ä¢ Tr√∫ng 1 con: x1 | 2 con: x2 | 3 con: x4\n' +
                '‚Ä¢ Kh√¥ng tr√∫ng: ti·ªÅn c∆∞·ª£c tr·∫£ cho bot\n\n' +
                `**üìä C∆∞·ª£c hi·ªán t·∫°i:**\n${betsDisplay}`)
            .setColor(game.autoPlay ? '#FF4500' : '#0099FF')
            .setFooter({ 
                text: game.autoPlay ? 
                    'ü§ñ T·ª± ƒë·ªông - s·∫Ω quay trong 30s' : 
                    '‚è∞ Game timeout sau 3 ph√∫t'
            });

        const betViews = createBetViews();
        const controlView = new ControlView();

        const components = game.autoPlay ? [] : [...betViews, controlView];

        if (game.gameMessage && !isNew) {
            await game.gameMessage.edit({ embeds: [embed], components });
        } else {
            game.gameMessage = await channel.send({ embeds: [embed], components });
        }
    },

    // X·ª≠ l√Ω interactions
    async handleInteraction(interaction) {
        const channelId = interaction.channel.id;
        const game = botGames.get(channelId);
        
        if (!game) {
            return interaction.reply({ content: '‚ùå Kh√¥ng c√≥ v√°n game n√†o!', ephemeral: true });
        }

        // X·ª≠ l√Ω modal submit
        if (interaction.isModalSubmit() && interaction.customId.startsWith('bot_bet_modal_')) {
            const animal = interaction.customId.split('_')[3];
            const amount = parseInt(interaction.fields.getTextInputValue('bet_amount'));

            if (isNaN(amount) || amount <= 0) {
                return interaction.reply({ content: '‚ùå S·ªë Rin kh√¥ng h·ª£p l·ªá!', ephemeral: true });
            }

            const userRin = await getUserRin(interaction.user.id);
            if (userRin < amount) {
                return interaction.reply({ content: '‚ùå B·∫°n kh√¥ng ƒë·ªß Rin!', ephemeral: true });
            }

            // L∆∞u c∆∞·ª£c
            if (!game.bets.has(interaction.user.id)) {
                game.bets.set(interaction.user.id, {});
            }
            
            const userBets = game.bets.get(interaction.user.id);
            userBets[animal] = (userBets[animal] || 0) + amount;
            game.participants.add(interaction.user.id);

            await interaction.reply({ 
                content: `‚úÖ ƒê√£ c∆∞·ª£c **${amount} Rin** v√†o **${animal}**!`, 
                ephemeral: true 
            });

            // C·∫≠p nh·∫≠t hi·ªÉn th·ªã game
            await this.updateGameDisplay(interaction.channel, channelId);
            return;
        }

        // X·ª≠ l√Ω button clicks
        if (interaction.customId.startsWith('bot_bet_')) {
            if (game.autoPlay) {
                return interaction.reply({ content: '‚ùå Game ƒëang ·ªü ch·∫ø ƒë·ªô t·ª± ƒë·ªông, kh√¥ng th·ªÉ c∆∞·ª£c!', ephemeral: true });
            }

            const animal = interaction.customId.split('_')[2];
            const modal = new BetModal(animal);
            await interaction.showModal(modal);
            return;
        }

        if (interaction.customId === 'bot_confirm_bet') {
            if (game.autoPlay) {
                return interaction.reply({ content: '‚ùå Game ƒëang ·ªü ch·∫ø ƒë·ªô t·ª± ƒë·ªông!', ephemeral: true });
            }

            if (game.participants.size === 0) {
                return interaction.reply({ content: '‚ùå Ch∆∞a c√≥ ai c∆∞·ª£c!', ephemeral: true });
            }

            // X√°c nh·∫≠n v√† tr·ª´ ti·ªÅn t·∫•t c·∫£ ng∆∞·ªùi ch∆°i
            for (const [userId, userBets] of game.bets) {
                const totalBet = Object.values(userBets).reduce((sum, amount) => sum + amount, 0);
                if (totalBet > 0) {
                    await updateUserRin(userId, -totalBet);
                }
            }

            await interaction.deferUpdate();
            await this.executeGame(interaction.channel, channelId);
            return;
        }

        if (interaction.customId === 'bot_auto_play') {
            if (game.autoPlay) {
                return interaction.reply({ content: '‚ùå Ch·∫ø ƒë·ªô t·ª± ƒë·ªông ƒë√£ ƒë∆∞·ª£c b·∫≠t!', ephemeral: true });
            }

            if (game.participants.size === 0) {
                return interaction.reply({ content: '‚ùå Ch∆∞a c√≥ ai c∆∞·ª£c!', ephemeral: true });
            }

            game.autoPlay = true;
            await interaction.deferUpdate();
            
            // C·∫≠p nh·∫≠t hi·ªÉn th·ªã
            await this.updateGameDisplay(interaction.channel, channelId);

            // Timer 30 gi√¢y
            game.autoTimer = setTimeout(async () => {
                // X√°c nh·∫≠n v√† tr·ª´ ti·ªÅn t·∫•t c·∫£ ng∆∞·ªùi ch∆°i
                for (const [userId, userBets] of game.bets) {
                    const totalBet = Object.values(userBets).reduce((sum, amount) => sum + amount, 0);
                    if (totalBet > 0) {
                        await updateUserRin(userId, -totalBet);
                    }
                }
                await this.executeGame(interaction.channel, channelId);
            }, 30000);

            return;
        }
    },

    // Th·ª±c thi game (quay k·∫øt qu·∫£)
    async executeGame(channel, channelId) {
        const game = botGames.get(channelId);
        if (!game || game.participants.size === 0) return;

        // Clear timers
        if (game.autoTimer) clearTimeout(game.autoTimer);
        if (game.gameTimeout) clearTimeout(game.gameTimeout);

        // Hi·ªáu ·ª©ng quay t·ª´ng x√∫c x·∫Øc
        let tempResults = [];
        const spinningMsg = await channel.send({
            embeds: [
                new EmbedBuilder()
                    .setTitle('üé≤ ƒêANG QUAY B·∫¶U CUA...')
                    .setDescription('ƒêang m·ªü k·∫øt qu·∫£...')
                    .setColor('#FFD700')
            ]
        });
        for (let i = 0; i < 3; i++) {
            await new Promise(r => setTimeout(r, 700));
            const rand = BAU_CUA_ANIMALS[Math.floor(Math.random() * BAU_CUA_ANIMALS.length)];
            tempResults.push(rand);
            await spinningMsg.edit({
                embeds: [
                    new EmbedBuilder()
                        .setTitle('üé≤ ƒêANG QUAY B·∫¶U CUA...')
                        .setDescription(`ƒê√£ m·ªü: ${tempResults.map(r => `${BAU_CUA_EMOJIS[r]} ${r}`).join(' | ')}${' | ‚ùì'.repeat(3 - tempResults.length)}`)
                        .setColor('#FFD700')
                ]
            });
        }
        // K·∫øt qu·∫£ th·∫≠t
        const results = tempResults;

        let resultText = `üé≤ **K·∫øt qu·∫£:** ${results.map(r => `${BAU_CUA_EMOJIS[r]} ${r}`).join(' | ')}\n\n`;

        let botNetWinnings = 0; // T·ªïng ti·ªÅn bot th·∫Øng/thua

        // X·ª≠ l√Ω t·ª´ng ng∆∞·ªùi ch∆°i
        for (const [userId, userBets] of game.bets) {
            const user = await channel.client.users.fetch(userId);
            let totalWin = 0;
            let totalLoss = 0;
            const betResults = [];

            for (const [animal, amount] of Object.entries(userBets)) {
                const count = results.filter(r => r === animal).length;
                let winAmount = 0;
                let multiplier = 0;
                if (count === 1) {
                    multiplier = 1;
                    winAmount = amount * multiplier;
                    totalWin += winAmount;
                    botNetWinnings -= winAmount; // Bot m·∫•t ti·ªÅn khi ng∆∞·ªùi ch∆°i th·∫Øng
                    betResults.push(`${BAU_CUA_EMOJIS[animal]} +${winAmount}`);
                } else if (count === 2) {
                    multiplier = 2;
                    winAmount = amount * multiplier;
                    totalWin += winAmount;
                    botNetWinnings -= winAmount; // Bot m·∫•t ti·ªÅn khi ng∆∞·ªùi ch∆°i th·∫Øng
                    betResults.push(`${BAU_CUA_EMOJIS[animal]} +${winAmount}`);
                } else if (count === 3) {
                    multiplier = 4;
                    winAmount = amount * multiplier;
                    totalWin += winAmount;
                    botNetWinnings -= winAmount; // Bot m·∫•t ti·ªÅn khi ng∆∞·ªùi ch∆°i th·∫Øng
                    betResults.push(`${BAU_CUA_EMOJIS[animal]} +${winAmount}`);
                } else {
                    totalLoss += amount;
                    botNetWinnings += amount; // Bot nh·∫≠n ti·ªÅn khi ng∆∞·ªùi ch∆°i thua
                    betResults.push(`${BAU_CUA_EMOJIS[animal]} -${amount}`);
                }
            }

            // C·ªông ti·ªÅn th·∫Øng cho ng∆∞·ªùi ch∆°i (l·∫•y l·∫°i ti·ªÅn c∆∞·ª£c + ti·ªÅn th·∫Øng)
            if (totalWin > 0) {
                await updateUserRin(userId, totalWin);
            }

            const netResult = totalWin - totalLoss;
            const resultIcon = netResult > 0 ? 'üèÜ' : netResult === 0 ? 'ü§ù' : 'üí∏';
            resultText += `${resultIcon} **${user.displayName}:** ${netResult >= 0 ? '+' : ''}${netResult} (${betResults.join(' ')})\n`;
        }

        // C·∫≠p nh·∫≠t ti·ªÅn cho bot (n·∫øu c√≥ thay ƒë·ªïi)
        if (botNetWinnings !== 0) {
            await updateUserRin('bot', botNetWinnings);
        }

        const resultEmbed = new EmbedBuilder()
            .setTitle('üé∞ K·∫æT QU·∫¢ B·∫¶U CUA BOT')
            .setDescription(resultText)
            .setColor('#FFD700')
            .setFooter({ text: 'C·∫£m ∆°n b·∫°n ƒë√£ ch∆°i!' });

        await channel.send({ embeds: [resultEmbed] });

        // X√≥a game
        botGames.delete(channelId);
    }
}

// Timeout to√†n game (3 ph√∫t)
async function timeoutGame(channel, channelId) {
    const game = botGames.get(channelId);
    if (!game) return;

    const embed = new EmbedBuilder()
        .setTitle('‚è∞ GAME TIMEOUT!')
        .setDescription('Game ƒë√£ qu√° 3 ph√∫t v√† b·ªã h·ªßy!')
        .setColor('#FF0000');

    await channel.send({ embeds: [embed] });

    // Clear all timers
    if (game.autoTimer) clearTimeout(game.autoTimer);

    // X√≥a game
    botGames.delete(channelId);
} 