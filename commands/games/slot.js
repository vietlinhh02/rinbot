const { EmbedBuilder } = require('discord.js');
const { getUserRin, updateUserRin } = require('../../utils/database');
const AntiSpamManager = require('../../utils/antiSpam');

const SYMBOLS = ['üçí', 'üçã', 'üçâ', 'üçá', 'üîî', '‚≠ê'];

module.exports = {
    name: 'slot',
    description: 'M√°y slot may m·∫Øn, c∆∞·ª£c Rin. C√∫ ph√°p: slot <s·ªë ti·ªÅn>',
    async execute(message, args) {
        const userId = message.author.id;
        
        try {
            // B·∫£o v·ªá command kh·ªèi spam v·ªõi cooldown 2 gi√¢y
            await AntiSpamManager.executeWithProtection(
                userId, 
                'slot', 
                2, // 2 gi√¢y cooldown
                this.executeSlot,
                this,
                message,
                args
            );
        } catch (error) {
            return message.reply(error.message);
        }
    },

    async executeSlot(message, args) {
        const userId = message.author.id;
        const amount = parseInt(args[0]);
        if (isNaN(amount) || amount <= 0) {
            return message.reply('‚ùå S·ªë Rin ph·∫£i l√† s·ªë d∆∞∆°ng!');
        }
        
        const userRin = await getUserRin(userId);
        if (userRin < amount) {
            return message.reply('‚ùå B·∫°n kh√¥ng ƒë·ªß Rin ƒë·ªÉ ch∆°i!');
        }

        // Tr·ª´ ti·ªÅn c∆∞·ª£c tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu game (tr√°nh double spend)
        await updateUserRin(userId, -amount);

        // Chu·∫©n b·ªã k·∫øt qu·∫£ slot
        let slots = ['‚ùî', '‚ùî', '‚ùî'];
        let jackpot = false, twoMatch = false;
        
        // X√°c su·∫•t 3 gi·ªëng nhau: 10%
        if (Math.random() < 0.10) {
            const symbol = SYMBOLS[Math.floor(Math.random() * SYMBOLS.length)];
            slots = [symbol, symbol, symbol];
            jackpot = true;
        } else if (Math.random() < 0.35) { // X√°c su·∫•t 2 gi·ªëng nhau: 35%
            const symbol = SYMBOLS[Math.floor(Math.random() * SYMBOLS.length)];
            const other = SYMBOLS.filter(s => s !== symbol)[Math.floor(Math.random() * (SYMBOLS.length-1))];
            // Random v·ªã tr√≠ 2 gi·ªëng nhau 
            const idx = Math.floor(Math.random() * 3);
            if (idx === 0) slots = [symbol, symbol, other];
            else if (idx === 1) slots = [symbol, other, symbol];
            else slots = [other, symbol, symbol];
            twoMatch = true;
        } else {
            // 3 bi·ªÉu t∆∞·ª£ng kh√°c nhau
            let arr = SYMBOLS.slice();
            for (let i = 0; i < 3; i++) {
                const pick = arr.splice(Math.floor(Math.random() * arr.length), 1)[0];
                slots[i] = pick;
            }
        }
        
        // G·ª≠i hi·ªáu ·ª©ng quay slot l·∫ßn l∆∞·ª£t
        let display = ['‚ùî', '‚ùî', '‚ùî'];
        const animEmbed = new EmbedBuilder()
            .setTitle('üé∞ ƒêANG QUAY SLOT...')
            .setDescription(`| ${display.join(' | ')} |\n\nüí∏ **ƒê√£ c∆∞·ª£c:** ${amount} Rin`)
            .setColor('#AAAAAA');
        const sentMsg = await message.reply({ embeds: [animEmbed] });
        
        // L·∫≠t t·ª´ng slot
        setTimeout(async () => {
            display[0] = slots[0];
            await sentMsg.edit({ embeds: [
                new EmbedBuilder()
                    .setTitle('üé∞ ƒêANG QUAY SLOT...')
                    .setDescription(`| ${display.join(' | ')} |\n\nüí∏ **ƒê√£ c∆∞·ª£c:** ${amount} Rin`)
                    .setColor('#AAAAAA')
            ] });
        }, 500);
        
        setTimeout(async () => {
            display[1] = slots[1];
            await sentMsg.edit({ embeds: [
                new EmbedBuilder()
                    .setTitle('üé∞ ƒêANG QUAY SLOT...')
                    .setDescription(`| ${display.join(' | ')} |\n\nüí∏ **ƒê√£ c∆∞·ª£c:** ${amount} Rin`)
                    .setColor('#AAAAAA')
            ] });
        }, 1000);
        
        setTimeout(async () => {
            display[2] = slots[2];
            
            // T√≠nh k·∫øt qu·∫£ - ƒë√£ tr·ª´ ti·ªÅn c∆∞·ª£c r·ªìi, ch·ªâ c·∫ßn c·ªông ti·ªÅn th·∫Øng
            let winAmount = 0;
            let desc = `| ${display.join(' | ')} |\n\n`;
            
            if (jackpot) {
                winAmount = amount * 5; // Th·∫Øng g·∫•p 5 (l·ªùi g·∫•p 4)
                desc += `üéâ **JACKPOT!** Tr√∫ng 3 bi·ªÉu t∆∞·ª£ng!\nüí∞ **Th·∫Øng:** ${winAmount} Rin (l·ªùi ${winAmount - amount} Rin)`;
                await updateUserRin(userId, winAmount);
            } else if (twoMatch) {
                winAmount = amount * 2; // Th·∫Øng g·∫•p 2 (l·ªùi b·∫±ng v·ªën)
                desc += `‚ú® **Tr√∫ng 2 bi·ªÉu t∆∞·ª£ng!**\nüí∞ **Th·∫Øng:** ${winAmount} Rin (l·ªùi ${winAmount - amount} Rin)`;
                await updateUserRin(userId, winAmount);
            } else {
                desc += `üò¢ **Kh√¥ng tr√∫ng!**\nüí∏ **M·∫•t:** ${amount} Rin`;
                // Kh√¥ng c·ªông g√¨ v√¨ ƒë√£ tr·ª´ ti·ªÅn c∆∞·ª£c r·ªìi
            }
            
            const resultEmbed = new EmbedBuilder()
                .setTitle('üé∞ SLOT MAY M·∫ÆN')
                .setDescription(desc)
                .setColor(winAmount > 0 ? '#FFD700' : '#FF0000')
                .setFooter({ text: `T·ª∑ l·ªá: Jackpot 10% | 2 gi·ªëng 35% | Thua 55%` });
                
            await sentMsg.edit({ embeds: [resultEmbed] });
        }, 1500);
    }
}; 