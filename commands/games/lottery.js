const { EmbedBuilder } = require('discord.js');
const LotteryTicket = require('../../models/LotteryTicket');
const { getUserRin, updateUserRin } = require('../../utils/database');
const axios = require('axios');

function getTodayStr() {
    const now = new Date();
    return `${now.getDate()}-${now.getMonth() + 1}-${now.getFullYear()}`;
}

function getVNTime() {
    return new Date();
}

module.exports = {
    name: 'lottery',
    description: 'Mua v√© s·ªë mi·ªÅn B·∫Øc, nh·∫≠p 5 s·ªë, c∆∞·ª£c 1000. Ch·ªâ nh·∫≠n v√© t·ª´ 8h ƒë·∫øn 6h30 t·ªëi. K·∫øt qu·∫£ d·ª±a tr√™n gi·∫£i ƒêB. C√∫ ph√°p: lottery <5 s·ªë>\nAdmin: lotterycheck [ng√†y-dd-mm-yyyy] ƒë·ªÉ xem danh s√°ch v√©.\nAdmin: lotteryreward [ng√†y-dd-mm-yyyy] ƒë·ªÉ tr·∫£ th∆∞·ªüng.',
    async execute(message, args) {
        const userId = message.author.id;
        const now = getVNTime();
        const hour = now.getHours();
        const minute = now.getMinutes();
        let today = getTodayStr();
        // N·∫øu sau 18h30 ho·∫∑c tr∆∞·ªõc 8h s√°ng th√¨ t√≠nh cho ng√†y h√¥m sau
        if ((hour > 18 || (hour === 18 && minute >= 30)) || hour < 8) {
            // L·∫•y ng√†y mai
            const nextDay = new Date(now.getTime() + 24 * 60 * 60 * 1000);
            today = `${nextDay.getDate()}-${nextDay.getMonth() + 1}-${nextDay.getFullYear()}`;
        }
        // Ki·ªÉm tra s·ªë h·ª£p l·ªá
        if (!args[0] || !/^[0-9]{5}$/.test(args[0])) {
            return message.reply('‚ùå B·∫°n ph·∫£i nh·∫≠p ƒë√∫ng 5 s·ªë (vd: 12345)');
        }
        // Kh√¥ng ki·ªÉm tra ƒë√£ mua, cho ph√©p mua nhi·ªÅu v√©/ng√†y
        // Ki·ªÉm tra ti·ªÅn
        const userRin = await getUserRin(userId);
        if (userRin < 1000) {
            return message.reply('‚ùå B·∫°n c·∫ßn 1000 Rin ƒë·ªÉ mua v√© s·ªë!');
        }
        // Tr·ª´ ti·ªÅn v√† l∆∞u v√©
        await updateUserRin(userId, -1000);
        await LotteryTicket.create({ userId, soDuDoan: args[0], ngay: today });
        const embed = new EmbedBuilder()
            .setTitle('üéüÔ∏è ƒê√É MUA V√â S·ªê MI·ªÄN B·∫ÆC')
            .setDescription(`B·∫°n ƒë√£ mua v√© s·ªë mi·ªÅn B·∫Øc ng√†y **${today}** v·ªõi s·ªë d·ª± ƒëo√°n **${args[0]}**\nCh·ªù k·∫øt qu·∫£ sau 18h30 ng√†y ƒë√≥!`)
            .setColor('#FFD700');
        await message.reply({ embeds: [embed] });
    },
    // H√†m n√†y ƒë·ªÉ admin ho·∫∑c t·ª± ƒë·ªông g·ªçi sau 18h ƒë·ªÉ tr·∫£ th∆∞·ªüng
    async checkResult(message, ngay = null) {
        const day = ngay || getTodayStr();
        // L·∫•y k·∫øt qu·∫£ t·ª´ API
        const res = await axios.get('https://api-xsmb-today.onrender.com/api/v1');
        const data = await res.data;
        const result = data.results['ƒêB'][0];
        // N·∫øu k·∫øt qu·∫£ ch∆∞a quay
        if (!result || result === 'ƒêang c·∫≠p nh·∫≠t') {
            return message.reply('‚è≥ K·∫øt qu·∫£ x·ªï s·ªë mi·ªÅn B·∫Øc h√¥m nay ch∆∞a c√≥, h√£y th·ª≠ l·∫°i sau 18h30!');
        }
        // L·∫•y t·∫•t c·∫£ v√© ch∆∞a claim c·ªßa ng√†y ƒë√≥
        const tickets = await LotteryTicket.find({ ngay: day, claimed: false });
        let summary = '';
        for (const ticket of tickets) {
            const soDuDoan = ticket.soDuDoan;
            let match = 0;
            // So s√°nh t·ª´ cu·ªëi l√™n ƒë·∫ßu
            for (let i = 1; i <= 5; i++) {
                if (soDuDoan[5 - i] === result[5 - i]) match++;
                else break;
            }
            let reward = 0;
            if (match === 5) reward = 500000; // Jackpot
            else if (match === 4) reward = 50000;
            else if (match === 3) reward = 5000;
            else if (match === 2) reward = 1000;
            if (reward > 0) {
                await updateUserRin(ticket.userId, reward);
                summary += `<@${ticket.userId}> (${soDuDoan}) tr√∫ng ${match} s·ªë cu·ªëi: +${reward} Rin\n`;
            }
            ticket.claimed = true;
            await ticket.save();
        }
        if (!summary) summary = 'Kh√¥ng ai tr√∫ng th∆∞·ªüng h√¥m nay.';
        const embed = new EmbedBuilder()
            .setTitle('üéâ K·∫æT QU·∫¢ X·ªî S·ªê MI·ªÄN B·∫ÆC')
            .setDescription(`Gi·∫£i ƒêB: **${result}**\n\n${summary}`)
            .setColor('#00FF00');
        await message.reply({ embeds: [embed] });
    },
    // L·ªánh: xem danh s√°ch v√© ƒë√£ mua h√¥m nay (ai c≈©ng d√πng ƒë∆∞·ª£c, ch·ªâ l·∫•y ng√†y hi·ªán t·∫°i)
    async lotterycheck(message) {
        let day = getTodayStr();
        const tickets = await LotteryTicket.find({ ngay: day });
        if (!tickets.length) return message.reply(`Kh√¥ng c√≥ v√© n√†o cho ng√†y ${day}`);
        let list = tickets.map(t => `<@${t.userId}>: **${t.soDuDoan}**`).join('\n');
        const embed = new EmbedBuilder()
            .setTitle(`üìã DANH S√ÅCH V√â S·ªê NG√ÄY ${day}`)
            .setDescription(list)
            .setColor('#0099FF');
        await message.reply({ embeds: [embed] });
    },
    // L·ªánh admin: tr·∫£ th∆∞·ªüng th·ªß c√¥ng (c√≥ th·ªÉ d√πng cho auto 9h t·ªëi)
    async lotteryreward(message, args) {
        // Ch·ªâ cho admin d√πng
        if (!message.member.permissions.has('ADMINISTRATOR')) {
            return message.reply('‚õî L·ªánh n√†y ch·ªâ d√†nh cho admin!');
        }
        let day = args[0] || getTodayStr();
        await this.checkResult(message, day);
    },
    // L·ªánh: xem th√¥ng tin t·∫•t c·∫£ v√© s·ªë g·∫ßn nh·∫•t c·ªßa user
    async lotteryinfo(message) {
        const userId = message.author.id;
        // L·∫•y ng√†y g·∫ßn nh·∫•t user c√≥ v√©
        const lastTicket = await LotteryTicket.findOne({ userId }).sort({ createdAt: -1 });
        if (!lastTicket) return message.reply('B·∫°n ch∆∞a t·ª´ng mua v√© s·ªë n√†o!');
        const day = lastTicket.ngay;
        // L·∫•y t·∫•t c·∫£ v√© c·ªßa user trong ng√†y ƒë√≥
        const tickets = await LotteryTicket.find({ userId, ngay: day });
        // L·∫•y k·∫øt qu·∫£ t·ª´ API
        const { data } = await axios.get('https://api-xsmb-today.onrender.com/api/v1');
        const resultDay = data.time;
        const result = data.results['ƒêB'][0];
        let info = '';
        for (const ticket of tickets) {
            let match = 0, reward = 0, status = '';
            // N·∫øu ch∆∞a c√≥ k·∫øt qu·∫£
            if (!result || result === 'ƒêang c·∫≠p nh·∫≠t') {
                status = '‚è≥ Ch∆∞a quay s·ªë';
            } else if (day === resultDay) {
                for (let i = 1; i <= 5; i++) {
                    if (ticket.soDuDoan[5 - i] === result[5 - i]) match++;
                    else break;
                }
                if (match === 5) reward = 500000;
                else if (match === 4) reward = 50000;
                else if (match === 3) reward = 5000;
                else if (match === 2) reward = 1000;
                if (reward > 0) status = `üéâ Tr√∫ng ${match} s·ªë cu·ªëi: +${reward} Rin`;
                else status = 'üò¢ Kh√¥ng tr√∫ng';
            } else {
                status = '‚è≥ Ch∆∞a quay s·ªë';
            }
            info += `‚Ä¢ S·ªë: **${ticket.soDuDoan}** | ${status}\n`;
        }
        const embed = new EmbedBuilder()
            .setTitle('üìÑ TH√îNG TIN V√â S·ªê MI·ªÄN B·∫ÆC')
            .setDescription(`‚Ä¢ Ng√†y d·ª± th∆∞·ªüng: **${day}**\n${info}`)
            .setColor('#0099FF');
        await message.reply({ embeds: [embed] });
    }
}; 