const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const { getUserRin, updateUserRin } = require('../../utils/database');
const { validateBetAmount } = require('../../utils/betModal');

// L∆∞u tr·ªØ games v√† l·ªãch s·ª≠
const games = new Map();
let globalHistory = []; // L·ªãch s·ª≠ to√†n b·ªô server
const MAX_HISTORY = 50; // L∆∞u t·ªëi ƒëa 50 phi√™n
const BETTING_TIME = 60000; // 60 gi√¢y ƒë·ªÉ c∆∞·ª£c

// Load history t·ª´ file khi kh·ªüi ƒë·ªông
try {
    const fs = require('fs');
    if (fs.existsSync('./data/taixiu_history.json')) {
        const data = fs.readFileSync('./data/taixiu_history.json', 'utf8');
        globalHistory = JSON.parse(data);
        console.log(`üìä [TAIXIU] Loaded ${globalHistory.length} history records`);
    } else {
        console.log('üìä [TAIXIU] No history file found, starting fresh');
    }
} catch (error) {
    console.error('‚ùå [TAIXIU] L·ªói load history:', error);
    globalHistory = [];
}

// Phi√™n game counter - b·∫Øt ƒë·∫ßu t·ª´ phi√™n cu·ªëi c√πng + 1
let gameSession = globalHistory.length > 0 ? Math.max(...globalHistory.map(h => h.session)) + 1 : 1;

// Helper function ƒë·ªÉ l·∫•y session ti·∫øp theo
function getNextSession() {
    return gameSession++;
}

// Modal ƒë·ªÉ nh·∫≠p ti·ªÅn c∆∞·ª£c
class BetModal extends ModalBuilder {
    constructor(betType) {
        super();
        this.setCustomId(`taixiu_bet_modal_${betType}`)
            .setTitle(`C∆∞·ª£c ${betType.toUpperCase()} - T√†i X·ªâu`);

        const betInput = new TextInputBuilder()
            .setCustomId('bet_amount')
            .setLabel('S·ªë Rin b·∫°n mu·ªën c∆∞·ª£c:')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Nh·∫≠p s·ªë Rin (VD: 100, 50%, all)')
            .setRequired(true);

        const row = new ActionRowBuilder().addComponents(betInput);
        this.addComponents(row);
    }
}

// T·∫°o view buttons cho c∆∞·ª£c
function createBetViews() {
    const taiButton = new ButtonBuilder()
        .setCustomId('bet_tai')
        .setLabel('üî∫ C∆Ø·ª¢C T√ÄI (11-17)')
        .setStyle(ButtonStyle.Success);

    const xiuButton = new ButtonBuilder()
        .setCustomId('bet_xiu')
        .setLabel('üîª C∆Ø·ª¢C X·ªàU (4-10)')
        .setStyle(ButtonStyle.Primary);

    const historyButton = new ButtonBuilder()
        .setCustomId('view_history')
        .setLabel('üìä Xem Phi√™n ƒê·ªì')
        .setStyle(ButtonStyle.Secondary);

    const row1 = new ActionRowBuilder().addComponents(taiButton, xiuButton, historyButton);

    const startButton = new ButtonBuilder()
        .setCustomId('start_taixiu')
        .setLabel('üé≤ B·∫ÆT ƒê·∫¶U QUAY (Ch·ªâ nh√† c√°i)')
        .setStyle(ButtonStyle.Danger);

    const cancelButton = new ButtonBuilder()
        .setCustomId('cancel_taixiu')
        .setLabel('‚ùå H·ªßy phi√™n')
        .setStyle(ButtonStyle.Secondary);

    const row2 = new ActionRowBuilder().addComponents(startButton, cancelButton);

    return [row1, row2];
}

// T·∫°o c·∫ßu t·ª´ l·ªãch s·ª≠
function createCauDisplay(history, maxLength = 20) {
    if (history.length === 0) return "Ch∆∞a c√≥ l·ªãch s·ª≠";
    
    const recent = history.slice(-maxLength);
    const cauString = recent.map(h => h.result === 'tai' ? 'T' : 'X').join('-');
    
    // ƒê·∫øm c·∫ßu hi·ªán t·∫°i
    const lastResult = recent[recent.length - 1]?.result;
    let currentStreak = 0;
    for (let i = recent.length - 1; i >= 0; i--) {
        if (recent[i].result === lastResult) {
            currentStreak++;
        } else {
            break;
        }
    }
    
    return {
        cauString,
        currentStreak,
        lastResult: lastResult === 'tai' ? 'T√†i' : 'X·ªâu'
    };
}

// T·∫°o phi√™n ƒë·ªì
function createPhanDoDisplay(history, maxPhien = 15) {
    if (history.length === 0) return "Ch∆∞a c√≥ d·ªØ li·ªáu phi√™n ƒë·ªì";
    
    const recent = history.slice(-maxPhien);
    let phanDo = "```\n";
    phanDo += "PHI√äN | ƒêI·ªÇM | KQ  | X√öC X·∫ÆC\n";
    phanDo += "------|------|-----|----------\n";
    
    recent.forEach(h => {
        const phien = h.session.toString().padStart(4, '0');
        const diem = h.total.toString().padStart(2, ' ');
        const kq = h.result === 'tai' ? 'T√ÄI' : 'X·ªàU';
        const xucxac = h.dice.join('-');
        phanDo += `#${phien} |  ${diem}  | ${kq} | ${xucxac}\n`;
    });
    
    phanDo += "```";
    return phanDo;
}

module.exports = {
    name: 'taixiu',
    description: 'Game T√†i X·ªâu - 3 x√∫c x·∫Øc, t·ªïng 4-10 l√† X·ªâu, 11-17 l√† T√†i',

    async execute(message, args) {
        const channelId = message.channel.id;
        
        // Ki·ªÉm tra ƒë√£ c√≥ phi√™n n√†o ch∆∞a
        if (games.has(channelId)) {
            return message.reply('‚ùå ƒê√£ c√≥ phi√™n T√†i X·ªâu trong k√™nh n√†y!');
        }

        // CHECK √ÇM TI·ªÄN - Kh√¥ng cho ph√©p nh√† c√°i √¢m ti·ªÅn
        const hostRin = await getUserRin(message.author.id);
        if (hostRin < 0) {
            return message.reply(`‚ùå **Kh√¥ng th·ªÉ l√†m nh√† c√°i T√†i X·ªâu!**\n\n` +
                `**L√Ω do:** B·∫°n ƒëang √¢m ti·ªÅn (${hostRin} Rin)\n\n` +
                `üí° **H∆∞·ªõng d·∫´n:** Ki·∫øm ti·ªÅn ƒë·ªÉ c√≥ s·ªë d∆∞ d∆∞∆°ng tr∆∞·ªõc khi l√†m nh√† c√°i!`);
        }

        // T·∫°o phi√™n game m·ªõi
        const currentSession = gameSession++;
        games.set(channelId, {
            session: currentSession,
            host: message.author,
            bets: new Map(), // userId -> {type: 'tai'/'xiu', amount: number}
            started: false,
            participants: new Set(),
            messageId: null
        });

        console.log(`üé≤ [TAIXIU] Session #${currentSession} started by ${message.author.tag} in channel ${channelId}`);

        // T·∫°o display c·∫ßu
        const cauDisplay = createCauDisplay(globalHistory);
        
        const embed = new EmbedBuilder()
            .setTitle(`üé≤ T√ÄI X·ªàU - PHI√äN #${currentSession.toString().padStart(4, '0')}`)
            .setDescription(`**üè† Nh√† c√°i:** ${message.author.displayName}\n\n` +
                `**üìä C·∫ßu hi·ªán t·∫°i:**\n` +
                `${cauDisplay.cauString || 'Ch∆∞a c√≥ l·ªãch s·ª≠'}\n` +
                `${cauDisplay.currentStreak ? `*C·∫ßu ${cauDisplay.lastResult}: ${cauDisplay.currentStreak} phi√™n*` : ''}\n\n` +
                `**üéØ C√°ch ch∆°i:**\n` +
                `‚Ä¢ T√†i: T·ªïng 3 x√∫c x·∫Øc t·ª´ 11-17 ƒëi·ªÉm\n` +
                `‚Ä¢ X·ªâu: T·ªïng 3 x√∫c x·∫Øc t·ª´ 4-10 ƒëi·ªÉm\n` +
                `‚Ä¢ T·ª∑ l·ªá th·∫Øng: 1:1 (c∆∞·ª£c 100 th·∫Øng 200)\n\n` +
                `**üë• Ng∆∞·ªùi c∆∞·ª£c:** 0 | **üí∞ T·ªïng ti·ªÅn:** 0 Rin`)
            .setColor('#FFD700')
            .setThumbnail('https://img.icons8.com/emoji/96/000000/game-die.png')
            .setFooter({ text: 'Ch·ªçn T√†i ho·∫∑c X·ªâu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!' });

        const views = createBetViews();
        const gameMessage = await message.reply({ 
            embeds: [embed], 
            components: views 
        });

        // L∆∞u message ID
        games.get(channelId).messageId = gameMessage.id;
    },

    // C·∫≠p nh·∫≠t embed game
    async updateGameEmbed(interaction, game) {
        try {
            let taiPlayers = [];
            let xiuPlayers = [];
            let totalAmount = 0;
            let totalPlayers = 0;

            for (const [userId, bet] of game.bets) {
                const user = await interaction.client.users.fetch(userId);
                
                if (Array.isArray(bet)) {
                    // Ng∆∞·ªùi n√†y c∆∞·ª£c nhi·ªÅu c·ª≠a
                    for (const singleBet of bet) {
                        const playerInfo = `‚Ä¢ **${user.displayName}**: ${singleBet.amount.toLocaleString()} Rin`;
                        
                        if (singleBet.type === 'tai') {
                            taiPlayers.push(playerInfo);
                        } else {
                            xiuPlayers.push(playerInfo);
                        }
                        
                        totalAmount += singleBet.amount;
                    }
                    totalPlayers++;
                } else {
                    // C∆∞·ª£c ƒë∆°n
                    const playerInfo = `‚Ä¢ **${user.displayName}**: ${bet.amount.toLocaleString()} Rin`;
                    
                    if (bet.type === 'tai') {
                        taiPlayers.push(playerInfo);
                    } else {
                        xiuPlayers.push(playerInfo);
                    }
                    
                    totalAmount += bet.amount;
                    totalPlayers++;
                }
            }

            const cauDisplay = createCauDisplay(globalHistory);
            
            const embed = new EmbedBuilder()
                .setTitle(`üé≤ T√ÄI X·ªàU - PHI√äN #${game.session.toString().padStart(4, '0')}`)
                .setDescription(`**üè† Nh√† c√°i:** ${game.host.displayName}\n\n` +
                    `**üìä C·∫ßu hi·ªán t·∫°i:**\n` +
                    `${cauDisplay.cauString || 'Ch∆∞a c√≥ l·ªãch s·ª≠'}\n` +
                    `${cauDisplay.currentStreak ? `*C·∫ßu ${cauDisplay.lastResult}: ${cauDisplay.currentStreak} phi√™n*` : ''}\n\n` +
                    `**üë• Ng∆∞·ªùi c∆∞·ª£c:** ${totalPlayers} | **üí∞ T·ªïng ti·ªÅn:** ${totalAmount.toLocaleString()} Rin`)
                .addFields(
                    { 
                        name: 'üî∫ C∆Ø·ª¢C T√ÄI (11-17)', 
                        value: taiPlayers.length > 0 ? taiPlayers.join('\n') : '*Ch∆∞a c√≥ ai c∆∞·ª£c*', 
                        inline: true 
                    },
                    { 
                        name: 'üîª C∆Ø·ª¢C X·ªàU (4-10)', 
                        value: xiuPlayers.length > 0 ? xiuPlayers.join('\n') : '*Ch∆∞a c√≥ ai c∆∞·ª£c*', 
                        inline: true 
                    }
                )
                .setColor(totalPlayers > 0 ? '#00FF00' : '#FFD700')
                .setThumbnail('https://img.icons8.com/emoji/96/000000/game-die.png')
                .setFooter({ text: 'Nh√† c√°i b·∫•m "B·∫ÆT ƒê·∫¶U QUAY" ƒë·ªÉ m·ªü k·∫øt qu·∫£!' });

            const views = createBetViews();

            // Edit message game g·ªëc
            if (game.messageId) {
                try {
                    const gameMessage = await interaction.channel.messages.fetch(game.messageId);
                    await gameMessage.edit({ embeds: [embed], components: views });
                } catch (error) {
                    console.error('Kh√¥ng th·ªÉ edit message game:', error);
                    // N·∫øu kh√¥ng edit ƒë∆∞·ª£c, th·ª≠ edit reply interaction
                    try {
                        await interaction.editReply({ embeds: [embed], components: views });
                    } catch (editError) {
                        console.error('Kh√¥ng th·ªÉ edit reply:', editError);
                    }
                }
            } else {
                // Fallback: edit reply n·∫øu kh√¥ng c√≥ messageId
                try {
                    await interaction.editReply({ embeds: [embed], components: views });
                } catch (editError) {
                    console.error('Kh√¥ng th·ªÉ edit reply fallback:', editError);
                }
            }
        } catch (error) {
            console.error('L·ªói update game embed:', error);
        }
    },

    // X·ª≠ l√Ω interactions
    async handleInteraction(interaction) {
        try {
            // Ki·ªÉm tra interaction ƒë√£ ƒë∆∞·ª£c reply ch∆∞a
            if (interaction.replied || interaction.deferred) {
                console.log('‚ö†Ô∏è [TAIXIU] Interaction ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω:', interaction.customId);
                return;
            }

            // X·ª≠ l√Ω n√∫t b·∫Øt ƒë·∫ßu nhanh (kh√¥ng c·∫ßn game hi·ªán t·∫°i)
            if (interaction.customId === 'taixiu_quick_start') {
                try {
                    // Ki·ªÉm tra xem ƒë√£ c√≥ game trong channel n√†y ch∆∞a
                    if (games.has(interaction.channel.id)) {
                        await interaction.reply({
                            content: '‚ùå ƒê√£ c√≥ phi√™n T√†i X·ªâu ƒëang di·ªÖn ra trong channel n√†y!',
                            flags: 64
                        });
                        return;
                    }

                    // Ki·ªÉm tra ti·ªÅn c·ªßa ng∆∞·ªùi t·∫°o phi√™n
                    const hostData = await getUserRin(interaction.user.id);
                    if (hostData.rin < 1000) {
                        await interaction.reply({
                            content: '‚ùå B·∫°n c·∫ßn √≠t nh·∫•t **1,000 Rin** ƒë·ªÉ l√†m nh√† c√°i!',
                            flags: 64
                        });
                        return;
                    }

                    // Defer reply tr∆∞·ªõc ƒë·ªÉ tr√°nh timeout
                    await interaction.deferReply();

                    // T·∫°o game m·ªõi t·ª± ƒë·ªông
                    const newGame = {
                        host: interaction.user,
                        bets: new Map(),
                        participants: new Set(),
                        channel: interaction.channel,
                        session: getNextSession(),
                        startTime: Date.now(),
                        timeLeft: BETTING_TIME,
                        started: false
                    };

                    games.set(interaction.channel.id, newGame);

                    // T·∫°o display c·∫ßu 
                    const cauDisplay = createCauDisplay(globalHistory);
                    const phanDoDisplay = createPhanDoDisplay(globalHistory);

                    const embed = new EmbedBuilder()
                        .setTitle(`üé≤ T√ÄI X·ªàU - PHI√äN #${newGame.session.toString().padStart(4, '0')}`)
                        .setDescription(`üéØ **Nh√† c√°i:** ${interaction.user.displayName}\n` +
                                      `‚è∞ **Th·ªùi gian c∆∞·ª£c:** ${BETTING_TIME / 1000}s\n` +
                                      `üí∞ **T·ª∑ l·ªá:** 1:1 (ƒÉn bao nhi√™u th·∫Øng b·∫•y nhi√™u)\n\n` +
                                      `üî• **T√ÄI:** 11-17 ƒëi·ªÉm\n` +
                                      `‚ùÑÔ∏è **X·ªàU:** 4-10 ƒëi·ªÉm\n\n` +
                                      `üìä **C·∫ßu hi·ªán t·∫°i:** \`${cauDisplay.cauString || 'Ch∆∞a c√≥ l·ªãch s·ª≠'}\`\n` +
                                      `üìà **Phi√™n ƒë·ªì:** \`ƒê√£ s·∫µn s√†ng\`\n\n` +
                                      `‚ö° **Phi√™n ƒë∆∞·ª£c t·∫°o nhanh! Ch·ªçn c·ª≠a v√† ƒë·∫∑t c∆∞·ª£c ngay!**\n\n` +
                                      `üë• **Ng∆∞·ªùi c∆∞·ª£c:** 0 | **üí∞ T·ªïng ti·ªÅn:** 0 Rin`)
                        .setColor('#FFD700')
                        .setThumbnail('https://img.icons8.com/emoji/96/000000/game-die.png')
                        .setFooter({ text: `üöÄ Phi√™n b·∫Øt ƒë·∫ßu nhanh b·ªüi ${interaction.user.displayName}`, iconURL: interaction.user.displayAvatarURL() })
                        .setTimestamp();

                    const betViews = createBetViews();
                    
                    const gameMessage = await interaction.editReply({
                        embeds: [embed],
                        components: betViews
                    });

                    // L∆∞u message ID cho game
                    newGame.messageId = gameMessage.id;

                    // B·∫Øt ƒë·∫ßu countdown
                    this.startCountdown(interaction, newGame);
                    return;
                    
                } catch (error) {
                    console.error('L·ªói quick start t√†i x·ªâu:', error);
                    try {
                        await interaction.reply({
                            content: '‚ùå C√≥ l·ªói khi t·∫°o phi√™n m·ªõi! Vui l√≤ng th·ª≠ l·∫°i.',
                            flags: 64
                        });
                    } catch (replyError) {
                        console.error('Kh√¥ng th·ªÉ reply error:', replyError);
                    }
                    return;
                }
            }

            const channelId = interaction.channel.id;
            const game = games.get(channelId);
            
            if (!game) {
                return interaction.reply({ content: '‚ùå Kh√¥ng c√≥ phi√™n T√†i X·ªâu n√†o!', flags: 64 });
            }

        // X·ª≠ l√Ω modal submit
        if (interaction.isModalSubmit() && interaction.customId.startsWith('taixiu_bet_modal_')) {
            const betType = interaction.customId.split('_')[3]; // tai ho·∫∑c xiu
            const amountInput = interaction.fields.getTextInputValue('bet_amount');

            // Validate s·ªë ti·ªÅn
            const validation = await validateBetAmount(amountInput, interaction.user.id, {
                minBet: 10,
                maxBet: null
            });

            if (!validation.valid) {
                return interaction.reply({ content: validation.error, flags: 64 });
            }

            const amount = validation.amount;

            // L∆∞u c∆∞·ª£c - H·ªó tr·ª£ c∆∞·ª£c c·∫£ 2 c·ª≠a
            const userId = interaction.user.id;
            
            // Ki·ªÉm tra xem user ƒë√£ c√≥ bet ch∆∞a
            let existingBet = game.bets.get(userId);
            
            if (existingBet) {
                // N·∫øu ƒë√£ c∆∞·ª£c, ki·ªÉm tra xem c√≥ c∆∞·ª£c c√πng c·ª≠a kh√¥ng
                if (Array.isArray(existingBet)) {
                    // ƒê√£ c∆∞·ª£c nhi·ªÅu l·∫ßn
                    const sameBetType = existingBet.find(bet => bet.type === betType);
                    if (sameBetType) {
                        // C·ªông th√™m v√†o c·ª≠a ƒë√£ c∆∞·ª£c
                        sameBetType.amount += amount;
                        await interaction.reply({ 
                            content: `‚úÖ ƒê√£ c·ªông th√™m **${amount.toLocaleString()} Rin** v√†o c·ª≠a **${betType.toUpperCase()}**!\nT·ªïng c∆∞·ª£c ${betType.toUpperCase()}: **${sameBetType.amount.toLocaleString()} Rin**`, 
                            flags: 64 
                        });
                    } else {
                        // C∆∞·ª£c c·ª≠a m·ªõi
                        existingBet.push({
                            type: betType,
                            amount: amount,
                            user: interaction.user
                        });
                        await interaction.reply({ 
                            content: `‚úÖ ƒê√£ c∆∞·ª£c th√™m **${betType.toUpperCase()}** v·ªõi **${amount.toLocaleString()} Rin**!\nB·∫°n ƒë√£ c∆∞·ª£c c·∫£ 2 c·ª≠a. Ti·ªÅn s·∫Ω ƒë∆∞·ª£c tr·ª´ khi nh√† c√°i b·∫Øt ƒë·∫ßu quay.`, 
                            flags: 64 
                        });
                    }
                } else {
                    // Ch·ªâ c√≥ 1 bet, chuy·ªÉn th√†nh array
                    if (existingBet.type === betType) {
                        // C√πng c·ª≠a, c·ªông d·ªìn
                        existingBet.amount += amount;
                        await interaction.reply({ 
                            content: `‚úÖ ƒê√£ c·ªông th√™m **${amount.toLocaleString()} Rin** v√†o c·ª≠a **${betType.toUpperCase()}**!\nT·ªïng c∆∞·ª£c ${betType.toUpperCase()}: **${existingBet.amount.toLocaleString()} Rin**`, 
                            flags: 64 
                        });
                    } else {
                        // Kh√°c c·ª≠a, t·∫°o array
                        game.bets.set(userId, [
                            existingBet,
                            {
                                type: betType,
                                amount: amount,
                                user: interaction.user
                            }
                        ]);
                        await interaction.reply({ 
                            content: `‚úÖ ƒê√£ c∆∞·ª£c th√™m **${betType.toUpperCase()}** v·ªõi **${amount.toLocaleString()} Rin**!\nB·∫°n ƒë√£ c∆∞·ª£c c·∫£ 2 c·ª≠a. Ti·ªÅn s·∫Ω ƒë∆∞·ª£c tr·ª´ khi nh√† c√°i b·∫Øt ƒë·∫ßu quay.`, 
                            flags: 64 
                        });
                    }
                }
            } else {
                // L·∫ßn ƒë·∫ßu c∆∞·ª£c
                game.bets.set(userId, {
                    type: betType,
                    amount: amount,
                    user: interaction.user
                });
                game.participants.add(userId);
                
                await interaction.reply({ 
                    content: `‚úÖ ƒê√£ c∆∞·ª£c **${betType.toUpperCase()}** v·ªõi **${amount.toLocaleString()} Rin**!\nTi·ªÅn s·∫Ω ƒë∆∞·ª£c tr·ª´ khi nh√† c√°i b·∫Øt ƒë·∫ßu quay.`, 
                    flags: 64 
                });
            }

            // C·∫≠p nh·∫≠t embed ch√≠nh
            await this.updateGameEmbed(interaction, game);
            return;
        }

        // X·ª≠ l√Ω button clicks
        if (interaction.customId === 'bet_tai' || interaction.customId === 'bet_xiu') {
            // Ki·ªÉm tra nh√† c√°i kh√¥ng ƒë∆∞·ª£c c∆∞·ª£c
            if (interaction.user.id === game.host.id) {
                return interaction.reply({ content: '‚ùå Nh√† c√°i kh√¥ng ƒë∆∞·ª£c ƒë·∫∑t c∆∞·ª£c!', flags: 64 });
            }

            if (game.started) {
                return interaction.reply({ content: '‚ùå Phi√™n ƒë√£ b·∫Øt ƒë·∫ßu, kh√¥ng th·ªÉ c∆∞·ª£c!', flags: 64 });
            }

            const betType = interaction.customId.split('_')[1]; // tai ho·∫∑c xiu
            const modal = new BetModal(betType);
            await interaction.showModal(modal);
            return;
        }

        if (interaction.customId === 'view_history') {
            const phanDo = createPhanDoDisplay(globalHistory);
            const cauDisplay = createCauDisplay(globalHistory, 30);
            
            const embed = new EmbedBuilder()
                .setTitle('üìä PHI√äN ƒê·ªí T√ÄI X·ªàU')
                .setDescription(`**üìà C·∫ßu g·∫ßn ƒë√¢y (30 phi√™n):**\n${cauDisplay.cauString}\n\n` +
                    `**üìã Phi√™n ƒë·ªì chi ti·∫øt:**\n${phanDo}\n\n` +
                    `**üìä Th·ªëng k√™:**\n` +
                    `‚Ä¢ T·ªïng phi√™n: ${globalHistory.length}\n` +
                    `‚Ä¢ C·∫ßu hi·ªán t·∫°i: ${cauDisplay.currentStreak ? `${cauDisplay.lastResult} ${cauDisplay.currentStreak} phi√™n` : 'Ch∆∞a c√≥'}`)
                .setColor('#0099FF')
                .setFooter({ text: 'D·ªØ li·ªáu c·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c' });

            await interaction.reply({ embeds: [embed], flags: 64 });
            return;
        }

        if (interaction.customId === 'start_taixiu') {
            try {
                if (interaction.user.id !== game.host.id) {
                    return interaction.reply({ content: '‚õî Ch·ªâ nh√† c√°i ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu!', flags: 64 });
                }

                if (game.started) {
                    return interaction.reply({ content: '‚ùå Phi√™n ƒë√£ b·∫Øt ƒë·∫ßu r·ªìi!', flags: 64 });
                }

                if (game.bets.size === 0) {
                    return interaction.reply({ content: '‚ùå Ch∆∞a c√≥ ai c∆∞·ª£c! C·∫ßn √≠t nh·∫•t 1 ng∆∞·ªùi ƒë·∫∑t c∆∞·ª£c.', flags: 64 });
                }

                // Defer update tr∆∞·ªõc khi th·ª±c hi·ªán logic ph·ª©c t·∫°p
                await interaction.deferUpdate();

                // B·∫Øt ƒë·∫ßu game
                game.started = true;

                // Tr·ª´ ti·ªÅn t·∫•t c·∫£ ng∆∞·ªùi c∆∞·ª£c - H·ªó tr·ª£ multi-bet
                for (const [userId, bet] of game.bets) {
                    if (Array.isArray(bet)) {
                        // Ng∆∞·ªùi n√†y c∆∞·ª£c nhi·ªÅu c·ª≠a
                        for (const singleBet of bet) {
                            await updateUserRin(userId, -singleBet.amount);
                        }
                    } else {
                        // C∆∞·ª£c ƒë∆°n
                        await updateUserRin(userId, -bet.amount);
                    }
                }

                await this.executeGame(interaction, game);
                return;
                
            } catch (error) {
                console.error('L·ªói start_taixiu button:', error);
                try {
                    if (!interaction.replied && !interaction.deferred) {
                        await interaction.reply({ content: '‚ùå C√≥ l·ªói khi b·∫Øt ƒë·∫ßu phi√™n!', flags: 64 });
                    } else {
                        await interaction.followUp({ content: '‚ùå C√≥ l·ªói khi b·∫Øt ƒë·∫ßu phi√™n!', flags: 64 });
                    }
                } catch (replyError) {
                    console.error('Kh√¥ng th·ªÉ reply start error:', replyError);
                }
                return;
            }
        }

        if (interaction.customId === 'cancel_taixiu') {
            if (interaction.user.id !== game.host.id && !interaction.member.permissions.has('Administrator')) {
                return interaction.reply({ content: '‚õî Ch·ªâ nh√† c√°i ho·∫∑c admin ƒë∆∞·ª£c h·ªßy!', flags: 64 });
            }

            let cancelMessage = '‚ùå Phi√™n T√†i X·ªâu ƒë√£ b·ªã h·ªßy!';

            // Ch·ªâ ho√†n ti·ªÅn n·∫øu ƒë√£ b·∫Øt ƒë·∫ßu (ƒë√£ tr·ª´ ti·ªÅn) - H·ªó tr·ª£ multi-bet
            if (game.started) {
                for (const [userId, bet] of game.bets) {
                    if (Array.isArray(bet)) {
                        // Ho√†n ti·ªÅn cho multi-bet
                        for (const singleBet of bet) {
                            await updateUserRin(userId, singleBet.amount);
                        }
                    } else {
                        // Ho√†n ti·ªÅn cho single bet
                        await updateUserRin(userId, bet.amount);
                    }
                }
                cancelMessage = '‚ùå Phi√™n T√†i X·ªâu ƒë√£ b·ªã h·ªßy! ƒê√£ ho√†n ti·ªÅn cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i.';
            } else {
                cancelMessage = '‚ùå Phi√™n T√†i X·ªâu ƒë√£ b·ªã h·ªßy! (Ch∆∞a tr·ª´ ti·ªÅn n√™n kh√¥ng c·∫ßn ho√†n)';
            }

            games.delete(channelId);

            const embed = new EmbedBuilder()
                .setTitle('‚ùå PHI√äN ƒê√É B·ªä H·ª¶Y')
                .setDescription(cancelMessage)
                .setColor('#FF0000');

            await interaction.reply({ embeds: [embed] });
        }
        
        } catch (error) {
            console.error('L·ªói taixiu handleInteraction:', error);
            if (!interaction.replied && !interaction.deferred) {
                try {
                    await interaction.reply({ content: '‚ùå C√≥ l·ªói x·∫£y ra!', flags: 64 });
                } catch (replyError) {
                    console.error('Kh√¥ng th·ªÉ reply interaction:', replyError);
                }
            }
        }
    },

    // Th·ª±c thi game - quay x√∫c x·∫Øc v√† t√≠nh k·∫øt qu·∫£
    async executeGame(interaction, game) {
        try {
            // HI·ªÜU ·ª®NG X√öC X·∫ÆC H·ªíI H·ªòP

            // B∆∞·ªõc 1: B·∫Øt ƒë·∫ßu quay
            const startEmbed = new EmbedBuilder()
                .setTitle(`üé≤ B·∫ÆTƒê·∫¶U QUAY - PHI√äN #${game.session.toString().padStart(4, '0')}`)
                .setDescription('üéØ **Chu·∫©n b·ªã quay x√∫c x·∫Øc...**\n\n' +
                              'üé≤ ‚ö™ ‚ö™ ‚ö™\n' +
                              '‚è≥ ƒêang l·∫Øc b√°t...')
                .setColor('#FF6B6B');

            await interaction.editReply({ embeds: [startEmbed], components: [] });
            await new Promise(resolve => setTimeout(resolve, 1000));

            // B∆∞·ªõc 2: ƒêang quay 
            const shakingEmbed = new EmbedBuilder()
                .setTitle(`üé≤ ƒêANG QUAY X√öC X·∫ÆC - PHI√äN #${game.session.toString().padStart(4, '0')}`)
                .setDescription('üéØ **X√∫c x·∫Øc ƒëang lƒÉn...**\n\n' +
                              'üé≤ ‚ö° ‚ö° ‚ö°\n' +
                              'üí´ ƒêang ch·ªù k·∫øt qu·∫£...')
                .setColor('#FFA500');

            await interaction.editReply({ embeds: [shakingEmbed] });
            await new Promise(resolve => setTimeout(resolve, 1500));

            // T√≠nh bias d·ª±a tr√™n t·ªïng ti·ªÅn c∆∞·ª£c v√† xu h∆∞·ªõng ng∆∞·ªùi ch∆°i - H·ªó tr·ª£ multi-bet
            let totalBetAmount = 0;
            let taiPlayers = 0;
            let xiuPlayers = 0;
            
            for (const [userId, bet] of game.bets) {
                if (Array.isArray(bet)) {
                    // Ng∆∞·ªùi n√†y c∆∞·ª£c nhi·ªÅu c·ª≠a
                    for (const singleBet of bet) {
                        totalBetAmount += singleBet.amount;
                        if (singleBet.type === 'tai') taiPlayers++;
                        else xiuPlayers++;
                    }
                } else {
                    // C∆∞·ª£c ƒë∆°n
                    totalBetAmount += bet.amount;
                    if (bet.type === 'tai') taiPlayers++;
                    else xiuPlayers++;
                }
            }

            // RIGGED DICE LOGIC - Bias v·ªÅ nh√† c√°i
            function weightedDiceRoll(weights = [1, 1, 1, 1, 1, 1]) {
                const totalWeight = weights.reduce((sum, w) => sum + w, 0);
                const random = Math.random() * totalWeight;
                let cumulative = 0;
                
                for (let i = 0; i < weights.length; i++) {
                    cumulative += weights[i];
                    if (random <= cumulative) {
                        return i + 1;
                    }
                }
                return 6; // fallback
            }

            // Ki·ªÉm tra rigged settings
            const riggedSettings = global.taixiuRiggedSettings || { enabled: true, riggedMode: 'smart' };
            
            // T√≠nh bias weights d·ª±a tr√™n t√¨nh hu·ªëng
            let biasWeights = [1, 1, 1, 1, 1, 1]; // Default fair
            
            if (riggedSettings.enabled) {
                if (riggedSettings.riggedMode === 'aggressive') {
                    // AGGRESSIVE MODE: Lu√¥n bias m·∫°nh v·ªÅ nh√† c√°i
                    if (taiPlayers > xiuPlayers) {
                        // Nhi·ªÅu ng∆∞·ªùi c∆∞·ª£c T√†i -> bias m·∫°nh v·ªÅ X·ªâu
                        biasWeights = [1.8, 1.6, 1.4, 0.7, 0.5, 0.3];
                    } else if (xiuPlayers > taiPlayers) {
                        // Nhi·ªÅu ng∆∞·ªùi c∆∞·ª£c X·ªâu -> bias m·∫°nh v·ªÅ T√†i  
                        biasWeights = [0.3, 0.5, 0.7, 1.4, 1.6, 1.8];
                    } else {
                        // C√¢n b·∫±ng -> bias v·ªÅ ph√≠a √≠t ng∆∞·ªùi h∆°n ho·∫∑c random
                        const randomBias = Math.random() > 0.5;
                        biasWeights = randomBias ? [1.6, 1.4, 1.2, 0.8, 0.6, 0.4] : [0.4, 0.6, 0.8, 1.2, 1.4, 1.6];
                    }
                } else {
                    // SMART MODE: Bias th√¥ng minh d·ª±a tr√™n t√¨nh hu·ªëng
                    
                    // Bias 1: N·∫øu ti·ªÅn c∆∞·ª£c l·ªõn (>5000), bias m·∫°nh v·ªÅ nh√† c√°i
                    if (totalBetAmount > 5000) {
                        if (taiPlayers > xiuPlayers) {
                            // Nhi·ªÅu ng∆∞·ªùi c∆∞·ª£c T√†i -> bias v·ªÅ X·ªâu (s·ªë th·∫•p)
                            biasWeights = [1.4, 1.3, 1.2, 0.9, 0.8, 0.7];
                        } else if (xiuPlayers > taiPlayers) {
                            // Nhi·ªÅu ng∆∞·ªùi c∆∞·ª£c X·ªâu -> bias v·ªÅ T√†i (s·ªë cao)
                            biasWeights = [0.7, 0.8, 0.9, 1.2, 1.3, 1.4];
                        }
                    }
                    // Bias 2: N·∫øu ti·ªÅn c∆∞·ª£c trung b√¨nh (1000-5000), bias nh·∫π
                    else if (totalBetAmount > 1000) {
                        if (taiPlayers > xiuPlayers) {
                            biasWeights = [1.2, 1.1, 1.1, 0.95, 0.9, 0.85];
                        } else if (xiuPlayers > taiPlayers) {
                            biasWeights = [0.85, 0.9, 0.95, 1.1, 1.1, 1.2];
                        }
                    }
                    
                    // Bias 3: N·∫øu c√≥ c·∫ßu d√†i (>3 phi√™n), break c·∫ßu ƒë·ªÉ nh√† c√°i th·∫Øng
                    const recentHistory = globalHistory.slice(-5);
                    if (recentHistory.length >= 3) {
                        const lastResult = recentHistory[recentHistory.length - 1]?.result;
                        let streak = 0;
                        for (let i = recentHistory.length - 1; i >= 0; i--) {
                            if (recentHistory[i].result === lastResult) streak++;
                            else break;
                        }
                        
                        if (streak >= 3) {
                            // C·∫ßu d√†i -> bias v·ªÅ k·∫øt qu·∫£ ng∆∞·ª£c l·∫°i
                            if (lastResult === 'tai') {
                                biasWeights = [1.5, 1.4, 1.3, 0.8, 0.7, 0.6]; // Force X·ªâu
                            } else {
                                biasWeights = [0.6, 0.7, 0.8, 1.3, 1.4, 1.5]; // Force T√†i
                            }
                        }
                    }
                }
            }

            // Quay 3 x√∫c x·∫Øc v·ªõi bias
            const dice1 = weightedDiceRoll(biasWeights);
            const dice2 = weightedDiceRoll(biasWeights);
            const dice3 = weightedDiceRoll(biasWeights);
            const total = dice1 + dice2 + dice3;
            const result = total >= 11 ? 'tai' : 'xiu';

            // HI·ªÜU ·ª®NG HI·ªÇN TH·ªä X√öC X·∫ÆC ƒê·∫∏P
            function getDiceImageUrl(number) {
                // S·ª≠ d·ª•ng static dice images ƒë·∫πp - GitHub hosted
                const diceUrls = {
                    1: 'https://raw.githubusercontent.com/microsoft/fluentui-emoji/main/assets/Game%20die/3D/game_die_3d.png',
                    2: 'https://raw.githubusercontent.com/microsoft/fluentui-emoji/main/assets/Game%20die/3D/game_die_3d.png', 
                    3: 'https://raw.githubusercontent.com/microsoft/fluentui-emoji/main/assets/Game%20die/3D/game_die_3d.png',
                    4: 'https://raw.githubusercontent.com/microsoft/fluentui-emoji/main/assets/Game%20die/3D/game_die_3d.png',
                    5: 'https://raw.githubusercontent.com/microsoft/fluentui-emoji/main/assets/Game%20die/3D/game_die_3d.png',
                    6: 'https://raw.githubusercontent.com/microsoft/fluentui-emoji/main/assets/Game%20die/3D/game_die_3d.png'
                };
                return diceUrls[number];
            }

            function getDiceEmoji(number) {
                // Emoji x√∫c x·∫Øc th·ª±c t·∫ø
                const diceEmojis = {
                    1: '‚öÄ',
                    2: '‚öÅ', 
                    3: '‚öÇ',
                    4: '‚öÉ',
                    5: '‚öÑ',
                    6: '‚öÖ'
                };
                return diceEmojis[number] || 'üé≤';
            }

            function getDiceVisual(number) {
                // T·∫°o visual dice v·ªõi art ASCII
                const diceVisuals = {
                    1: '‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  ‚óè  ‚îÇ\n‚îÇ     ‚îÇ\n‚îÇ     ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò',
                    2: '‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ ‚óè   ‚îÇ\n‚îÇ     ‚îÇ\n‚îÇ   ‚óè ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò',
                    3: '‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ ‚óè   ‚îÇ\n‚îÇ  ‚óè  ‚îÇ\n‚îÇ   ‚óè ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò',
                    4: '‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ ‚óè ‚óè ‚îÇ\n‚îÇ     ‚îÇ\n‚îÇ ‚óè ‚óè ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò',
                    5: '‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ ‚óè ‚óè ‚îÇ\n‚îÇ  ‚óè  ‚îÇ\n‚îÇ ‚óè ‚óè ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò',
                    6: '‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ ‚óè ‚óè ‚îÇ\n‚îÇ ‚óè ‚óè ‚îÇ\n‚îÇ ‚óè ‚óè ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò'
                };
                return diceVisuals[number] || 'üé≤';
            }

            // B∆∞·ªõc 3: Hi·ªÉn th·ªã t·ª´ng x√∫c x·∫Øc m·ªôt c√°ch h·ªìi h·ªôp
            const dice1Url = getDiceImageUrl(dice1);
            const dice2Url = getDiceImageUrl(dice2);
            const dice3Url = getDiceImageUrl(dice3);

            // Hi·ªÉn th·ªã x√∫c x·∫Øc ƒë·∫ßu ti√™n
            const reveal1Embed = new EmbedBuilder()
                .setTitle(`üé≤ X√öC X·∫ÆC TH·ª® NH·∫§T - PHI√äN #${game.session.toString().padStart(4, '0')}`)
                .setDescription(`üéØ **X√∫c x·∫Øc ƒë·∫ßu ti√™n ƒë√£ d·ª´ng l·∫°i:**\n\n` +
                              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
                              `üé≤ **X√öC X·∫ÆC 1:**\n` +
                              `${getDiceEmoji(dice1)} **S·ªê ${dice1}**\n` +
                              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
                              `‚ö™ **X√∫c x·∫Øc 2:** ƒêang quay...\n` +
                              `‚ö™ **X√∫c x·∫Øc 3:** ƒêang quay...\n\n` +
                              `‚è≥ **C√≤n 2 vi√™n x√∫c x·∫Øc n·ªØa!**`)
                .addFields({
                    name: 'üéØ K·∫øt qu·∫£ hi·ªán t·∫°i',
                    value: `${getDiceEmoji(dice1)} **${dice1}** + ? + ? = ?`,
                    inline: false
                })
                .setColor('#4ECDC4')
                .setThumbnail('https://cdn.discordapp.com/emojis/üé≤.png');
            
            await interaction.editReply({ embeds: [reveal1Embed] });
            await new Promise(resolve => setTimeout(resolve, 1500));

            // Hi·ªÉn th·ªã x√∫c x·∫Øc th·ª© hai  
            const reveal2Embed = new EmbedBuilder()
                .setTitle(`üé≤ X√öC X·∫ÆC TH·ª® HAI - PHI√äN #${game.session.toString().padStart(4, '0')}`)
                .setDescription(`üéØ **X√∫c x·∫Øc th·ª© hai ƒë√£ d·ª´ng l·∫°i:**\n\n` +
                              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
                              `üé≤ **X√öC X·∫ÆC 1:** ${getDiceEmoji(dice1)} **${dice1}**\n` +
                              `üé≤ **X√öC X·∫ÆC 2:** ${getDiceEmoji(dice2)} **${dice2}**\n` +
                              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
                              `‚ö™ **X√∫c x·∫Øc 3:** ƒêang quay...\n\n` +
                              `‚è≥ **C√≤n 1 vi√™n x√∫c x·∫Øc quy·∫øt ƒë·ªãnh!**`)
                .addFields({
                    name: 'üéØ K·∫øt qu·∫£ hi·ªán t·∫°i',
                    value: `${getDiceEmoji(dice1)} **${dice1}** + ${getDiceEmoji(dice2)} **${dice2}** + ? = **${dice1 + dice2} + ?**`,
                    inline: false
                })
                .setColor('#45B7D1')
                .setThumbnail('https://cdn.discordapp.com/emojis/üé≤.png');
            
            await interaction.editReply({ embeds: [reveal2Embed] });
            await new Promise(resolve => setTimeout(resolve, 1800));

            // Hi·ªÉn th·ªã x√∫c x·∫Øc cu·ªëi v√† k·∫øt qu·∫£ drama
            const suspenseEmbed = new EmbedBuilder()
                .setTitle(`üé≤ X√öC X·∫ÆC CU·ªêI C√ôNG - PHI√äN #${game.session.toString().padStart(4, '0')}`)
                .setDescription(`üéØ **X√∫c x·∫Øc cu·ªëi c√πng ƒë√£ d·ª´ng l·∫°i:**\n\n` +
                              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
                              `üé≤ **X√öC X·∫ÆC 1:** ${getDiceEmoji(dice1)} **${dice1}**\n` +
                              `üé≤ **X√öC X·∫ÆC 2:** ${getDiceEmoji(dice2)} **${dice2}**\n` +
                              `üé≤ **X√öC X·∫ÆC 3:** ${getDiceEmoji(dice3)} **${dice3}**\n` +
                              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
                              `üî• **T·ªîNG C·ªòNG: ${total} ƒêI·ªÇM**\n\n` +
                              `‚è≥ **ƒêang t√≠nh to√°n k·∫øt qu·∫£...**`)
                .addFields({
                    name: 'üéØ K·∫øt qu·∫£ cu·ªëi c√πng',
                    value: `${getDiceEmoji(dice1)} **${dice1}** + ${getDiceEmoji(dice2)} **${dice2}** + ${getDiceEmoji(dice3)} **${dice3}** = **${total} ƒêI·ªÇM**`,
                    inline: false
                })
                .setColor('#9B59B6')
                .setThumbnail('https://cdn.discordapp.com/emojis/üé≤.png');
            
            await interaction.editReply({ embeds: [suspenseEmbed] });
            await new Promise(resolve => setTimeout(resolve, 2000));

            // Log rigged info for admin (optional)
            if (riggedSettings.logRigged && riggedSettings.enabled) {
                const biasDescription = riggedSettings.riggedMode === 'aggressive' ? 'AGGRESSIVE' : 'SMART';
                console.log(`üé≤ [RIGGED-${biasDescription}] Session ${game.session}: ${dice1}-${dice2}-${dice3}=${total} (${result.toUpperCase()}) | Bet: ${totalBetAmount} | T:${taiPlayers} X:${xiuPlayers} | Bias: [${biasWeights.map(w => w.toFixed(1)).join(',')}]`);
            } else if (!riggedSettings.enabled) {
                console.log(`üé≤ [FAIR] Session ${game.session}: ${dice1}-${dice2}-${dice3}=${total} (${result.toUpperCase()}) | Pure Random`);
            }

            // L∆∞u v√†o l·ªãch s·ª≠
            const historyEntry = {
                session: game.session,
                dice: [dice1, dice2, dice3],
                total: total,
                result: result,
                timestamp: new Date()
            };

            globalHistory.push(historyEntry);
            if (globalHistory.length > MAX_HISTORY) {
                globalHistory.shift(); // X√≥a phi√™n c≈© nh·∫•t
            }

            // L∆∞u v√†o file ƒë·ªÉ persistent
            try {
                const fs = require('fs');
                const path = require('path');
                const dataDir = './data';
                
                if (!fs.existsSync(dataDir)) {
                    fs.mkdirSync(dataDir, { recursive: true });
                }
                
                fs.writeFileSync('./data/taixiu_history.json', JSON.stringify(globalHistory, null, 2));
            } catch (error) {
                console.error('L·ªói l∆∞u history t√†i x·ªâu:', error);
            }

            // T√≠nh k·∫øt qu·∫£ cho t·ª´ng ng∆∞·ªùi ch∆°i - H·ªó tr·ª£ multi-bet
            let totalHostWinnings = 0;
            let resultText = '';

            for (const [userId, bet] of game.bets) {
                if (Array.isArray(bet)) {
                    // Ng∆∞·ªùi n√†y c∆∞·ª£c nhi·ªÅu c·ª≠a
                    let userTotalWin = 0;
                    let userTotalLoss = 0;
                    let userResults = [];
                    
                    for (const singleBet of bet) {
                        const isWin = singleBet.type === result;
                        
                        if (isWin) {
                            // Th·∫Øng: Ho√†n ti·ªÅn + ti·ªÅn th∆∞·ªüng (1:1)
                            const winAmount = singleBet.amount * 2;
                            await updateUserRin(userId, winAmount);
                            totalHostWinnings -= singleBet.amount; // Nh√† c√°i m·∫•t ti·ªÅn
                            userTotalWin += singleBet.amount;
                            userResults.push(`‚úÖ ${singleBet.type.toUpperCase()}: +${singleBet.amount.toLocaleString()}`);
                        } else {
                            // Thua: Nh√† c√°i ƒÉn ti·ªÅn
                            totalHostWinnings += singleBet.amount;
                            userTotalLoss += singleBet.amount;
                            userResults.push(`‚ùå ${singleBet.type.toUpperCase()}: -${singleBet.amount.toLocaleString()}`);
                        }
                    }
                    
                    const netResult = userTotalWin - userTotalLoss;
                    const netIcon = netResult >= 0 ? '‚úÖ' : '‚ùå';
                    const netSign = netResult >= 0 ? '+' : '';
                    
                    resultText += `${netIcon} **${bet[0].user.displayName}**: ${userResults.join(', ')} | **Net: ${netSign}${netResult.toLocaleString()} Rin**\n`;
                } else {
                    // C∆∞·ª£c ƒë∆°n
                    const user = bet.user;
                    const isWin = bet.type === result;
                    
                    if (isWin) {
                        // Th·∫Øng: Ho√†n ti·ªÅn + ti·ªÅn th∆∞·ªüng (1:1)
                        const winAmount = bet.amount * 2;
                        await updateUserRin(userId, winAmount);
                        totalHostWinnings -= bet.amount; // Nh√† c√°i m·∫•t ti·ªÅn
                        resultText += `‚úÖ **${user.displayName}**: Th·∫Øng ${bet.type.toUpperCase()} +${bet.amount.toLocaleString()} Rin\n`;
                    } else {
                        // Thua: Nh√† c√°i ƒÉn ti·ªÅn
                        totalHostWinnings += bet.amount;
                        resultText += `‚ùå **${user.displayName}**: Thua ${bet.type.toUpperCase()} -${bet.amount.toLocaleString()} Rin\n`;
                    }
                }
            }

            // C·∫≠p nh·∫≠t ti·ªÅn cho nh√† c√°i
            if (totalHostWinnings !== 0) {
                await updateUserRin(game.host.id, totalHostWinnings);
            }

            // HI·ªÜU ·ª®NG K·∫æT QU·∫¢ DRAMATIC
            
            // B∆∞·ªõc 4: C√¥ng b·ªë k·∫øt qu·∫£ v·ªõi drama
            const resultColor = result === 'tai' ? '#FF4444' : '#4444FF';
            const resultIcon = result === 'tai' ? 'üî∫' : 'üîª';
            const resultText_drama = result === 'tai' ? 'T√ÄI' : 'X·ªàU';

            const dramaBuildupEmbed = new EmbedBuilder()
                .setTitle(`üéØ C√îNG B·ªê K·∫æT QU·∫¢ - PHI√äN #${game.session.toString().padStart(4, '0')}`)
                .setDescription(`üé≤ **BA X√öC X·∫ÆC ƒê√É HO√ÄN TH√ÄNH:**\n\n` +
                              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
                              `üé≤ **X√öC X·∫ÆC 1:** ${getDiceEmoji(dice1)} **${dice1}**\n` +
                              `üé≤ **X√öC X·∫ÆC 2:** ${getDiceEmoji(dice2)} **${dice2}**\n` +
                              `üé≤ **X√öC X·∫ÆC 3:** ${getDiceEmoji(dice3)} **${dice3}**\n` +
                              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
                              `üßÆ **T·ªîNG C·ªòNG: ${total} ƒêI·ªÇM**\n\n` +
                              `${total >= 11 ? 'üî∫' : 'üîª'} **K·∫æT QU·∫¢: ${resultText_drama}**\n\n` +
                              `üí• ${result === 'tai' ? 'üî• T√ÄI TH·∫ÆNG! üî•' : '‚ùÑÔ∏è X·ªàU TH·∫ÆNG! ‚ùÑÔ∏è'}`)
                .addFields(
                    { 
                        name: 'üéØ Chi ti·∫øt t√≠nh ƒëi·ªÉm', 
                        value: `${getDiceEmoji(dice1)} **${dice1}** + ${getDiceEmoji(dice2)} **${dice2}** + ${getDiceEmoji(dice3)} **${dice3}** = **${total} ƒêI·ªÇM**`, 
                        inline: false 
                    }
                )
                .setColor(resultColor)
                .setThumbnail('https://cdn.discordapp.com/emojis/üé≤.png');
            
            await interaction.editReply({ embeds: [dramaBuildupEmbed] });
            await new Promise(resolve => setTimeout(resolve, 3000));

            // B∆∞·ªõc 5: Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt
            const finalResultEmbed = new EmbedBuilder()
                .setTitle(`üèÜ B·∫¢NG K·∫æT QU·∫¢ PHI√äN #${game.session.toString().padStart(4, '0')}`)
                .setDescription(
                    `üé≤ **CHI TI·∫æT 3 X√öC X·∫ÆC:**\n\n` +
                    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
                    `üé≤ **X√öC X·∫ÆC 1:** ${getDiceEmoji(dice1)} **${dice1}**\n` +
                    `üé≤ **X√öC X·∫ÆC 2:** ${getDiceEmoji(dice2)} **${dice2}**\n` +
                    `üé≤ **X√öC X·∫ÆC 3:** ${getDiceEmoji(dice3)} **${dice3}**\n` +
                    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
                    `üßÆ **T·ªîNG ƒêI·ªÇM:** ${total} ƒëi·ªÉm\n` +
                    `üèÜ **K·∫æT QU·∫¢:** ${resultIcon} **${resultText_drama}**\n\n` +
                    `‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n` +
                    `‚îÉ            **üìä CHI TI·∫æT NG∆Ø·ªúI CH∆†I**           ‚îÉ\n` +
                    `‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n` +
                    `${resultText}\n` +
                    `üíé **Nh√† c√°i ${game.host.displayName}:** ${totalHostWinnings >= 0 ? `+${totalHostWinnings.toLocaleString()}` : totalHostWinnings.toLocaleString()} Rin\n\n` +
                    `üéØ **C·∫ßu m·ªõi:** \`${createCauDisplay(globalHistory).cauString}\``
                )
                .addFields(
                    { 
                        name: 'üé≤ K·∫øt qu·∫£ chi ti·∫øt', 
                        value: `${getDiceEmoji(dice1)} **${dice1}** + ${getDiceEmoji(dice2)} **${dice2}** + ${getDiceEmoji(dice3)} **${dice3}** = **${total}**`, 
                        inline: false 
                    },
                    {
                        name: 'üéØ K·∫øt lu·∫≠n',
                        value: `${result === 'tai' ? 'üî• **T√ÄI TH·∫ÆNG**' : '‚ùÑÔ∏è **X·ªàU TH·∫ÆNG**'} (${total >= 11 ? '‚â•11' : '‚â§10'} ƒëi·ªÉm)`,
                        inline: false
                    }
                )
                .setColor(resultColor)
                .setThumbnail('https://cdn.discordapp.com/emojis/üé≤.png')
                .setFooter({ 
                    text: `Phi√™n ho√†n th√†nh | Ch∆°i ti·∫øp v·ªõi ,taixiu`, 
                    iconURL: game.host.displayAvatarURL() 
                })
                .setTimestamp();

            // Th√™m n√∫t b·∫Øt ƒë·∫ßu nhanh
            const quickStartButton = new ButtonBuilder()
                .setCustomId('taixiu_quick_start')
                .setLabel('üé≤ B·∫Øt ƒë·∫ßu phi√™n m·ªõi')
                .setStyle(ButtonStyle.Success)
                .setEmoji('üöÄ');

            const quickStartRow = new ActionRowBuilder()
                .addComponents(quickStartButton);

            await interaction.editReply({ 
                embeds: [finalResultEmbed], 
                components: [quickStartRow] 
            });

            // X√≥a game
            games.delete(interaction.channel.id);
            console.log(`üé≤ [TAIXIU] Session #${game.session} completed and cleaned up`);

        } catch (error) {
            console.error('L·ªói execute game t√†i x·ªâu:', error);
            await interaction.editReply({ 
                content: '‚ùå C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán game!', 
                embeds: [], 
                components: [] 
            });
        }
    },

    // B·∫Øt ƒë·∫ßu countdown cho phi√™n m·ªõi
    async startCountdown(interaction, game) {
        try {
            const countdownStart = Date.now();
            
            // Countdown timer
            const countdownInterval = setInterval(async () => {
                try {
                    const elapsed = Date.now() - countdownStart;
                    const timeLeft = Math.max(0, Math.ceil((BETTING_TIME - elapsed) / 1000));
                    
                    if (timeLeft <= 0 || game.started) {
                        clearInterval(countdownInterval);
                        
                        if (!game.started) {
                            // H·∫øt th·ªùi gian c∆∞·ª£c, t·ª± ƒë·ªông b·∫Øt ƒë·∫ßu n·∫øu c√≥ ng∆∞·ªùi c∆∞·ª£c
                            if (game.bets.size > 0) {
                                game.started = true;
                                
                                // Tr·ª´ ti·ªÅn ng∆∞·ªùi c∆∞·ª£c
                                for (const [userId, bet] of game.bets) {
                                    if (Array.isArray(bet)) {
                                        for (const singleBet of bet) {
                                            await updateUserRin(userId, -singleBet.amount);
                                        }
                                    } else {
                                        await updateUserRin(userId, -bet.amount);
                                    }
                                }
                                
                                await this.executeGame(interaction, game);
                            } else {
                                // Kh√¥ng c√≥ ai c∆∞·ª£c, h·ªßy phi√™n
                                games.delete(interaction.channel.id);
                                
                                const timeoutEmbed = new EmbedBuilder()
                                    .setTitle('‚è∞ PHI√äN ƒê√É H·∫æT TH·ªúI GIAN')
                                    .setDescription('‚ùå Kh√¥ng c√≥ ai ƒë·∫∑t c∆∞·ª£c, phi√™n ƒë√£ b·ªã h·ªßy!')
                                    .setColor('#FF0000');
                                
                                try {
                                    await interaction.editReply({ 
                                        embeds: [timeoutEmbed], 
                                        components: [] 
                                    });
                                } catch (editError) {
                                    console.error('Kh√¥ng th·ªÉ edit reply timeout:', editError);
                                    // Fallback: g·ª≠i message m·ªõi
                                    await interaction.followUp({ 
                                        embeds: [timeoutEmbed], 
                                        components: [] 
                                    });
                                }
                            }
                        }
                        return;
                    }
                    
                    // C·∫≠p nh·∫≠t game embed v·ªõi th·ªùi gian (ch·ªâ n·∫øu interaction v·∫´n c√≤n h·ª£p l·ªá)
                    try {
                        await this.updateGameEmbed(interaction, game);
                    } catch (updateError) {
                        console.log('‚ö†Ô∏è [TAIXIU] Interaction expired, stopping countdown updates');
                        clearInterval(countdownInterval);
                    }
                    
                } catch (error) {
                    console.error('L·ªói countdown t√†i x·ªâu:', error);
                    clearInterval(countdownInterval);
                }
            }, 5000); // C·∫≠p nh·∫≠t m·ªói 5 gi√¢y
            
        } catch (error) {
            console.error('L·ªói startCountdown t√†i x·ªâu:', error);
        }
    }
}; 