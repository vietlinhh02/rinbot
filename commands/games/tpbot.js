const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const { getUserRin, updateUserRin } = require('../../utils/database');
const { BOARD, CHANCE_CARDS, COMMUNITY_CHEST_CARDS } = require('../../utils/constants');

// Game rooms storage for bot games
const botRooms = new Map();

// Timeout settings
const GAME_TIMEOUT = 10 * 60 * 1000; // 10 ph√∫t timeout
const PLAYER_TURN_TIMEOUT = 45 * 1000; // 45 gi√¢y cho m·ªói l∆∞·ª£t

// Bot AI configuration
const BOT_PERSONALITY = {
    name: "üí∞ RinBot Tycoon",
    avatar: "ü§ñ",
    strategy: "aggressive", // conservative, balanced, aggressive
    initialMoney: 1500,
    buyThreshold: 0.7, // Will buy if money > threshold * price
    riskFactor: 0.8 // Higher = more aggressive
};

// Utility functions
function rollDice() {
    return Math.floor(Math.random() * 6) + 1;
}

function getRandomCard(cards) {
    return cards[Math.floor(Math.random() * cards.length)];
}

// Bot AI decision making
function botShouldBuyProperty(bot, property) {
    const { money } = bot;
    const { price } = property;
    
    // Basic affordability check
    if (money < price * BOT_PERSONALITY.buyThreshold) return false;
    
    // Strategy-based decisions
    switch (BOT_PERSONALITY.strategy) {
        case 'conservative':
            return money > price * 2 && Math.random() < 0.4;
        case 'balanced':
            return money > price * 1.5 && Math.random() < 0.6;
        case 'aggressive':
            return money > price && Math.random() < 0.8;
        default:
            return Math.random() < 0.5;
    }
}

// Create game board status
function createBoardStatus(channelId) {
    const room = botRooms.get(channelId);
    if (!room) return null;

    let status = 'üé≤ **C·ªú T·ª∂ PH√ö BOT - B·∫¢NG TR·∫†NG TH√ÅI**\n\n';
    
    // Bot info first
    const botPosition = BOARD[room.bot.position];
    status += `ü§ñ **${BOT_PERSONALITY.name}**\n`;
    status += `üí∞ ${room.bot.money} Nene | üìç ${botPosition.name}\n\n`;
    
    // Players info
    for (const [userId, player] of Object.entries(room.players)) {
        const position = BOARD[player.position];
        status += `üë§ **${player.user.displayName}**\n`;
        status += `üí∞ ${player.money} Nene | üìç ${position.name}\n\n`;
    }

    return status;
}

// Handle property interaction for bot
async function handleBotProperty(channel, channelId) {
    const room = botRooms.get(channelId);
    const bot = room.bot;
    const position = BOARD[bot.position];

    await new Promise(resolve => setTimeout(resolve, 1500)); // Bot thinking time

    if (position.type === 'land') {
        const owner = room.properties[bot.position];
        
        if (!owner) {
            // Bot decides whether to buy
            if (botShouldBuyProperty(bot, position)) {
                bot.money -= position.price;
                room.properties[bot.position] = 'bot';

                const embed = new EmbedBuilder()
                    .setTitle('ü§ñ Bot mua ƒë·∫•t!')
                    .setDescription(`${BOT_PERSONALITY.name} ƒë√£ mua **${position.name}** v·ªõi gi√° ${position.price} Nene!`)
                    .setColor('#00FF00');

                await channel.send({ embeds: [embed] });
            } else {
                const embed = new EmbedBuilder()
                    .setTitle('ü§ñ Bot b·ªè qua')
                    .setDescription(`${BOT_PERSONALITY.name} quy·∫øt ƒë·ªãnh kh√¥ng mua **${position.name}**.`)
                    .setColor('#FFA500');

                await channel.send({ embeds: [embed] });
            }
        } else if (owner !== 'bot') {
            // Bot pays rent to player
            const rent = position.rent[0];
            bot.money -= rent;
            
            if (owner in room.players) {
                room.players[owner].money += rent;
                
                const embed = new EmbedBuilder()
                    .setTitle('üí∏ Bot tr·∫£ ti·ªÅn thu√™!')
                    .setDescription(`${BOT_PERSONALITY.name} tr·∫£ ${rent} Nene cho ${room.players[owner].user.displayName}`)
                    .setColor('#FF4500');

                await channel.send({ embeds: [embed] });
            }
        }
    } else if (position.type === 'chance') {
        const card = getRandomCard(CHANCE_CARDS);
        await handleBotChanceCard(channel, card, room);
    } else if (position.type === 'community_chest') {
        const card = getRandomCard(COMMUNITY_CHEST_CARDS);
        await handleBotCommunityCard(channel, card, room);
    }
}

// Handle bot chance card
async function handleBotChanceCard(channel, card, room) {
    const bot = room.bot;
    const [description, effect] = card;

    const embed = new EmbedBuilder()
        .setTitle('üé¥ Bot r√∫t Th·∫ª H√™n Xui!')
        .setDescription(`${BOT_PERSONALITY.name}: ${description}`)
        .setColor('#FF69B4');

    if (typeof effect === 'number') {
        bot.money += effect;
        embed.addFields({ name: 'K·∫øt qu·∫£', value: `${effect > 0 ? '+' : ''}${effect} Nene`, inline: false });
    } else if (effect === 'jail') {
        bot.position = 7; // Jail position
        bot.inJail = true;
        embed.addFields({ name: 'K·∫øt qu·∫£', value: 'Bot v√†o t√π!', inline: false });
    } else if (effect === 'extra_turn') {
        room.extraTurn = true;
        embed.addFields({ name: 'K·∫øt qu·∫£', value: 'Bot ƒë∆∞·ª£c l∆∞·ª£t ƒëi n·ªØa!', inline: false });
    }

    await channel.send({ embeds: [embed] });
}

// Handle bot community card
async function handleBotCommunityCard(channel, card, room) {
    const bot = room.bot;
    const [description, effect] = card;

    const embed = new EmbedBuilder()
        .setTitle('üéÅ Bot r√∫t √î V·∫≠n M·ªánh!')
        .setDescription(`${BOT_PERSONALITY.name}: ${description}`)
        .setColor('#00FF00');

    if (typeof effect === 'number') {
        bot.money += effect;
        embed.addFields({ name: 'K·∫øt qu·∫£', value: `+${effect} Nene`, inline: false });
    }

    await channel.send({ embeds: [embed] });
}

// Bot turn logic
async function playBotTurn(channel, channelId) {
    const room = botRooms.get(channelId);
    
    const embed = new EmbedBuilder()
        .setTitle('ü§ñ L∆∞·ª£t c·ªßa Bot!')
        .setDescription(`${BOT_PERSONALITY.name} ƒëang suy nghƒ©...`)
        .setColor('#0099FF');

    await channel.send({ embeds: [embed] });
    
    // Bot thinking delay
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Bot rolls dice
    const dice1 = rollDice();
    const dice2 = rollDice();
    const total = dice1 + dice2;

    const bot = room.bot;
    bot.position = (bot.position + total) % BOARD.length;

    // Pass start bonus
    if (bot.position + total >= BOARD.length) {
        bot.money += 200;
    }

    const rollEmbed = new EmbedBuilder()
        .setTitle('üé≤ Bot tung x√∫c x·∫Øc!')
        .setDescription(`${BOT_PERSONALITY.name} tung ƒë∆∞·ª£c: ${dice1} + ${dice2} = ${total}`)
        .addFields({ name: 'V·ªã tr√≠ m·ªõi', value: BOARD[bot.position].name, inline: false })
        .setColor('#0099FF');

    await channel.send({ embeds: [rollEmbed] });

    // Handle bot's current position
    await handleBotProperty(channel, channelId);
    
    // Continue to next turn
    setTimeout(() => nextTurn(channel, channelId), 3000);
}

// Handle property interaction for players
async function handleProperty(channel, channelId, playerId) {
    const room = botRooms.get(channelId);
    const player = room.players[playerId];
    const position = BOARD[player.position];

    if (position.type === 'land') {
        const owner = room.properties[player.position];
        
        if (!owner) {
            // Property is available for purchase
            if (player.money >= position.price) {
                const embed = new EmbedBuilder()
                    .setTitle('üè† Mua ƒë·∫•t?')
                    .setDescription(`**${position.name}**\nGi√°: ${position.price} Nene\nTi·ªÅn c·ªßa b·∫°n: ${player.money} Nene`)
                    .setColor('#0099FF');

                const buyButton = new ButtonBuilder()
                    .setCustomId(`tpbot_buy_property_${playerId}`)
                    .setLabel('üí∞ Mua')
                    .setStyle(ButtonStyle.Success);

                const skipButton = new ButtonBuilder()
                    .setCustomId(`tpbot_skip_property_${playerId}`)
                    .setLabel('‚ùå B·ªè qua')
                    .setStyle(ButtonStyle.Secondary);

                const row = new ActionRowBuilder().addComponents(buyButton, skipButton);
                await channel.send({ embeds: [embed], components: [row] });
                return true; // Wait for user action
            }
        } else if (owner === 'bot') {
            // Pay rent to bot
            const rent = position.rent[0];
            player.money -= rent;
            room.bot.money += rent;

            const embed = new EmbedBuilder()
                .setTitle('üí∏ Tr·∫£ ti·ªÅn thu√™ cho Bot!')
                .setDescription(`${player.user.displayName} tr·∫£ ${rent} Nene cho ${BOT_PERSONALITY.name}`)
                .setColor('#FF4500');

            await channel.send({ embeds: [embed] });
        } else if (owner !== playerId) {
            // Pay rent to another player
            const rent = position.rent[0];
            player.money -= rent;
            room.players[owner].money += rent;

            const embed = new EmbedBuilder()
                .setTitle('üí∏ Tr·∫£ ti·ªÅn thu√™!')
                .setDescription(`${player.user.displayName} tr·∫£ ${rent} Nene cho ${room.players[owner].user.displayName}`)
                .setColor('#FF4500');

            await channel.send({ embeds: [embed] });
        }
    } else if (position.type === 'chance') {
        const card = getRandomCard(CHANCE_CARDS);
        // Handle player chance card (similar to bot)
        const [description, effect] = card;
        
        const embed = new EmbedBuilder()
            .setTitle('üé¥ Th·∫ª H√™n Xui!')
            .setDescription(description)
            .setColor('#FF69B4');

        if (typeof effect === 'number') {
            player.money += effect;
            embed.addFields({ name: 'K·∫øt qu·∫£', value: `${effect > 0 ? '+' : ''}${effect} Nene`, inline: false });
        }

        await channel.send({ embeds: [embed] });
    } else if (position.type === 'community_chest') {
        const card = getRandomCard(COMMUNITY_CHEST_CARDS);
        // Handle player community card
        const [description, effect] = card;
        
        const embed = new EmbedBuilder()
            .setTitle('üéÅ √î V·∫≠n M·ªánh!')
            .setDescription(description)
            .setColor('#00FF00');

        if (typeof effect === 'number') {
            player.money += effect;
            embed.addFields({ name: 'K·∫øt qu·∫£', value: `+${effect} Nene`, inline: false });
        }

        await channel.send({ embeds: [embed] });
    }

    return false; // Continue turn
}

// Next turn (including bot)
async function nextTurn(channel, channelId) {
    const room = botRooms.get(channelId);
    if (!room) return;

    if (!room.extraTurn) {
        room.currentTurn = (room.currentTurn + 1) % room.turnOrder.length;
    }
    room.extraTurn = false;

    const currentTurnId = room.turnOrder[room.currentTurn];

    // Check if it's bot's turn
    if (currentTurnId === 'bot') {
        await playBotTurn(channel, channelId);
        return;
    }

    const currentPlayer = room.players[currentTurnId];

    // Check if game should end
    if (currentPlayer.money <= 0 || room.bot.money <= 0) {
        await endGame(channel, channelId);
        return;
    }

    const embed = new EmbedBuilder()
        .setTitle('üéØ L∆∞·ª£t ti·∫øp theo!')
        .setDescription(`L∆∞·ª£t c·ªßa ${currentPlayer.user.displayName}!\nB·∫•m n√∫t ƒë·ªÉ tung x√∫c x·∫Øc!\n‚è∞ B·∫°n c√≥ 45 gi√¢y ƒë·ªÉ h√†nh ƒë·ªông.`)
        .setColor('#0099FF');

    const rollButton = new ButtonBuilder()
        .setCustomId(`tpbot_roll_dice_${currentTurnId}`)
        .setLabel('üé≤ Tung x√∫c x·∫Øc')
        .setStyle(ButtonStyle.Primary);

    const row = new ActionRowBuilder().addComponents(rollButton);
    await channel.send({ embeds: [embed], components: [row] });

    // Set timeout cho l∆∞·ª£t n√†y
    room.turnTimeout = setTimeout(async () => {
        await timeoutCurrentPlayer(channel, channelId);
    }, PLAYER_TURN_TIMEOUT);

    // Update status
    const statusEmbed = new EmbedBuilder()
        .setDescription(createBoardStatus(channelId))
        .setColor('#FFD700');
    
    if (room.statusMessage) {
        await room.statusMessage.edit({ embeds: [statusEmbed] });
    }
}

// End game with bot
async function endGame(channel, channelId) {
    const room = botRooms.get(channelId);
    if (!room) return;

    // Find winner (player with most money including bot)
    let winner = null;
    let maxMoney = -1;

    // Check bot
    if (room.bot.money > maxMoney) {
        maxMoney = room.bot.money;
        winner = { type: 'bot', ...room.bot };
    }

    // Check players
    for (const [userId, player] of Object.entries(room.players)) {
        if (player.money > maxMoney) {
            maxMoney = player.money;
            winner = { type: 'player', ...player };
        }
    }

    const embed = new EmbedBuilder()
        .setTitle('üèÜ K·∫æT TH√öC C·ªú T·ª∂ PH√ö BOT!')
        .setColor('#FFD700');

    if (winner.type === 'bot') {
        embed.setDescription(`ü§ñ **${BOT_PERSONALITY.name}** chi·∫øn th·∫Øng v·ªõi **${maxMoney} Nene**!\n\nBot ƒë√£ ch·ª©ng minh AI th√¥ng minh h∆°n con ng∆∞·ªùi! üß†`);
    } else {
        embed.setDescription(`üéâ **${winner.user.displayName}** chi·∫øn th·∫Øng v·ªõi **${maxMoney} Nene**!\n\nB·∫°n ƒë√£ ƒë√°nh b·∫°i ƒë∆∞·ª£c Bot AI! üèÜ`);
        // Give reward to human winner
        await updateUserRin(winner.user.id, 750); // Higher reward for beating bot
        embed.addFields({ name: 'Ph·∫ßn th∆∞·ªüng', value: '+750 Rin cho ng∆∞·ªùi th·∫Øng Bot!', inline: false });
    }

    // Final rankings including bot
    const allCompetitors = [
        { name: BOT_PERSONALITY.name, money: room.bot.money, type: 'bot' },
        ...Object.values(room.players).map(p => ({ name: p.user.displayName, money: p.money, type: 'player' }))
    ];

    const rankings = allCompetitors
        .sort((a, b) => b.money - a.money)
        .map((comp, index) => {
            const icon = comp.type === 'bot' ? 'ü§ñ' : 'üë§';
            return `${index + 1}. ${icon} ${comp.name}: ${comp.money} Nene`;
        })
        .join('\n');

    embed.addFields({ name: 'B·∫£ng x·∫øp h·∫°ng', value: rankings, inline: false });

    await channel.send({ embeds: [embed] });

    // Clear all timeouts
    if (room.gameTimeout) clearTimeout(room.gameTimeout);
    if (room.turnTimeout) clearTimeout(room.turnTimeout);

    botRooms.delete(channelId);
}

// Timeout functions
async function timeoutCurrentPlayer(channel, channelId) {
    const room = botRooms.get(channelId);
    if (!room || !room.started) return;

    const currentTurnId = room.turnOrder[room.currentTurn];
    if (currentTurnId === 'bot') return; // Bot kh√¥ng b·ªã timeout

    const currentPlayer = room.players[currentTurnId];
    if (!currentPlayer) return;

    const embed = new EmbedBuilder()
        .setTitle('‚è∞ Timeout!')
        .setDescription(`${currentPlayer.user.displayName} ƒë√£ qu√° th·ªùi gian (45s) v√† b·ªã b·ªè l∆∞·ª£t!`)
        .setColor('#FF0000');

    await channel.send({ embeds: [embed] });

    // Clear timeout
    room.turnTimeout = null;

    // Skip to next turn
    setTimeout(() => nextTurn(channel, channelId), 2000);
}

// Timeout to√†n game
async function timeoutGame(channel, channelId) {
    const room = botRooms.get(channelId);
    if (!room) return;

    const embed = new EmbedBuilder()
        .setTitle('‚è∞ GAME TIMEOUT!')
        .setDescription('Game ƒë√£ qu√° 10 ph√∫t v√† b·ªã h·ªßy! T·∫•t c·∫£ ng∆∞·ªùi ch∆°i b·ªã x·ª≠ thua.\nüí∞ Ph√≠ tham gia (100 Rin) s·∫Ω kh√¥ng ƒë∆∞·ª£c ho√†n l·∫°i.')
        .setColor('#FF0000');

    let lostAmountText = '';
    for (const [userId, player] of Object.entries(room.players)) {
        lostAmountText += `${player.user.displayName}: -100 Rin\n`;
    }

    if (lostAmountText) {
        embed.addFields({ name: 'Ti·ªÅn m·∫•t do timeout', value: lostAmountText, inline: false });
    }

    await channel.send({ embeds: [embed] });

    // Clear all timeouts
    if (room.turnTimeout) clearTimeout(room.turnTimeout);

    // X√≥a room
    botRooms.delete(channelId);
}

module.exports = {
    name: 'tpbot',
    description: 'Ch∆°i C·ªù T·ª∑ Ph√∫ v·ªõi Bot AI',
    timeoutGame,
    
    async execute(message, args) {
        const channelId = message.channel.id;

        if (botRooms.has(channelId)) {
            return message.reply('‚ùå ƒê√£ c√≥ ph√≤ng C·ªù T·ª∑ Ph√∫ Bot trong k√™nh n√†y!');
        }

        const room = {
            host: message.author,
            players: {},
            bot: {
                position: 0,
                money: BOT_PERSONALITY.initialMoney,
                inJail: false,
                properties: []
            },
            properties: {}, // position -> ownerId or 'bot'
            started: false,
            currentTurn: 0,
            turnOrder: [], // Will include 'bot'
            extraTurn: false,
            statusMessage: null,
            gameTimeout: null,
            turnTimeout: null
        };

        botRooms.set(channelId, room);

        const embed = new EmbedBuilder()
            .setTitle('ü§ñ C·ªú T·ª∂ PH√ö BOT AI')
            .setDescription('**Th√°ch ƒë·∫•u v·ªõi Bot AI th√¥ng minh!**\n\nBot s·∫Ω c·∫°nh tranh tr·ª±c ti·∫øp v·ªõi b·∫°n!')
            .addFields(
                { name: 'ü§ñ ƒê·ªëi th·ªß AI', value: `‚Ä¢ **T√™n**: ${BOT_PERSONALITY.name}\n‚Ä¢ **Chi·∫øn thu·∫≠t**: ${BOT_PERSONALITY.strategy}\n‚Ä¢ **Ti·ªÅn kh·ªüi ƒë·∫ßu**: ${BOT_PERSONALITY.initialMoney} Nene`, inline: false },
                { name: 'üéØ Ph√≠ tham gia', value: '100 Rin (Th·∫Øng Bot: +750 Rin!)', inline: false }
            )
            .setColor('#FF6B35')
            .setThumbnail('https://media.giphy.com/media/26tn33aiTi1jkl6H6/giphy.gif');

        const joinButton = new ButtonBuilder()
            .setCustomId('tpbot_join')
            .setLabel('‚öîÔ∏è Th√°ch ƒë·∫•u Bot')
            .setStyle(ButtonStyle.Primary);

        const startButton = new ButtonBuilder()
            .setCustomId('tpbot_start')
            .setLabel('üöÄ B·∫Øt ƒë·∫ßu')
            .setStyle(ButtonStyle.Danger);

        // Kh√¥ng c√≥ n√∫t h·ªßy cho game bot
        const row = new ActionRowBuilder().addComponents(joinButton, startButton);
        await message.reply({ embeds: [embed], components: [row] });
    },

    async handleInteraction(interaction) {
        const channelId = interaction.channel.id;
        const room = botRooms.get(channelId);

        if (!room) {
            return interaction.reply({ content: '‚ùå Ph√≤ng kh√¥ng t·ªìn t·∫°i!', ephemeral: true });
        }

        if (interaction.customId === 'tpbot_join') {
            if (room.started) {
                return interaction.reply({ content: '‚ùå Game ƒë√£ b·∫Øt ƒë·∫ßu!', ephemeral: true });
            }

            if (interaction.user.id in room.players) {
                return interaction.reply({ content: '‚ùå B·∫°n ƒë√£ tham gia r·ªìi!', ephemeral: true });
            }

            if (Object.keys(room.players).length >= 4) {
                return interaction.reply({ content: '‚ùå T·ªëi ƒëa 4 ng∆∞·ªùi ch∆°i v·ªõi Bot!', ephemeral: true });
            }

            const userRin = await getUserRin(interaction.user.id);
            if (userRin < 100) {
                return interaction.reply({ content: '‚ùå B·∫°n c·∫ßn 100 Rin ƒë·ªÉ th√°ch ƒë·∫•u Bot!', ephemeral: true });
            }

            await updateUserRin(interaction.user.id, -100);

            room.players[interaction.user.id] = {
                user: interaction.user,
                money: 1500, // Starting money in Nene
                position: 0,
                inJail: false,
                properties: []
            };

            const embed = new EmbedBuilder()
                .setTitle('‚úÖ Th√°ch ƒë·∫•u th√†nh c√¥ng!')
                .setDescription(`${interaction.user.displayName} ƒë√£ tham gia th√°ch ƒë·∫•u v·ªõi Bot AI!`)
                .setColor('#00FF00');

            await interaction.reply({ embeds: [embed] });

        } else if (interaction.customId === 'tpbot_start') {
            if (room.started) {
                return interaction.reply({ content: '‚ùå Game ƒë√£ b·∫Øt ƒë·∫ßu!', ephemeral: true });
            }

            if (interaction.user.id !== room.host.id) {
                return interaction.reply({ content: '‚õî Ch·ªâ ch·ªß ph√≤ng ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu!', ephemeral: true });
            }

            if (Object.keys(room.players).length === 0) {
                return interaction.reply({ content: '‚ùå C·∫ßn √≠t nh·∫•t 1 ng∆∞·ªùi ch∆°i ƒë·ªÉ th√°ch ƒë·∫•u Bot!', ephemeral: true });
            }

            room.started = true;
            room.turnOrder = [...Object.keys(room.players), 'bot']; // Bot plays with players

            // Set game timeout (10 ph√∫t)
            room.gameTimeout = setTimeout(async () => {
                await this.timeoutGame(interaction.channel, channelId);
            }, GAME_TIMEOUT);

            const embed = new EmbedBuilder()
                .setTitle('üé≤ C·ªú T·ª∂ PH√ö BOT B·∫ÆT ƒê·∫¶U!')
                .setDescription(`Cu·ªôc chi·∫øn v·ªõi ${BOT_PERSONALITY.name} b·∫Øt ƒë·∫ßu! M·ªçi ng∆∞·ªùi b·∫Øt ƒë·∫ßu v·ªõi 1500 Nene!\n‚è∞ Game s·∫Ω t·ª± ƒë·ªông k·∫øt th√∫c sau 10 ph√∫t.`)
                .setColor('#FF6B35');

            await interaction.reply({ embeds: [embed] });

            // Start status tracking
            const statusEmbed = new EmbedBuilder()
                .setDescription(createBoardStatus(channelId))
                .setColor('#FFD700');
            
            room.statusMessage = await interaction.followUp({ embeds: [statusEmbed] });

            // Start first turn
            await nextTurn(interaction.channel, channelId);

        } else if (interaction.customId.startsWith('tpbot_roll_dice_')) {
            const playerId = interaction.customId.split('_')[3];
            
            if (!room.started) {
                return interaction.reply({ content: '‚ùå Game ch∆∞a b·∫Øt ƒë·∫ßu!', ephemeral: true });
            }

            if (interaction.user.id !== playerId) {
                return interaction.reply({ content: '‚õî Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!', ephemeral: true });
            }

            if (room.turnOrder[room.currentTurn] !== playerId) {
                return interaction.reply({ content: '‚õî Ch∆∞a ƒë·∫øn l∆∞·ª£t c·ªßa b·∫°n!', ephemeral: true });
            }

            // Clear turn timeout
            if (room.turnTimeout) {
                clearTimeout(room.turnTimeout);
                room.turnTimeout = null;
            }

            const dice1 = rollDice();
            const dice2 = rollDice();
            const total = dice1 + dice2;

            const player = room.players[playerId];
            player.position = (player.position + total) % BOARD.length;

            // Pass start bonus
            if (player.position + total >= BOARD.length) {
                player.money += 200;
            }

            const embed = new EmbedBuilder()
                .setTitle('üé≤ K·∫øt qu·∫£ tung x√∫c x·∫Øc!')
                .setDescription(`${interaction.user.displayName} tung ƒë∆∞·ª£c: ${dice1} + ${dice2} = ${total}`)
                .addFields({ name: 'V·ªã tr√≠ m·ªõi', value: BOARD[player.position].name, inline: false })
                .setColor('#0099FF');

            await interaction.reply({ embeds: [embed] });

            // Handle current position
            const needsWait = await handleProperty(interaction.channel, channelId, playerId);
            
            if (!needsWait) {
                setTimeout(() => nextTurn(interaction.channel, channelId), 2000);
            }

        } else if (interaction.customId.startsWith('tpbot_buy_property_')) {
            const playerId = interaction.customId.split('_')[3];
            
            if (interaction.user.id !== playerId) {
                return interaction.reply({ content: '‚õî Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!', ephemeral: true });
            }

            // Clear turn timeout
            if (room.turnTimeout) {
                clearTimeout(room.turnTimeout);
                room.turnTimeout = null;
            }

            const player = room.players[playerId];
            const position = BOARD[player.position];

            player.money -= position.price;
            room.properties[player.position] = playerId;

            const embed = new EmbedBuilder()
                .setTitle('üè† Mua ƒë·∫•t th√†nh c√¥ng!')
                .setDescription(`${interaction.user.displayName} ƒë√£ mua **${position.name}** v·ªõi gi√° ${position.price} Nene!`)
                .setColor('#00FF00');

            await interaction.reply({ embeds: [embed] });
            setTimeout(() => nextTurn(interaction.channel, channelId), 2000);

        } else if (interaction.customId.startsWith('tpbot_skip_property_')) {
            const playerId = interaction.customId.split('_')[3];
            
            if (interaction.user.id !== playerId) {
                return interaction.reply({ content: '‚õî Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!', ephemeral: true });
            }

            // Clear turn timeout
            if (room.turnTimeout) {
                clearTimeout(room.turnTimeout);
                room.turnTimeout = null;
            }

            const embed = new EmbedBuilder()
                .setTitle('‚ùå B·ªè qua mua ƒë·∫•t')
                .setDescription(`${interaction.user.displayName} ƒë√£ b·ªè qua c∆° h·ªôi mua ƒë·∫•t!`)
                .setColor('#FF0000');

            await interaction.reply({ embeds: [embed] });
            setTimeout(() => nextTurn(interaction.channel, channelId), 1000);
        }
    }
}; 