const { Client, GatewayIntentBits, Collection } = require('discord.js');
const fs = require('fs');
const path = require('path');
const config = require('./config/config.js');
const { connectDB, getGuildPrefix, getAllGuildPrefixes } = require('./utils/database.js');
const cron = require('node-cron');
const ReminderScheduler = require('./utils/reminderScheduler');
const marriageTracker = require('./utils/marriageTracker');

// Auto-restart counter
let restartCount = 0;
const MAX_RESTARTS = 10;

// T·∫°o bot client v·ªõi intents ƒë·∫ßy ƒë·ªß
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent, 
        GatewayIntentBits.GuildMembers,    
        GatewayIntentBits.GuildMessageReactions,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.DirectMessages // Th√™m intent cho DM
    ]
});

// Collection ƒë·ªÉ l∆∞u commands
client.commands = new Collection();

// Bi·∫øn global ƒë·ªÉ l∆∞u game sessions
global.games = {};
global.typhuRooms = {};

// Kh·ªüi t·∫°o ReminderScheduler
let reminderScheduler;

// Global error handlers ƒë·ªÉ tr√°nh crash
process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
    console.log('üîÑ Attempting to continue...');
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
    console.log('üîÑ Attempting to continue...');
});

// Graceful shutdown handler
process.on('SIGINT', () => {
    console.log('üõë Received SIGINT. Graceful shutdown...');
    client.destroy();
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('üõë Received SIGTERM. Graceful shutdown...');
    client.destroy();
    process.exit(0);
});

// Function c·∫≠p nh·∫≠t Bot Activity ƒë·ªông
const updateBotActivity = async () => {
    try {
        const guildPrefixes = await getAllGuildPrefixes();
        
        // ƒê·∫øm s·ªë server s·ª≠ d·ª•ng prefix m·∫∑c ƒë·ªãnh vs custom
        const totalServers = client.guilds.cache.size;
        const customPrefixCount = Object.keys(guildPrefixes || {}).length;
        const defaultPrefixCount = totalServers - customPrefixCount;
        
        // Hi·ªÉn th·ªã th√¥ng tin prefix ƒë·ªông
        if (customPrefixCount > 0) {
            client.user.setActivity(`RinBot | Default: ${config.prefix} | Custom: ${customPrefixCount}/${totalServers} servers | ,setprefix`, { 
                type: 'PLAYING' 
            });
        } else {
            client.user.setActivity(`RinBot | Prefix: ${config.prefix} | ,setprefix ƒë·ªÉ ƒë·ªïi`, { 
                type: 'PLAYING' 
            });
        }
    } catch (error) {
        console.error('L·ªói c·∫≠p nh·∫≠t bot activity:', error);
        // Fallback v·ªÅ hi·ªÉn th·ªã c∆° b·∫£n
        try {
            client.user.setActivity(`RinBot | Prefix: ${config.prefix} | ,setprefix`, { 
                type: 'PLAYING' 
            });
        } catch (fallbackError) {
            console.error('L·ªói fallback activity:', fallbackError);
        }
    }
};

// H√†m export ƒë·ªÉ c√°c command kh√°c g·ªçi
global.updateBotActivity = updateBotActivity;

// Load commands
const loadCommands = () => {
    try {
        const commandFolders = fs.readdirSync('./commands');
        
        for (const folder of commandFolders) {
            const commandFiles = fs.readdirSync(`./commands/${folder}`).filter(file => file.endsWith('.js'));
            
            for (const file of commandFiles) {
                try {
                    delete require.cache[require.resolve(`./commands/${folder}/${file}`)];
                    const command = require(`./commands/${folder}/${file}`);
                    if (command.name) {
                        client.commands.set(command.name, command);
                    }
                } catch (error) {
                    console.error(`‚ùå L·ªói load command ${file}:`, error.message);
                }
            }
        }
        
        console.log(`‚úÖ ƒê√£ load ${client.commands.size} commands`);
    } catch (error) {
        console.error('‚ùå L·ªói load commands:', error);
    }
};

// Event handler
client.once('ready', () => {
    console.log(`ü§ñ Bot ${client.user.tag} ƒë√£ s·∫µn s√†ng!`);
    console.log(`üìä ƒêang ph·ª•c v·ª• ${client.guilds.cache.size} servers`);
    console.log(`üîÑ Restart count: ${restartCount}`);
    
    // Reset restart count khi bot start th√†nh c√¥ng
    restartCount = 0;
    
    // Thi·∫øt l·∫≠p ho·∫°t ƒë·ªông v·ªõi prefix ƒë·ªông
    updateBotActivity();
    
    // Kh·ªüi ƒë·ªông Reminder Scheduler
    try {
        reminderScheduler = new ReminderScheduler(client);
        reminderScheduler.start();
    } catch (error) {
        console.error('‚ùå L·ªói kh·ªüi ƒë·ªông Reminder Scheduler:', error);
    }
});

// Error event handlers
client.on('error', (error) => {
    console.error('‚ùå Discord client error:', error);
});

client.on('warn', (warning) => {
    console.warn('‚ö†Ô∏è Discord client warning:', warning);
});

client.on('disconnect', () => {
    console.log('üîå Bot disconnected from Discord');
});

client.on('reconnecting', () => {
    console.log('üîÑ Bot is reconnecting...');
});

client.on('resume', () => {
    console.log('‚ñ∂Ô∏è Bot resumed connection');
});

client.on('messageCreate', async (message) => {
    if (message.author.bot) return;
    
    // X·ª≠ l√Ω DM t·ª´ chuy√™n gia
    if (!message.guild) {
        try {
            const ExpertHandler = require('./utils/expertHandler');
            const expertHandler = new ExpertHandler(client);
            
            // Ki·ªÉm tra n·∫øu message t·ª´ chuy√™n gia
            const handled = await expertHandler.handleExpertDM(message);
            if (handled) return;
            
            // N·∫øu kh√¥ng ph·∫£i chuy√™n gia, g·ª≠i h∆∞·ªõng d·∫´n chung
            if (message.content.toLowerCase() === 'status') {
                await expertHandler.checkExpertStatus(message);
                return;
            }
            
            // H∆∞·ªõng d·∫´n chung cho DM
            const helpEmbed = require('discord.js').EmbedBuilder;
            const dmHelpEmbed = new helpEmbed()
                .setTitle('üì© Tin nh·∫Øn ri√™ng')
                .setDescription('**B·∫°n c√≥ th·ªÉ:**\n\n' +
                    'üë®‚Äç‚öïÔ∏è **N·∫øu b·∫°n l√† chuy√™n gia:**\n' +
                    '‚Ä¢ Tr·∫£ l·ªùi c√¢u h·ªèi: `!reply [m√£] [c√¢u tr·∫£ l·ªùi]`\n' +
                    '‚Ä¢ Xem th√¥ng tin: `status`\n\n' +
                    '‚ùì **H·ªèi chuy√™n gia:**\n' +
                    '‚Ä¢ V√†o server v√† g√µ `[prefix]hoi` ƒë·ªÉ h·ªèi chuy√™n gia\n\n' +
                    'üîí **Ho√†n to√†n ·∫©n danh v√† b·∫£o m·∫≠t**')
                .setColor('#0099FF');
            
            await message.reply({ embeds: [dmHelpEmbed] });
            
        } catch (error) {
            console.error('L·ªói x·ª≠ l√Ω DM:', error);
        }
        return;
    }

    // L·∫•y prefix theo th·ª© t·ª± ∆∞u ti√™n: database > .env > default
    let guildPrefix;
    try {
        const dbPrefix = await getGuildPrefix(message.guild.id);
        // Th·ª© t·ª± ∆∞u ti√™n: database custom prefix > .env > default
        if (dbPrefix) {
            guildPrefix = dbPrefix; // Prefix custom t·ª´ database
        } else {
            guildPrefix = config.prefix; // Prefix t·ª´ .env ho·∫∑c default
        }
    } catch (error) {
        console.error('L·ªói l·∫•y guild prefix:', error);
        guildPrefix = config.prefix; // Fallback to config prefix
    }
    
    // X·ª≠ l√Ω ti·∫øn ƒë·ªô ngh·ªÅ nghi·ªáp cho chat jobs (Nh√† B√°o, MC)
    if (!message.content.startsWith(guildPrefix)) {
        try {
            const { getCityUser, updateCityUser, updateUserRin } = require('./utils/database');
            const { JOB_TYPES } = require('./utils/constants');
            
            const cityUser = await getCityUser(message.author.id);
            
            // Ki·ªÉm tra xem user c√≥ ngh·ªÅ chat v√† ƒëang trong ca l√†m vi·ªác kh√¥ng
            if (cityUser.job && ['nhabao', 'mc'].includes(cityUser.job) && cityUser.workStartTime) {
                const job = JOB_TYPES[cityUser.job];
                const currentProgress = cityUser.workProgress || 0;
                
                // Ki·ªÉm tra ƒë√£ ho√†n th√†nh h√¥m nay ch∆∞a
                const now = new Date();
                const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                const lastWork = cityUser.lastWork ? new Date(cityUser.lastWork) : null;
                const hasWorkedToday = lastWork && lastWork >= todayStart;
                
                // N·∫øu ƒë√£ ho√†n th√†nh h√¥m nay th√¨ kh√¥ng t√≠nh ti·∫øn ƒë·ªô n·ªØa
                if (hasWorkedToday) {
                    return;
                }
                
                // Ki·ªÉm tra xem ƒë√£ ho√†n th√†nh ch∆∞a
                if (currentProgress < job.targetMessages) {
                    const newProgress = currentProgress + 1;
                    
                    // C·ªông ti·ªÅn ngay l·∫≠p t·ª©c
                    await updateUserRin(message.author.id, job.rewardPerMessage);
                    
                    // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
                    await updateCityUser(message.author.id, { 
                        workProgress: newProgress 
                    });
                    
                    // Th√¥ng b√°o ti·∫øn ƒë·ªô m·ªói 10 tin nh·∫Øn ho·∫∑c khi g·∫ßn ho√†n th√†nh
                    const shouldNotify = newProgress % 10 === 0 || newProgress >= job.targetMessages - 5;
                    
                    if (shouldNotify && newProgress < job.targetMessages) {
                        const remaining = job.targetMessages - newProgress;
                        const progressPercent = Math.round((newProgress / job.targetMessages) * 100);
                        
                        // Th√™m reaction ƒë·ªÉ b√°o ti·∫øn ƒë·ªô
                        if (remaining <= 5) {
                            await message.react('üî•'); // G·∫ßn ho√†n th√†nh
                        } else if (newProgress % 10 === 0) {
                            await message.react('üìà'); // Milestone
                        }
                        
                        // Th√¥ng b√°o nh·∫π
                        setTimeout(async () => {
                            const msg = await message.reply(`üìä **Nh√† b√°o:** ${newProgress}/${job.targetMessages} tin nh·∫Øn (${progressPercent}%) - C√≤n ${remaining} tin nh·∫Øn n·ªØa! üí™`);
                            setTimeout(() => msg.delete().catch(() => {}), 5000); // X√≥a sau 5s
                        }, 1000);
                    }
                    
                    // Th√¥ng b√°o khi ho√†n th√†nh
                    if (newProgress >= job.targetMessages) {
                        const { EmbedBuilder } = require('discord.js');
                        const { COLORS } = require('./utils/constants');
                        
                        await message.react('üéâ'); // Ho√†n th√†nh
                        
                        const embed = new EmbedBuilder()
                            .setTitle('üéâ HO√ÄN TH√ÄNH CA L√ÄM VI·ªÜC!')
                            .setDescription(`**${job.name}** ${message.author.displayName} ƒë√£ ho√†n th√†nh ca l√†m h√¥m nay!\n\n` +
                                `**üìä Th√†nh t√≠ch:**\n` +
                                `‚Ä¢ Tin nh·∫Øn: ${newProgress}/${job.targetMessages}\n` +
                                `‚Ä¢ T·ªïng thu nh·∫≠p: ${(newProgress * job.rewardPerMessage).toLocaleString()} Rin\n\n` +
                                `**‚è∞ L√†m vi·ªác ti·∫øp theo:** Ng√†y mai (0:00)\n\n` +
                                `**Ch√∫c m·ª´ng! üéä**`)
                            .setColor(COLORS.success)
                            .setFooter({ text: 'H√£y ngh·ªâ ng∆°i v√† quay l·∫°i v√†o ng√†y mai!' });
                        
                        await message.channel.send({ embeds: [embed] });
                        
                        // C·∫≠p nh·∫≠t th·ªùi gian l√†m vi·ªác cu·ªëi v√† x√≥a workStartTime
                        await updateCityUser(message.author.id, { 
                            lastWork: new Date(),
                            workStartTime: null,
                            workProgress: 0 // Reset cho ca m·ªõi
                        });
                    }
                }
            }
        } catch (error) {
            console.error('L·ªói x·ª≠ l√Ω ti·∫øn ƒë·ªô chat job:', error);
        }
    }

    // X·ª≠ l√Ω marriage tracking cho chat
    try {
        await marriageTracker.handleChatExp(message);
    } catch (error) {
        console.error('L·ªói marriage chat tracking:', error);
    }

    if (!message.content.startsWith(guildPrefix)) return;

    const args = message.content.slice(guildPrefix.length).trim().split(/ +/);
    const commandName = args.shift().toLowerCase();

    const command = client.commands.get(commandName);
    if (!command) return;

    try {
        await command.execute(message, args, client);
    } catch (error) {
        console.error('‚ùå L·ªói khi th·ª±c thi command:', error);
        message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi th·ª±c thi l·ªánh!');
    }
});

// X·ª≠ l√Ω interactions (buttons, modals)
client.on('interactionCreate', async (interaction) => {
    try {
        // X·ª≠ l√Ω interactions cho t·∫°o b√†n X√¨ D√°ch (CHECK TR∆Ø·ªöC ƒë·ªÉ tr√°nh conflict)
        if (interaction.customId && (
            interaction.customId === 'xj_join' ||
            interaction.customId === 'xj_start' ||
            interaction.customId.startsWith('bet_') ||
            interaction.customId === 'bet_cancel'
        )) {
            // Ch·ªâ route v√†o X√¨ D√°ch n·∫øu c√≥ game trong channel n√†y
            const channelId = String(interaction.channel.id);
            if (global.games[channelId] || interaction.customId === 'xj_join' || interaction.customId === 'xj_start') {
                const xjgoCommand = client.commands.get('xjgo');
                if (xjgoCommand) {
                    // Handle theo customId
                    if (interaction.customId === 'xj_join') {
                        await xjgoCommand.handleJoin(interaction, channelId);
                    } else if (interaction.customId === 'xj_start') {
                        await xjgoCommand.handleStart(interaction, channelId);
                    } else if (interaction.customId.startsWith('bet_') && interaction.customId !== 'bet_cancel') {
                        await xjgoCommand.handleBetButton(interaction, channelId);
                    } else if (interaction.customId === 'bet_cancel') {
                        await interaction.update({ 
                            content: '‚ùå ƒê√£ h·ªßy tham gia', 
                            embeds: [], 
                            components: [] 
                        });
                    }
                }
                return;
            }
        }

        // X·ª≠ l√Ω interactions cho setgemini
        if (interaction.customId && (
            interaction.customId === 'open_apikey_modal' ||
            interaction.customId === 'apikey_modal'
        )) {
            const setgeminiCommand = client.commands.get('setgemini');
            if (setgeminiCommand && setgeminiCommand.handleInteraction) {
                await setgeminiCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho h·ªèi chuy√™n gia
        if (interaction.customId && (
            interaction.customId.startsWith('ask_expert_') ||
            interaction.customId.startsWith('question_modal_') ||
            interaction.customId.startsWith('expert_reply_')
        )) {
            const hoiCommand = client.commands.get('hoi');
            if (hoiCommand && hoiCommand.handleInteraction) {
                await hoiCommand.handleInteraction(interaction);
            }
            return;
        }
        
        // X·ª≠ l√Ω modal submit cho c√¢u tr·∫£ l·ªùi chuy√™n gia
        if (interaction.isModalSubmit() && interaction.customId.startsWith('expert_answer_')) {
            const hoiCommand = client.commands.get('hoi');
            if (hoiCommand && hoiCommand.handleAnswerSubmit) {
                await hoiCommand.handleAnswerSubmit(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho B·∫ßu Cua (ng∆∞·ªùi d√πng l√†m nh√† c√°i)  
        if (interaction.customId && (
            (interaction.customId.startsWith('bet_') && !interaction.customId.startsWith('bet_tai') && !interaction.customId.startsWith('bet_xiu')) ||
            interaction.customId === 'confirm_bet' ||
            interaction.customId === 'start_game' ||
            interaction.customId === 'cancel_game' ||
            interaction.customId.startsWith('bet_modal_')
        )) {
            // Ch·ªâ x·ª≠ l√Ω n·∫øu KH√îNG ph·∫£i X√¨ D√°ch
            const channelId = String(interaction.channel.id);
            if (!global.games[channelId]) {
                const bauCuaCommand = client.commands.get('bcgo');
                if (bauCuaCommand && bauCuaCommand.handleInteraction) {
                    await bauCuaCommand.handleInteraction(interaction);
                }
                return;
            }
        }

        // X·ª≠ l√Ω interactions cho B·∫ßu Cua Bot (bot l√†m nh√† c√°i)
        if (interaction.customId && (
            interaction.customId.startsWith('bot_bet_') ||
            interaction.customId === 'bot_confirm_bet' ||
            interaction.customId === 'bot_auto_play' ||
            interaction.customId.startsWith('bot_bet_modal_')
        )) {
            const botBauCuaCommand = client.commands.get('bcbot');
            if (botBauCuaCommand && botBauCuaCommand.handleInteraction) {
                await botBauCuaCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho X√¨ D√°ch
        if (interaction.customId && (
            interaction.customId === 'view_cards' ||
            interaction.customId === 'draw_card' ||
            interaction.customId === 'stop_turn'
        )) {
            const xjrinCommand = client.commands.get('xjrin');
            if (xjrinCommand && xjrinCommand.ActionView) {
                await xjrinCommand.ActionView.handleInteraction(interaction, interaction.channel.id);
            }
            return;
        }

        // X·ª≠ l√Ω modal submit cho bet
        if (interaction.isModalSubmit() && interaction.customId === 'bet_modal') {
            const xjgoCommand = client.commands.get('xjgo');
            if (xjgoCommand) {
                const channelId = String(interaction.channel.id);
                
                await xjgoCommand.handleBetModal(interaction, channelId);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho C·ªù T·ª∑ Ph√∫
        if (interaction.customId && (
            interaction.customId === 'tp_join' ||
            interaction.customId === 'tp_start' ||
            interaction.customId.startsWith('roll_dice_') ||
            interaction.customId.startsWith('buy_property_') ||
            interaction.customId.startsWith('skip_property_')
        )) {
            const typhuCommand = client.commands.get('typhu');
            if (typhuCommand && typhuCommand.handleInteraction) {
                await typhuCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho X√¨ D√°ch Bot
        if (interaction.customId && (
            interaction.customId === 'xjbot_join' ||
            interaction.customId === 'xjbot_start' ||
            interaction.customId === 'xjbot_hit' ||
            interaction.customId === 'xjbot_stand'
        )) {
            const xjbotCommand = client.commands.get('xjbot');
            if (xjbotCommand && xjbotCommand.handleInteraction) {
                await xjbotCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω modal submit cho X√¨ D√°ch Bot
        if (interaction.isModalSubmit() && interaction.customId === 'xjbot_bet_modal') {
            const xjbotCommand = client.commands.get('xjbot');
            if (xjbotCommand && xjbotCommand.handleInteraction) {
                await xjbotCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho T√†i X·ªâu
        if (interaction.customId && (
            interaction.customId === 'bet_tai' ||
            interaction.customId === 'bet_xiu' ||
            interaction.customId === 'view_history' ||
            interaction.customId === 'start_taixiu' ||
            interaction.customId === 'cancel_taixiu'
        )) {
            console.log(`üé≤ [TAIXIU] Processing button interaction: ${interaction.customId}`);
            const taixiuCommand = client.commands.get('taixiu');
            if (taixiuCommand && taixiuCommand.handleInteraction) {
                try {
                    await taixiuCommand.handleInteraction(interaction);
                    console.log(`‚úÖ [TAIXIU] Button interaction processed successfully: ${interaction.customId}`);
                } catch (error) {
                    console.error(`‚ùå [TAIXIU] Button interaction error:`, error);
                }
            }
            return;
        }

        // X·ª≠ l√Ω modal submit cho T√†i X·ªâu
        if (interaction.isModalSubmit() && interaction.customId.startsWith('taixiu_bet_modal_')) {
            console.log(`üé≤ [TAIXIU] Processing modal interaction: ${interaction.customId}`);
            const taixiuCommand = client.commands.get('taixiu');
            if (taixiuCommand && taixiuCommand.handleInteraction) {
                try {
                    await taixiuCommand.handleInteraction(interaction);
                    console.log(`‚úÖ [TAIXIU] Modal interaction processed successfully: ${interaction.customId}`);
                } catch (error) {
                    console.error(`‚ùå [TAIXIU] Modal interaction error:`, error);
                }
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho Blackjack
        if (interaction.customId && (
            interaction.customId === 'blackjack_open_modal' ||
            interaction.customId === 'blackjack_hit' ||
            interaction.customId === 'blackjack_stand'
        )) {
            const blackjackCommand = client.commands.get('blackjack');
            if (blackjackCommand) {
                if (interaction.customId === 'blackjack_open_modal') {
                    // This will be handled by the collector in the command
                    return;
                } else {
                    // Handle hit/stand buttons - these will be handled by collectors too
                    return;
                }
            }
        }

        // X·ª≠ l√Ω modal submit cho Blackjack
        if (interaction.isModalSubmit() && interaction.customId === 'blackjack_bet_modal') {
            const blackjackCommand = client.commands.get('blackjack');
            if (blackjackCommand && blackjackCommand.handleModalSubmit) {
                await blackjackCommand.handleModalSubmit(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho Slots
        if (interaction.customId && (
            interaction.customId === 'slots_open_modal' ||
            interaction.customId === 'slots_play_again' ||
            interaction.customId === 'slots_check_balance'
        )) {
            const slotsCommand = client.commands.get('slots');
            if (slotsCommand) {
                if (interaction.customId === 'slots_open_modal') {
                    // This will be handled by the collector in the command
                    return;
                } else {
                    // Handle play again/check balance - these will be handled by collectors too
                    return;
                }
            }
        }

        // X·ª≠ l√Ω modal submit cho Slots
        if (interaction.isModalSubmit() && interaction.customId === 'slots_bet_modal') {
            const slotsCommand = client.commands.get('slots');
            if (slotsCommand && slotsCommand.handleModalSubmit) {
                await slotsCommand.handleModalSubmit(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho C·ªù T·ª∑ Ph√∫ Bot
        if (interaction.customId && (
            interaction.customId === 'tpbot_join' ||
            interaction.customId === 'tpbot_start' ||
            interaction.customId.startsWith('tpbot_roll_dice_') ||
            interaction.customId.startsWith('tpbot_buy_property_') ||
            interaction.customId.startsWith('tpbot_skip_property_')
        )) {
            const tpbotCommand = client.commands.get('tpbot');
            if (tpbotCommand && tpbotCommand.handleInteraction) {
                await tpbotCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho Nhi·ªám V·ª•
        if (interaction.customId && interaction.customId.startsWith('mission_')) {
            const nhiemvuCommand = client.commands.get('nhiemvu');
            if (nhiemvuCommand && nhiemvuCommand.handleInteraction) {
                await nhiemvuCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho Farm (muacay)
        if (interaction.customId && (
            interaction.customId.startsWith('plant_tree_')
        )) {
            const muacayCommand = client.commands.get('muacay');
            if (muacayCommand && muacayCommand.handleInteraction) {
                await muacayCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho caycheck (xem chi ti·∫øt c√¢y)
        if (interaction.customId && (
            interaction.customId.startsWith('tree_detail_')
        )) {
            const cayCheckCommand = client.commands.get('caycheck');
            if (cayCheckCommand && cayCheckCommand.handleInteraction) {
                await cayCheckCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho bancay
        if (interaction.customId && (
            interaction.customId.startsWith('sell_tree_') ||
            interaction.customId.startsWith('cancel_sell_')
        )) {
            const bancayCommand = client.commands.get('bancay');
            if (bancayCommand && bancayCommand.handleInteraction) {
                await bancayCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho Pet system
        if (interaction.customId && (
            interaction.customId.startsWith('breed_') ||
            interaction.customId.startsWith('sell_pet_') ||
            interaction.customId.startsWith('retire_pet_') ||
            interaction.customId.startsWith('cancel_pet_')
        )) {
            let petCommand = null;
            
            if (interaction.customId.startsWith('breed_')) {
                petCommand = client.commands.get('petchich');
            } else if (interaction.customId.startsWith('sell_pet_')) {
                petCommand = client.commands.get('banpet');
            } else if (interaction.customId.startsWith('retire_pet_')) {
                petCommand = client.commands.get('gia');
            } else if (interaction.customId.startsWith('cancel_pet_')) {
                petCommand = client.commands.get('huypet');
            }
            
            if (petCommand && petCommand.handleInteraction) {
                await petCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho City system
        if (interaction.customId && (
            interaction.customId.startsWith('rent_house_') ||
            interaction.customId.startsWith('job_apply_') ||
            interaction.customId.startsWith('mission_') ||
            interaction.customId.startsWith('repair_') ||
            interaction.customId.startsWith('early_repair_') ||
            interaction.customId.startsWith('cancel_house_')
        )) {
            let cityCommand = null;
            
            if (interaction.customId.startsWith('rent_house_')) {
                cityCommand = client.commands.get('thuenha');
            } else if (interaction.customId.startsWith('job_apply_')) {
                cityCommand = client.commands.get('dangkynghe');
            } else if (interaction.customId.startsWith('mission_')) {
                cityCommand = client.commands.get('nhiemvu');
            } else if (interaction.customId.startsWith('repair_') || interaction.customId.startsWith('early_repair_')) {
                cityCommand = client.commands.get('suanha');
            } else if (interaction.customId.startsWith('cancel_house_')) {
                cityCommand = client.commands.get('huynha');
            }
            
            if (cityCommand && cityCommand.handleInteraction) {
                await cityCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho Reminder system
        if (interaction.customId && (
            interaction.customId.startsWith('refresh_reminders_') ||
            interaction.customId.startsWith('clear_reminders_')
        )) {
            const reminderCommand = client.commands.get('xemnhacnho');
            if (reminderCommand && reminderCommand.handleInteraction) {
                await reminderCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho Marriage system
        if (interaction.customId && (
            interaction.customId.startsWith('buy_') ||
            interaction.customId.startsWith('marry_') ||
            interaction.customId.startsWith('divorce_')
        )) {
            let marriageCommand = null;
            
            if (interaction.customId.startsWith('buy_')) {
                marriageCommand = client.commands.get('buy');
            } else if (interaction.customId.startsWith('marry_')) {
                marriageCommand = client.commands.get('marry');
            } else if (interaction.customId.startsWith('divorce_')) {
                marriageCommand = client.commands.get('divorce');
            }
            
            if (marriageCommand && marriageCommand.handleInteraction) {
                await marriageCommand.handleInteraction(interaction);
            }
            return;
        }

    } catch (error) {
        console.error('L·ªói interaction:', error);
        // Ch·ªâ reply n·∫øu l√† l·ªói th·ª±c s·ª± v√† interaction ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω
        if (!interaction.replied && !interaction.deferred && error.code !== 40060) {
            try {
                await interaction.reply({ content: '‚ùå C√≥ l·ªói x·∫£y ra!', flags: 64 });
            } catch (replyError) {
                console.error('Kh√¥ng th·ªÉ reply interaction error:', replyError.message);
            }
        }
    }
});

// X·ª≠ l√Ω reaction cho giveaway
client.on('messageReactionAdd', async (reaction, user) => {
    if (user.bot) return;
    
    // Import giveaway handler
    try {
        const giveawayHandler = require('./commands/general/giveaway.js');
        if (giveawayHandler.handleReaction) {
            await giveawayHandler.handleReaction(reaction, user, 'add');
        }
    } catch (error) {
        console.error('L·ªói x·ª≠ l√Ω reaction:', error);
    }
});

client.on('messageReactionRemove', async (reaction, user) => {
    if (user.bot) return;
    
    try {
        const giveawayHandler = require('./commands/general/giveaway.js');
        if (giveawayHandler.handleReaction) {
            await giveawayHandler.handleReaction(reaction, user, 'remove');
        }
    } catch (error) {
        console.error('L·ªói x·ª≠ l√Ω reaction remove:', error);
    }
});

// L∆∞u th·ªùi ƒëi·ªÉm join voice v√†o DB cho ngh·ªÅ MC
client.on('voiceStateUpdate', async (oldState, newState) => {
    // X·ª≠ l√Ω marriage tracking cho voice tr∆∞·ªõc
    try {
        await marriageTracker.handleVoiceUpdate(oldState, newState);
    } catch (error) {
        console.error('L·ªói marriage voice tracking:', error);
    }
    
    try {
        const { getCityUser, updateCityUser, updateUserRin } = require('./utils/database');
        const { JOB_TYPES, COLORS } = require('./utils/constants');
        const { EmbedBuilder } = require('discord.js');
        
        // User join voice channel
        if (!oldState.channelId && newState.channelId) {
            const userId = newState.id;
            const cityUser = await getCityUser(userId);
            if (cityUser && cityUser.job === 'mc') {
                await updateCityUser(userId, { lastVoiceJoin: new Date() });
                console.log(`üé§ MC ${newState.member.displayName} ƒë√£ v√†o voice`);
            }
        }
        
        // User leave voice channel - t√≠nh th·ªùi gian v√† update ti·∫øn ƒë·ªô
        if (oldState.channelId && !newState.channelId) {
            const userId = oldState.id;
            const cityUser = await getCityUser(userId);
            if (cityUser && cityUser.job === 'mc' && cityUser.lastVoiceJoin) {
                const job = JOB_TYPES.mc;
                const now = new Date();
                const lastJoin = new Date(cityUser.lastVoiceJoin);
                const sessionMinutes = Math.floor((now - lastJoin) / 60000);
                const dailyProgress = cityUser.dailyVoiceMinutes || 0;
                const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                const isNewDay = !cityUser.lastWork || new Date(cityUser.lastWork) < todayStart;
                
                // Reset n·∫øu l√† ng√†y m·ªõi
                const currentDaily = isNewDay ? sessionMinutes : dailyProgress + sessionMinutes;
                
                console.log(`üé§ MC ${oldState.member.displayName} r·ªùi voice: ${sessionMinutes} ph√∫t, t·ªïng: ${currentDaily} ph√∫t`);
                
                if (currentDaily >= job.minVoiceMinutes && (isNewDay || dailyProgress < job.minVoiceMinutes)) {
                    // Ho√†n th√†nh c√¥ng vi·ªác
                    await updateUserRin(userId, job.rewardPerDay);
                    await updateCityUser(userId, { 
                        lastWork: now,
                        lastVoiceJoin: null,
                        dailyVoiceMinutes: 0
                    });
                    
                    const embed = new EmbedBuilder()
                        .setTitle('üéâ MC - HO√ÄN TH√ÄNH C√îNG VI·ªÜC!')
                        .setDescription(`**‚úÖ Ch√∫c m·ª´ng ${oldState.member.displayName}! B·∫°n ƒë√£ ho√†n th√†nh ca l√†m MC!**\n\n` +
                            `‚Ä¢ **Th·ªùi gian voice h√¥m nay:** ${currentDaily} ph√∫t\n` +
                            `‚Ä¢ **Y√™u c·∫ßu:** ${job.minVoiceMinutes} ph√∫t\n` +
                            `‚Ä¢ **Th∆∞·ªüng nh·∫≠n ƒë∆∞·ª£c:** ${job.rewardPerDay} Rin\n\n` +
                            `**‚è∞ Cooldown:** ${Math.floor(job.cooldown / (60 * 60 * 1000))} gi·ªù\n` +
                            `H√£y ngh·ªâ ng∆°i v√† quay l·∫°i sau!`)
                        .setColor(COLORS.success);
                    
                    // G·ª≠i th√¥ng b√°o ƒë·∫øn channel m√† user ƒëang ·ªü
                    const channels = oldState.guild.channels.cache.filter(c => c.type === 0);
                    const targetChannel = channels.find(c => c.name.includes('chat') || c.name.includes('general')) || channels.first();
                    if (targetChannel) {
                        await targetChannel.send({ embeds: [embed] });
                    }
                } else {
                    // Ch·ªâ c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
                    await updateCityUser(userId, {
                        lastVoiceJoin: null,
                        dailyVoiceMinutes: currentDaily
                    });
                }
            }
        }
    } catch (err) {
        console.error('L·ªói voiceStateUpdate:', err);
    }
});

// Cron jobs
const setupCronJobs = () => {
    // Update ti·∫øn ƒë·ªô MC m·ªói ph√∫t cho user ƒëang ·ªü voice
    cron.schedule('* * * * *', async () => {
        try {
            const { getCityUser, updateCityUser, updateUserRin } = require('./utils/database');
            const { JOB_TYPES, COLORS } = require('./utils/constants');
            const { EmbedBuilder } = require('discord.js');
            
            for (const guild of client.guilds.cache.values()) {
                for (const voiceChannel of guild.channels.cache.filter(c => c.type === 2).values()) {
                    for (const member of voiceChannel.members.values()) {
                        if (member.user.bot) continue;
                        
                        const cityUser = await getCityUser(member.id);
                        if (cityUser && cityUser.job === 'mc' && cityUser.lastVoiceJoin) {
                            const job = JOB_TYPES.mc;
                            const now = new Date();
                            const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                            const lastWork = cityUser.lastWork ? new Date(cityUser.lastWork) : null;
                            const hasWorkedToday = lastWork && lastWork >= todayStart;
                            
                            // N·∫øu ƒë√£ l√†m vi·ªác h√¥m nay r·ªìi th√¨ kh√¥ng t√≠nh n·ªØa
                            if (hasWorkedToday) {
                                continue;
                            }
                            
                            const lastJoin = new Date(cityUser.lastVoiceJoin);
                            const sessionMinutes = Math.floor((now - lastJoin) / 60000);
                            const dailyProgress = cityUser.dailyVoiceMinutes || 0;
                            
                            const currentDaily = dailyProgress + sessionMinutes;
                            
                            // Ki·ªÉm tra n·∫øu ƒë·ªß ƒëi·ªÅu ki·ªán ho√†n th√†nh
                            if (currentDaily >= job.minVoiceMinutes) {
                                // Ho√†n th√†nh c√¥ng vi·ªác
                                await updateUserRin(member.id, job.rewardPerDay);
                                await updateCityUser(member.id, { 
                                    lastWork: now,
                                    lastVoiceJoin: null,
                                    dailyVoiceMinutes: 0
                                });
                                
                                const embed = new EmbedBuilder()
                                    .setTitle('üéâ MC - HO√ÄN TH√ÄNH C√îNG VI·ªÜC!')
                                    .setDescription(`**‚úÖ Ch√∫c m·ª´ng ${member.displayName}! B·∫°n ƒë√£ ho√†n th√†nh ca l√†m MC h√¥m nay!**\n\n` +
                                        `‚Ä¢ **Th·ªùi gian voice h√¥m nay:** ${currentDaily} ph√∫t\n` +
                                        `‚Ä¢ **Y√™u c·∫ßu:** ${job.minVoiceMinutes} ph√∫t\n` +
                                        `‚Ä¢ **Th∆∞·ªüng nh·∫≠n ƒë∆∞·ª£c:** ${job.rewardPerDay} Rin\n\n` +
                                        `**‚è∞ L√†m vi·ªác ti·∫øp theo:** Ng√†y mai (0:00)\n` +
                                        `H√£y ngh·ªâ ng∆°i v√† quay l·∫°i v√†o ng√†y mai!`)
                                    .setColor(COLORS.success);
                                
                                // G·ª≠i th√¥ng b√°o ƒë·∫øn channel ch√≠nh
                                const channels = guild.channels.cache.filter(c => c.type === 0);
                                const targetChannel = channels.find(c => c.name.includes('chat') || c.name.includes('general')) || channels.first();
                                if (targetChannel) {
                                    await targetChannel.send({ embeds: [embed] });
                                }
                                console.log(`üéâ MC ${member.displayName} ƒë√£ ho√†n th√†nh ca l√†m h√¥m nay!`);
                            } else if (sessionMinutes > 0) {
                                // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
                                await updateCityUser(member.id, {
                                    dailyVoiceMinutes: currentDaily
                                });
                                console.log(`‚è±Ô∏è Update MC ${member.displayName}: ${currentDaily}/${job.minVoiceMinutes} ph√∫t`);
                            }
                        }
                    }
                }
            }
        } catch (error) {
            console.error('L·ªói update ti·∫øn ƒë·ªô MC:', error);
        }
    });

    // Ki·ªÉm tra giveaway m·ªói 10 gi√¢y
    cron.schedule('*/10 * * * * *', async () => {
        try {
            const giveawayHandler = require('./commands/general/giveaway.js');
            if (giveawayHandler.checkGiveaways) {
                await giveawayHandler.checkGiveaways(client);
            }
        } catch (error) {
            console.error('L·ªói ki·ªÉm tra giveaway:', error);
        }
    });

    // Reset MC v√† Nh√† b√°o m·ªói ng√†y v√†o 0:00
    cron.schedule('0 0 * * *', async () => {
        try {
            const { updateAllCityUsers } = require('./utils/database');
            
            // Reset c√°c tr·∫°ng th√°i l√†m vi·ªác h√†ng ng√†y
            await updateAllCityUsers({
                $or: [
                    { job: 'mc' },
                    { job: 'nhabao' }
                ]
            }, {
                lastWork: null,
                workStartTime: null,
                dailyVoiceMinutes: 0,
                workProgress: 0,
                dailyMoneySteal: 0,
                dailyStealRecords: {}
            });
            
            console.log('üåÖ ƒê√£ reset c√¥ng vi·ªác MC v√† Nh√† b√°o cho ng√†y m·ªõi!');
            
            // Ki·ªÉm tra s·ª≠a nh√†
            const cityHandler = require('./commands/city/city.js');
            if (cityHandler.checkRepair) {
                await cityHandler.checkRepair(client);
            }
        } catch (error) {
            console.error('L·ªói reset c√¥ng vi·ªác h√†ng ng√†y:', error);
        }
    });

    // C·∫≠p nh·∫≠t bot activity m·ªói 30 ph√∫t
    cron.schedule('*/30 * * * *', async () => {
        try {
            if (client.isReady()) {
                await updateBotActivity();
            }
        } catch (error) {
            console.error('L·ªói c·∫≠p nh·∫≠t bot activity:', error);
        }
    });
    
    console.log('‚è∞ ƒê√£ thi·∫øt l·∫≠p c√°c cron jobs');
};

// Kh·ªüi ƒë·ªông bot v·ªõi auto-restart
const startBot = async () => {
    try {
        console.log(`üöÄ ƒêang kh·ªüi ƒë·ªông bot (l·∫ßn th·ª≠ ${restartCount + 1})...`);
        
        // K·∫øt n·ªëi database
        await connectDB(config.mongoUri);
        console.log('‚úÖ ƒê√£ k·∫øt n·ªëi database');
        
        // Load commands
        loadCommands();
        
        // Setup cron jobs
        setupCronJobs();
        
        // Load giveaway ƒëang ho·∫°t ƒë·ªông
        try {
            const giveawayHandler = require('./commands/general/giveaway.js');
            if (giveawayHandler.loadActiveGiveaways) {
                await giveawayHandler.loadActiveGiveaways(client);
            }
        } catch (error) {
            console.error('‚ö†Ô∏è L·ªói load giveaways:', error.message);
        }
        
        // ƒêƒÉng nh·∫≠p bot
        await client.login(config.token);
        console.log('‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng');
        
    } catch (error) {
        console.error('‚ùå L·ªói kh·ªüi ƒë·ªông bot:', error);
        
        // Auto-restart logic thay v√¨ process.exit
        restartCount++;
        
        if (restartCount < MAX_RESTARTS) {
            console.log(`üîÑ Th·ª≠ kh·ªüi ƒë·ªông l·∫°i sau 10 gi√¢y... (${restartCount}/${MAX_RESTARTS})`);
            
            // Cleanup tr∆∞·ªõc khi restart
            try {
                if (client && client.isReady()) {
                    client.destroy();
                }
            } catch (cleanupError) {
                console.error('L·ªói cleanup:', cleanupError);
            }
            
            // Restart sau 10 gi√¢y
            setTimeout(() => {
                startBot();
            }, 10000);
        } else {
            console.error(`‚ùå ƒê√£ th·ª≠ kh·ªüi ƒë·ªông ${MAX_RESTARTS} l·∫ßn, d·ª´ng bot ƒë·ªÉ tr√°nh loop v√¥ t·∫≠n`);
            console.error('üîß Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh v√† kh·ªüi ƒë·ªông l·∫°i th·ªß c√¥ng');
            process.exit(1);
        }
    }
};

// Auto-restart n·∫øu bot b·ªã disconnect qu√° l√¢u
let disconnectTimeout;

client.on('disconnect', () => {
    console.log('üîå Bot b·ªã disconnect, ƒë·ª£i 30 gi√¢y ƒë·ªÉ th·ª≠ reconnect...');
    
    disconnectTimeout = setTimeout(() => {
        console.log('‚ö†Ô∏è Bot kh√¥ng th·ªÉ reconnect, th·ª≠ restart...');
        restartCount++;
        
        if (restartCount < MAX_RESTARTS) {
            try {
                client.destroy();
            } catch (error) {
                console.error('L·ªói destroy client:', error);
            }
            
            setTimeout(() => {
                startBot();
            }, 5000);
        }
    }, 30000);
});

client.on('ready', () => {
    // Clear disconnect timeout khi reconnect th√†nh c√¥ng
    if (disconnectTimeout) {
        clearTimeout(disconnectTimeout);
        disconnectTimeout = null;
    }
});

// Kh·ªüi ƒë·ªông bot l·∫ßn ƒë·∫ßu
startBot(); 