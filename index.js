const { Client, GatewayIntentBits, Collection } = require('discord.js');
const fs = require('fs');
const path = require('path');
const config = require('./config/config.js');
const { connectDB, getGuildPrefix, getAllGuildPrefixes } = require('./utils/database.js');
const cron = require('node-cron');
const ReminderScheduler = require('./utils/reminderScheduler');

// T·∫°o bot client v·ªõi intents ƒë·∫ßy ƒë·ªß
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent, 
        GatewayIntentBits.GuildMembers,    
        GatewayIntentBits.GuildMessageReactions
    ]
});

// Collection ƒë·ªÉ l∆∞u commands
client.commands = new Collection();

// Bi·∫øn global ƒë·ªÉ l∆∞u game sessions
global.games = {};
global.typhuRooms = {};

// Kh·ªüi t·∫°o ReminderScheduler
const reminderScheduler = new ReminderScheduler(client);

// Function c·∫≠p nh·∫≠t Bot Activity ƒë·ªông
const updateBotActivity = async () => {
    try {
        const guildPrefixes = await getAllGuildPrefixes();
        
        // ƒê·∫øm s·ªë server s·ª≠ d·ª•ng prefix m·∫∑c ƒë·ªãnh vs custom
        const totalServers = client.guilds.cache.size;
        const customPrefixCount = Object.keys(guildPrefixes || {}).length;
        const defaultPrefixCount = totalServers - customPrefixCount;
        
        // Hi·ªÉn th·ªã th√¥ng tin prefix ƒë·ªông
        if (customPrefixCount > 0) {
            client.user.setActivity(`RinBot | Default: ${config.prefix} | Custom: ${customPrefixCount}/${totalServers} servers | ,setprefix`, { 
                type: 'PLAYING' 
            });
        } else {
            client.user.setActivity(`RinBot | Prefix: ${config.prefix} | ,setprefix ƒë·ªÉ ƒë·ªïi`, { 
                type: 'PLAYING' 
            });
        }
    } catch (error) {
        console.error('L·ªói c·∫≠p nh·∫≠t bot activity:', error);
        // Fallback v·ªÅ hi·ªÉn th·ªã c∆° b·∫£n
        client.user.setActivity(`RinBot | Prefix: ${config.prefix} | ,setprefix`, { 
            type: 'PLAYING' 
        });
    }
};

// H√†m export ƒë·ªÉ c√°c command kh√°c g·ªçi
global.updateBotActivity = updateBotActivity;

// Load commands
const loadCommands = () => {
    const commandFolders = fs.readdirSync('./commands');
    
    for (const folder of commandFolders) {
        const commandFiles = fs.readdirSync(`./commands/${folder}`).filter(file => file.endsWith('.js'));
        
        for (const file of commandFiles) {
            const command = require(`./commands/${folder}/${file}`);
            if (command.name) {
                client.commands.set(command.name, command);
            }
        }
    }
    
    console.log(`‚úÖ ƒê√£ load ${client.commands.size} commands`);
};

// Event handler
client.once('ready', () => {
    console.log(`ü§ñ Bot ${client.user.tag} ƒë√£ s·∫µn s√†ng!`);
    console.log(`üìä ƒêang ph·ª•c v·ª• ${client.guilds.cache.size} servers`);
    
    // Thi·∫øt l·∫≠p ho·∫°t ƒë·ªông v·ªõi prefix ƒë·ªông
    updateBotActivity();
    
    // Kh·ªüi ƒë·ªông Reminder Scheduler
    reminderScheduler.start();
});

client.on('messageCreate', async (message) => {
    if (message.author.bot) return;
    if (!message.guild) return; // Kh√¥ng x·ª≠ l√Ω DM

    // L·∫•y prefix theo th·ª© t·ª± ∆∞u ti√™n: database > .env > default
    let guildPrefix;
    try {
        const dbPrefix = await getGuildPrefix(message.guild.id);
        // Th·ª© t·ª± ∆∞u ti√™n: database custom prefix > .env > default
        if (dbPrefix) {
            guildPrefix = dbPrefix; // Prefix custom t·ª´ database
        } else {
            guildPrefix = config.prefix; // Prefix t·ª´ .env ho·∫∑c default
        }
    } catch (error) {
        console.error('L·ªói l·∫•y guild prefix:', error);
        guildPrefix = config.prefix; // Fallback to config prefix
    }
    
    // X·ª≠ l√Ω ti·∫øn ƒë·ªô ngh·ªÅ nghi·ªáp cho chat jobs (Nh√† B√°o, MC)
    if (!message.content.startsWith(guildPrefix)) {
        try {
            const { getCityUser, updateCityUser, updateUserRin } = require('./utils/database');
            const { JOB_TYPES } = require('./utils/constants');
            
            const cityUser = await getCityUser(message.author.id);
            
            // Debug log
            if (cityUser.job === 'nhabao') {
                console.log(`üîç Debug Nh√† b√°o ${message.author.displayName}:`, {
                    hasJob: !!cityUser.job,
                    job: cityUser.job,
                    hasWorkStartTime: !!cityUser.workStartTime,
                    workProgress: cityUser.workProgress || 0,
                    lastWork: cityUser.lastWork
                });
            }
            
            // Ki·ªÉm tra xem user c√≥ ngh·ªÅ chat v√† ƒëang trong ca l√†m vi·ªác kh√¥ng
            if (cityUser.job && ['nhabao', 'mc'].includes(cityUser.job) && cityUser.workStartTime) {
                const job = JOB_TYPES[cityUser.job];
                const currentProgress = cityUser.workProgress || 0;
                
                console.log(`‚úÖ Processing chat for ${message.author.displayName}: ${currentProgress + 1}/${job.targetMessages}`);
                
                // Ki·ªÉm tra xem ƒë√£ ho√†n th√†nh ch∆∞a
                if (currentProgress < job.targetMessages) {
                    const newProgress = currentProgress + 1;
                    
                    // C·ªông ti·ªÅn ngay l·∫≠p t·ª©c
                    await updateUserRin(message.author.id, job.rewardPerMessage);
                    
                    // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
                    await updateCityUser(message.author.id, { 
                        workProgress: newProgress 
                    });
                    
                    // Th√¥ng b√°o ti·∫øn ƒë·ªô m·ªói 10 tin nh·∫Øn ho·∫∑c khi g·∫ßn ho√†n th√†nh
                    const shouldNotify = newProgress % 10 === 0 || newProgress >= job.targetMessages - 5;
                    
                    if (shouldNotify && newProgress < job.targetMessages) {
                        const remaining = job.targetMessages - newProgress;
                        const progressPercent = Math.round((newProgress / job.targetMessages) * 100);
                        
                        // Th√™m reaction ƒë·ªÉ b√°o ti·∫øn ƒë·ªô
                        if (remaining <= 5) {
                            await message.react('üî•'); // G·∫ßn ho√†n th√†nh
                        } else if (newProgress % 10 === 0) {
                            await message.react('üìà'); // Milestone
                        }
                        
                        // Th√¥ng b√°o nh·∫π
                        setTimeout(async () => {
                            const msg = await message.reply(`üìä **Nh√† b√°o:** ${newProgress}/${job.targetMessages} tin nh·∫Øn (${progressPercent}%) - C√≤n ${remaining} tin nh·∫Øn n·ªØa! üí™`);
                            setTimeout(() => msg.delete().catch(() => {}), 5000); // X√≥a sau 5s
                        }, 1000);
                    }
                    
                    // Th√¥ng b√°o khi ho√†n th√†nh
                    if (newProgress >= job.targetMessages) {
                        const { EmbedBuilder } = require('discord.js');
                        const { COLORS } = require('./utils/constants');
                        
                        await message.react('üéâ'); // Ho√†n th√†nh
                        
                        const embed = new EmbedBuilder()
                            .setTitle('üéâ HO√ÄN TH√ÄNH CA L√ÄM VI·ªÜC!')
                            .setDescription(`**${job.name}** ${message.author.displayName} ƒë√£ ho√†n th√†nh ca l√†m!\n\n` +
                                `**üìä Th√†nh t√≠ch:**\n` +
                                `‚Ä¢ Tin nh·∫Øn: ${newProgress}/${job.targetMessages}\n` +
                                `‚Ä¢ T·ªïng thu nh·∫≠p: ${(newProgress * job.rewardPerMessage).toLocaleString()} Rin\n\n` +
                                `**‚è∞ Cooldown:** ${Math.floor(job.cooldown / (60 * 60 * 1000))} gi·ªù\n\n` +
                                `**Ch√∫c m·ª´ng! üéä**`)
                            .setColor(COLORS.success)
                            .setFooter({ text: 'H√£y ngh·ªâ ng∆°i v√† quay l·∫°i sau!' });
                        
                        await message.channel.send({ embeds: [embed] });
                        
                        // C·∫≠p nh·∫≠t th·ªùi gian l√†m vi·ªác cu·ªëi v√† x√≥a workStartTime
                        await updateCityUser(message.author.id, { 
                            lastWork: new Date(),
                            workStartTime: null,
                            workProgress: 0 // Reset cho ca m·ªõi
                        });
                    }
                }
            }
        } catch (error) {
            console.error('L·ªói x·ª≠ l√Ω ti·∫øn ƒë·ªô chat job:', error);
        }
    }

    if (!message.content.startsWith(guildPrefix)) return;

    const args = message.content.slice(guildPrefix.length).trim().split(/ +/);
    const commandName = args.shift().toLowerCase();

    const command = client.commands.get(commandName);
    if (!command) return;

    try {
        await command.execute(message, args, client);
    } catch (error) {
        console.error('‚ùå L·ªói khi th·ª±c thi command:', error);
        message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi th·ª±c thi l·ªánh!');
    }
});

// X·ª≠ l√Ω interactions (buttons, modals)
client.on('interactionCreate', async (interaction) => {
    try {
        // X·ª≠ l√Ω interactions cho t·∫°o b√†n X√¨ D√°ch (CHECK TR∆Ø·ªöC ƒë·ªÉ tr√°nh conflict)
        if (interaction.customId && (
            interaction.customId === 'xj_join' ||
            interaction.customId === 'xj_start' ||
            interaction.customId.startsWith('bet_') ||
            interaction.customId === 'bet_cancel'
        )) {
            // Ch·ªâ route v√†o X√¨ D√°ch n·∫øu c√≥ game trong channel n√†y
            const channelId = String(interaction.channel.id);
            if (global.games[channelId] || interaction.customId === 'xj_join' || interaction.customId === 'xj_start') {
                const xjgoCommand = client.commands.get('xjgo');
                if (xjgoCommand) {
                    // Handle theo customId
                    if (interaction.customId === 'xj_join') {
                        await xjgoCommand.handleJoin(interaction, channelId);
                    } else if (interaction.customId === 'xj_start') {
                        await xjgoCommand.handleStart(interaction, channelId);
                    } else if (interaction.customId.startsWith('bet_') && interaction.customId !== 'bet_cancel') {
                        await xjgoCommand.handleBetButton(interaction, channelId);
                    } else if (interaction.customId === 'bet_cancel') {
                        await interaction.update({ 
                            content: '‚ùå ƒê√£ h·ªßy tham gia', 
                            embeds: [], 
                            components: [] 
                        });
                    }
                }
                return;
            }
        }

        // X·ª≠ l√Ω interactions cho B·∫ßu Cua (ng∆∞·ªùi d√πng l√†m nh√† c√°i)
        if (interaction.customId && (
            interaction.customId.startsWith('bet_') ||
            interaction.customId === 'confirm_bet' ||
            interaction.customId === 'start_game' ||
            interaction.customId === 'cancel_game' ||
            interaction.customId.startsWith('bet_modal_')
        )) {
            const bauCuaCommand = client.commands.get('bcgo');
            if (bauCuaCommand && bauCuaCommand.handleInteraction) {
                await bauCuaCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho B·∫ßu Cua Bot (bot l√†m nh√† c√°i)
        if (interaction.customId && (
            interaction.customId.startsWith('bot_bet_') ||
            interaction.customId === 'bot_confirm_bet' ||
            interaction.customId === 'bot_auto_play' ||
            interaction.customId.startsWith('bot_bet_modal_')
        )) {
            const botBauCuaCommand = client.commands.get('bcbot');
            if (botBauCuaCommand && botBauCuaCommand.handleInteraction) {
                await botBauCuaCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho X√¨ D√°ch
        if (interaction.customId && (
            interaction.customId === 'view_cards' ||
            interaction.customId === 'draw_card' ||
            interaction.customId === 'stop_turn'
        )) {
            const xjrinCommand = client.commands.get('xjrin');
            if (xjrinCommand && xjrinCommand.ActionView) {
                await xjrinCommand.ActionView.handleInteraction(interaction, interaction.channel.id);
            }
            return;
        }

        // X·ª≠ l√Ω modal submit cho bet
        if (interaction.isModalSubmit() && interaction.customId === 'bet_modal') {
            const xjgoCommand = client.commands.get('xjgo');
            if (xjgoCommand) {
                const channelId = String(interaction.channel.id);
                
                await xjgoCommand.handleBetModal(interaction, channelId);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho C·ªù T·ª∑ Ph√∫
        if (interaction.customId && (
            interaction.customId === 'tp_join' ||
            interaction.customId === 'tp_start' ||
            interaction.customId.startsWith('roll_dice_') ||
            interaction.customId.startsWith('buy_property_') ||
            interaction.customId.startsWith('skip_property_')
        )) {
            const typhuCommand = client.commands.get('typhu');
            if (typhuCommand && typhuCommand.handleInteraction) {
                await typhuCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho X√¨ D√°ch Bot
        if (interaction.customId && (
            interaction.customId === 'xjbot_join' ||
            interaction.customId === 'xjbot_start' ||
            interaction.customId === 'xjbot_hit' ||
            interaction.customId === 'xjbot_stand'
        )) {
            const xjbotCommand = client.commands.get('xjbot');
            if (xjbotCommand && xjbotCommand.handleInteraction) {
                await xjbotCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω modal submit cho X√¨ D√°ch Bot
        if (interaction.isModalSubmit() && interaction.customId === 'xjbot_bet_modal') {
            const xjbotCommand = client.commands.get('xjbot');
            if (xjbotCommand && xjbotCommand.handleInteraction) {
                await xjbotCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho C·ªù T·ª∑ Ph√∫ Bot
        if (interaction.customId && (
            interaction.customId === 'tpbot_join' ||
            interaction.customId === 'tpbot_start' ||
            interaction.customId.startsWith('tpbot_roll_dice_') ||
            interaction.customId.startsWith('tpbot_buy_property_') ||
            interaction.customId.startsWith('tpbot_skip_property_')
        )) {
            const tpbotCommand = client.commands.get('tpbot');
            if (tpbotCommand && tpbotCommand.handleInteraction) {
                await tpbotCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho Farm (muacay)
        if (interaction.customId && (
            interaction.customId.startsWith('plant_tree_')
        )) {
            const muacayCommand = client.commands.get('muacay');
            if (muacayCommand && muacayCommand.handleInteraction) {
                await muacayCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho caycheck (xem chi ti·∫øt c√¢y)
        if (interaction.customId && (
            interaction.customId.startsWith('tree_detail_')
        )) {
            const cayCheckCommand = client.commands.get('caycheck');
            if (cayCheckCommand && cayCheckCommand.handleInteraction) {
                await cayCheckCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho bancay
        if (interaction.customId && (
            interaction.customId.startsWith('sell_tree_') ||
            interaction.customId.startsWith('cancel_sell_')
        )) {
            const bancayCommand = client.commands.get('bancay');
            if (bancayCommand && bancayCommand.handleInteraction) {
                await bancayCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho Pet system
        if (interaction.customId && (
            interaction.customId.startsWith('breed_') ||
            interaction.customId.startsWith('sell_pet_') ||
            interaction.customId.startsWith('retire_pet_') ||
            interaction.customId.startsWith('cancel_pet_')
        )) {
            let petCommand = null;
            
            if (interaction.customId.startsWith('breed_')) {
                petCommand = client.commands.get('petchich');
            } else if (interaction.customId.startsWith('sell_pet_')) {
                petCommand = client.commands.get('banpet');
            } else if (interaction.customId.startsWith('retire_pet_')) {
                petCommand = client.commands.get('gia');
            } else if (interaction.customId.startsWith('cancel_pet_')) {
                petCommand = client.commands.get('huypet');
            }
            
            if (petCommand && petCommand.handleInteraction) {
                await petCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho City system
        if (interaction.customId && (
            interaction.customId.startsWith('rent_house_') ||
            interaction.customId.startsWith('job_apply_') ||
            interaction.customId.startsWith('mission_') ||
            interaction.customId.startsWith('repair_') ||
            interaction.customId.startsWith('early_repair_') ||
            interaction.customId.startsWith('cancel_house_')
        )) {
            let cityCommand = null;
            
            if (interaction.customId.startsWith('rent_house_')) {
                cityCommand = client.commands.get('thuenha');
            } else if (interaction.customId.startsWith('job_apply_')) {
                cityCommand = client.commands.get('dangkynghe');
            } else if (interaction.customId.startsWith('mission_')) {
                cityCommand = client.commands.get('nhiemvu');
            } else if (interaction.customId.startsWith('repair_') || interaction.customId.startsWith('early_repair_')) {
                cityCommand = client.commands.get('suanha');
            } else if (interaction.customId.startsWith('cancel_house_')) {
                cityCommand = client.commands.get('huynha');
            }
            
            if (cityCommand && cityCommand.handleInteraction) {
                await cityCommand.handleInteraction(interaction);
            }
            return;
        }

        // X·ª≠ l√Ω interactions cho Reminder system
        if (interaction.customId && (
            interaction.customId.startsWith('refresh_reminders_') ||
            interaction.customId.startsWith('clear_reminders_')
        )) {
            const reminderCommand = client.commands.get('xemnhacnho');
            if (reminderCommand && reminderCommand.handleInteraction) {
                await reminderCommand.handleInteraction(interaction);
            }
            return;
        }

    } catch (error) {
        console.error('L·ªói interaction:', error);
        if (!interaction.replied && !interaction.deferred) {
            await interaction.reply({ content: '‚ùå C√≥ l·ªói x·∫£y ra!', flags: 64 });
        }
    }
});

// X·ª≠ l√Ω reaction cho giveaway
client.on('messageReactionAdd', async (reaction, user) => {
    if (user.bot) return;
    
    // Import giveaway handler
    try {
        const giveawayHandler = require('./commands/general/giveaway.js');
        if (giveawayHandler.handleReaction) {
            await giveawayHandler.handleReaction(reaction, user, 'add');
        }
    } catch (error) {
        console.error('L·ªói x·ª≠ l√Ω reaction:', error);
    }
});

client.on('messageReactionRemove', async (reaction, user) => {
    if (user.bot) return;
    
    try {
        const giveawayHandler = require('./commands/general/giveaway.js');
        if (giveawayHandler.handleReaction) {
            await giveawayHandler.handleReaction(reaction, user, 'remove');
        }
    } catch (error) {
        console.error('L·ªói x·ª≠ l√Ω reaction remove:', error);
    }
});

// L∆∞u th·ªùi ƒëi·ªÉm join voice v√†o DB cho ngh·ªÅ MC
client.on('voiceStateUpdate', async (oldState, newState) => {
    try {
        const { getCityUser, updateCityUser, updateUserRin } = require('./utils/database');
        const { JOB_TYPES, COLORS } = require('./utils/constants');
        const { EmbedBuilder } = require('discord.js');
        
        // User join voice channel
        if (!oldState.channelId && newState.channelId) {
            const userId = newState.id;
            const cityUser = await getCityUser(userId);
            if (cityUser && cityUser.job === 'mc') {
                await updateCityUser(userId, { lastVoiceJoin: new Date() });
                console.log(`üé§ MC ${newState.member.displayName} ƒë√£ v√†o voice`);
            }
        }
        
        // User leave voice channel - t√≠nh th·ªùi gian v√† update ti·∫øn ƒë·ªô
        if (oldState.channelId && !newState.channelId) {
            const userId = oldState.id;
            const cityUser = await getCityUser(userId);
            if (cityUser && cityUser.job === 'mc' && cityUser.lastVoiceJoin) {
                const job = JOB_TYPES.mc;
                const now = new Date();
                const lastJoin = new Date(cityUser.lastVoiceJoin);
                const sessionMinutes = Math.floor((now - lastJoin) / 60000);
                const dailyProgress = cityUser.dailyVoiceMinutes || 0;
                const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                const isNewDay = !cityUser.lastWork || new Date(cityUser.lastWork) < todayStart;
                
                // Reset n·∫øu l√† ng√†y m·ªõi
                const currentDaily = isNewDay ? sessionMinutes : dailyProgress + sessionMinutes;
                
                console.log(`üé§ MC ${oldState.member.displayName} r·ªùi voice: ${sessionMinutes} ph√∫t, t·ªïng: ${currentDaily} ph√∫t`);
                
                if (currentDaily >= job.minVoiceMinutes && (isNewDay || dailyProgress < job.minVoiceMinutes)) {
                    // Ho√†n th√†nh c√¥ng vi·ªác
                    await updateUserRin(userId, job.rewardPerDay);
                    await updateCityUser(userId, { 
                        lastWork: now,
                        lastVoiceJoin: null,
                        dailyVoiceMinutes: 0
                    });
                    
                    const embed = new EmbedBuilder()
                        .setTitle('üéâ MC - HO√ÄN TH√ÄNH C√îNG VI·ªÜC!')
                        .setDescription(`**‚úÖ Ch√∫c m·ª´ng ${oldState.member.displayName}! B·∫°n ƒë√£ ho√†n th√†nh ca l√†m MC!**\n\n` +
                            `‚Ä¢ **Th·ªùi gian voice h√¥m nay:** ${currentDaily} ph√∫t\n` +
                            `‚Ä¢ **Y√™u c·∫ßu:** ${job.minVoiceMinutes} ph√∫t\n` +
                            `‚Ä¢ **Th∆∞·ªüng nh·∫≠n ƒë∆∞·ª£c:** ${job.rewardPerDay} Rin\n\n` +
                            `**‚è∞ Cooldown:** ${Math.floor(job.cooldown / (60 * 60 * 1000))} gi·ªù\n` +
                            `H√£y ngh·ªâ ng∆°i v√† quay l·∫°i sau!`)
                        .setColor(COLORS.success);
                    
                    // G·ª≠i th√¥ng b√°o ƒë·∫øn channel m√† user ƒëang ·ªü
                    const channels = oldState.guild.channels.cache.filter(c => c.type === 0);
                    const targetChannel = channels.find(c => c.name.includes('chat') || c.name.includes('general')) || channels.first();
                    if (targetChannel) {
                        await targetChannel.send({ embeds: [embed] });
                    }
                } else {
                    // Ch·ªâ c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
                    await updateCityUser(userId, {
                        lastVoiceJoin: null,
                        dailyVoiceMinutes: currentDaily
                    });
                }
            }
        }
    } catch (err) {
        console.error('L·ªói voiceStateUpdate:', err);
    }
});

// Cron jobs
const setupCronJobs = () => {
    // Update ti·∫øn ƒë·ªô MC m·ªói ph√∫t cho user ƒëang ·ªü voice
    cron.schedule('* * * * *', async () => {
        try {
            const { getCityUser, updateCityUser, updateUserRin } = require('./utils/database');
            const { JOB_TYPES, COLORS } = require('./utils/constants');
            const { EmbedBuilder } = require('discord.js');
            
            for (const guild of client.guilds.cache.values()) {
                for (const voiceChannel of guild.channels.cache.filter(c => c.type === 2).values()) {
                    for (const member of voiceChannel.members.values()) {
                        if (member.user.bot) continue;
                        
                        const cityUser = await getCityUser(member.id);
                        if (cityUser && cityUser.job === 'mc' && cityUser.lastVoiceJoin) {
                            const job = JOB_TYPES.mc;
                            const now = new Date();
                            const lastJoin = new Date(cityUser.lastVoiceJoin);
                            const sessionMinutes = Math.floor((now - lastJoin) / 60000);
                            const dailyProgress = cityUser.dailyVoiceMinutes || 0;
                            const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                            const isNewDay = !cityUser.lastWork || new Date(cityUser.lastWork) < todayStart;
                            
                            // Reset n·∫øu l√† ng√†y m·ªõi
                            const currentDaily = isNewDay ? sessionMinutes : dailyProgress + sessionMinutes;
                            
                            // Ki·ªÉm tra n·∫øu ƒë·ªß ƒëi·ªÅu ki·ªán ho√†n th√†nh v√† ch∆∞a ho√†n th√†nh h√¥m nay
                            if (currentDaily >= job.minVoiceMinutes && (isNewDay || dailyProgress < job.minVoiceMinutes)) {
                                // Ho√†n th√†nh c√¥ng vi·ªác
                                await updateUserRin(member.id, job.rewardPerDay);
                                await updateCityUser(member.id, { 
                                    lastWork: now,
                                    lastVoiceJoin: null,
                                    dailyVoiceMinutes: 0
                                });
                                
                                const embed = new EmbedBuilder()
                                    .setTitle('üéâ MC - HO√ÄN TH√ÄNH C√îNG VI·ªÜC!')
                                    .setDescription(`**‚úÖ Ch√∫c m·ª´ng ${member.displayName}! B·∫°n ƒë√£ ho√†n th√†nh ca l√†m MC!**\n\n` +
                                        `‚Ä¢ **Th·ªùi gian voice h√¥m nay:** ${currentDaily} ph√∫t\n` +
                                        `‚Ä¢ **Y√™u c·∫ßu:** ${job.minVoiceMinutes} ph√∫t\n` +
                                        `‚Ä¢ **Th∆∞·ªüng nh·∫≠n ƒë∆∞·ª£c:** ${job.rewardPerDay} Rin\n\n` +
                                        `**‚è∞ Cooldown:** ${Math.floor(job.cooldown / (60 * 60 * 1000))} gi·ªù\n` +
                                        `H√£y ngh·ªâ ng∆°i v√† quay l·∫°i sau!`)
                                    .setColor(COLORS.success);
                                
                                // G·ª≠i th√¥ng b√°o ƒë·∫øn channel ch√≠nh
                                const channels = guild.channels.cache.filter(c => c.type === 0);
                                const targetChannel = channels.find(c => c.name.includes('chat') || c.name.includes('general')) || channels.first();
                                if (targetChannel) {
                                    await targetChannel.send({ embeds: [embed] });
                                }
                                console.log(`üéâ MC ${member.displayName} ƒë√£ ho√†n th√†nh ca l√†m t·ª± ƒë·ªông!`);
                            } else if (sessionMinutes > 0) {
                                // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
                                await updateCityUser(member.id, {
                                    dailyVoiceMinutes: currentDaily
                                });
                                console.log(`‚è±Ô∏è Update MC ${member.displayName}: ${currentDaily}/${job.minVoiceMinutes} ph√∫t`);
                            }
                        }
                    }
                }
            }
        } catch (error) {
            console.error('L·ªói update ti·∫øn ƒë·ªô MC:', error);
        }
    });

    // Ki·ªÉm tra giveaway m·ªói 10 gi√¢y
    cron.schedule('*/10 * * * * *', async () => {
        try {
            const giveawayHandler = require('./commands/general/giveaway.js');
            if (giveawayHandler.checkGiveaways) {
                await giveawayHandler.checkGiveaways(client);
            }
        } catch (error) {
            console.error('L·ªói ki·ªÉm tra giveaway:', error);
        }
    });

    // Ki·ªÉm tra s·ª≠a nh√† m·ªói ng√†y
    cron.schedule('0 0 * * *', async () => {
        try {
            const cityHandler = require('./commands/city/city.js');
            if (cityHandler.checkRepair) {
                await cityHandler.checkRepair(client);
            }
        } catch (error) {
            console.error('L·ªói ki·ªÉm tra s·ª≠a nh√†:', error);
        }
    });

    // C·∫≠p nh·∫≠t bot activity m·ªói 30 ph√∫t
    cron.schedule('*/30 * * * *', async () => {
        try {
            if (client.isReady()) {
                await updateBotActivity();
            }
        } catch (error) {
            console.error('L·ªói c·∫≠p nh·∫≠t bot activity:', error);
        }
    });
    
    console.log('‚è∞ ƒê√£ thi·∫øt l·∫≠p c√°c cron jobs');
};

// Kh·ªüi ƒë·ªông bot
const startBot = async () => {
    try {
        // K·∫øt n·ªëi database
        await connectDB(config.mongoUri);
        
        // Load commands
        loadCommands();
        
        // Setup cron jobs
        setupCronJobs();
        
        // Load giveaway ƒëang ho·∫°t ƒë·ªông
        const giveawayHandler = require('./commands/general/giveaway.js');
        if (giveawayHandler.loadActiveGiveaways) {
            await giveawayHandler.loadActiveGiveaways(client);
        }
        
        // ƒêƒÉng nh·∫≠p bot
        await client.login(config.token);
    } catch (error) {
        console.error('‚ùå L·ªói kh·ªüi ƒë·ªông bot:', error);
        process.exit(1);
    }
};

startBot(); 